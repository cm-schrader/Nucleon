
Nucleon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f0  080072f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f8  080072f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b9c  20000074  08007374  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c10  08007374  00024c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b05f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003612  00000000  00000000  0003b103  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001418  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022648  00000000  00000000  00040db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f60  00000000  00000000  000633f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9349  00000000  00000000  00074358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d6a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  0013d71c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007118 	.word	0x08007118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007118 	.word	0x08007118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <indicator_task>:
  */

#include "Human_Interface/indicator.h"

void indicator_task(TIM_HandleTypeDef timerHandle, uint32_t timerChannel)
{
 8000570:	b084      	sub	sp, #16
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	f107 0c10 	add.w	ip, r7, #16
 800057c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	struct tone *t;
	if (osMessageQueueGet(toneQueueId, t, NULL, osWaitForever) == osOK)
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <indicator_task+0x58>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f003 f90e 	bl	80037ac <osMessageQueueGet>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10a      	bne.n	80005ac <indicator_task+0x3c>
	{
		_piezo_config(t->freq);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f826 	bl	80005ec <_piezo_config>
		osDelay(t->length);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f84d 	bl	8003644 <osDelay>
	else
	{
		_piezo_halt();
		osDelay(500);
	}
}
 80005aa:	e005      	b.n	80005b8 <indicator_task+0x48>
		_piezo_halt();
 80005ac:	f000 f84e 	bl	800064c <_piezo_halt>
		osDelay(500);
 80005b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b4:	f003 f846 	bl	8003644 <osDelay>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c2:	b004      	add	sp, #16
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200049ec 	.word	0x200049ec

080005cc <note>:

void note(uint32_t freq, uint32_t length)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	struct tone t;
	t.freq = freq;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60bb      	str	r3, [r7, #8]
	t.length = length;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	60fb      	str	r3, [r7, #12]
//	osMessageQueuePut(toneQueueId, &t, 1, 50);
//	osMessageQueuePut(toneQueueId, &freq, 0, 100);
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <_piezo_config>:

void _piezo_config(uint32_t freq)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint32_t t = (uint32_t) 1000000 / freq;
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <_piezo_config+0x58>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 80005fe:	2108      	movs	r1, #8
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <_piezo_config+0x5c>)
 8000602:	f002 f861 	bl	80026c8 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	piezo.Init.Period = t;//1000/(freq);
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <_piezo_config+0x5c>)
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	60d3      	str	r3, [r2, #12]
	piezo.Init.Period = t;
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <_piezo_config+0x5c>)
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Init(&piezo);
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <_piezo_config+0x5c>)
 8000614:	f001 ffe5 	bl	80025e2 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = piezo.Init.Period / 2;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <_piezo_config+0x5c>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	085b      	lsrs	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_ConfigChannel(&piezo, &sConfigOC, TIM_CHANNEL_3);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2208      	movs	r2, #8
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <_piezo_config+0x5c>)
 800062e:	f002 f9ab 	bl	8002988 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&piezo, TIM_CHANNEL_3);
 8000632:	2108      	movs	r1, #8
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <_piezo_config+0x5c>)
 8000636:	f002 f809 	bl	800264c <HAL_TIM_PWM_Start>
}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	000f4240 	.word	0x000f4240
 8000648:	200049ac 	.word	0x200049ac

0800064c <_piezo_halt>:

void _piezo_halt()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 8000650:	2108      	movs	r1, #8
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <_piezo_halt+0x10>)
 8000654:	f002 f838 	bl	80026c8 <HAL_TIM_PWM_Stop>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200049ac 	.word	0x200049ac

08000660 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800066c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d013      	beq.n	80006a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000680:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00b      	beq.n	80006a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000688:	e000      	b.n	800068c <ITM_SendChar+0x2c>
    {
      __NOP();
 800068a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800068c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000696:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_write>:
uint8_t cmd[4] = {0, 0, 0, 0};
uint8_t data[4] = {0, 0, 0, 0};

/* Redirect printf to debug console */
int _write(int file, char *ptr, int len)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
	int i = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; ++i)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e009      	b.n	80006d8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffc7 	bl	8000660 <ITM_SendChar>
	for (i = 0; i < len; ++i)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf1      	blt.n	80006c4 <_write+0x16>
	return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fd06 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f85c 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 f966 	bl	80009c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006fc:	f000 f8b6 	bl	800086c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000700:	f000 f8ea 	bl	80008d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000704:	f002 fe8e 	bl	8003424 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of toneQueue */
  toneQueueHandle = osMessageQueueNew (30, sizeof(struct tone), &toneQueue_attributes);
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <main+0x8c>)
 800070a:	2108      	movs	r1, #8
 800070c:	201e      	movs	r0, #30
 800070e:	f002 ffc7 	bl	80036a0 <osMessageQueueNew>
 8000712:	4602      	mov	r2, r0
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <main+0x90>)
 8000716:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  toneQueueId = toneQueueHandle;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0x90>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <main+0x94>)
 800071e:	6013      	str	r3, [r2, #0]
  piezo = htim3;
 8000720:	4a18      	ldr	r2, [pc, #96]	; (8000784 <main+0x98>)
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0x9c>)
 8000724:	4614      	mov	r4, r2
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <main+0xa0>)
 800073e:	2100      	movs	r1, #0
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <main+0xa4>)
 8000742:	f002 fed9 	bl	80034f8 <osThreadNew>
 8000746:	4602      	mov	r2, r0
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <main+0xa8>)
 800074a:	601a      	str	r2, [r3, #0]

  /* creation of flashDemo */
  flashDemoHandle = osThreadNew(StartFlashDemo, NULL, &flashDemo_attributes);
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <main+0xac>)
 800074e:	2100      	movs	r1, #0
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0xb0>)
 8000752:	f002 fed1 	bl	80034f8 <osThreadNew>
 8000756:	4602      	mov	r2, r0
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <main+0xb4>)
 800075a:	601a      	str	r2, [r3, #0]

  /* creation of indicator */
  indicatorHandle = osThreadNew(StartIndicator, NULL, &indicator_attributes);
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0xb8>)
 800075e:	2100      	movs	r1, #0
 8000760:	4811      	ldr	r0, [pc, #68]	; (80007a8 <main+0xbc>)
 8000762:	f002 fec9 	bl	80034f8 <osThreadNew>
 8000766:	4602      	mov	r2, r0
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <main+0xc0>)
 800076a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
#ifdef DEBUG
  /* Run test cases in debug mode. */
  execute_tests();
 800076c:	f000 fc2e 	bl	8000fcc <execute_tests>
#endif
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000770:	f002 fe8c 	bl	800348c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x88>
 8000776:	bf00      	nop
 8000778:	08007228 	.word	0x08007228
 800077c:	20004ae0 	.word	0x20004ae0
 8000780:	200049ec 	.word	0x200049ec
 8000784:	200049ac 	.word	0x200049ac
 8000788:	20004ae4 	.word	0x20004ae4
 800078c:	080071bc 	.word	0x080071bc
 8000790:	08000a99 	.word	0x08000a99
 8000794:	20004b7c 	.word	0x20004b7c
 8000798:	080071e0 	.word	0x080071e0
 800079c:	08000ac5 	.word	0x08000ac5
 80007a0:	20004b80 	.word	0x20004b80
 80007a4:	08007204 	.word	0x08007204
 80007a8:	08000b21 	.word	0x08000b21
 80007ac:	20004b84 	.word	0x20004b84

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fd59 	bl	8006276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xb4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xb4>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <SystemClock_Config+0xb8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemClock_Config+0xb8>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000816:	2300      	movs	r3, #0
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ff60 	bl	80016e4 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800082a:	f000 f9a5 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f9ba 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000856:	f000 f98f 	bl	8000b78 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f001 fb8f 	bl	8001fe0 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 f956 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20004b24 	.word	0x20004b24
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <MX_TIM3_Init+0xec>)
 800090c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_TIM3_Init+0xe8>)
 8000910:	2210      	movs	r2, #16
 8000912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_TIM3_Init+0xe8>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800091c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000920:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_TIM3_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800092e:	4824      	ldr	r0, [pc, #144]	; (80009c0 <MX_TIM3_Init+0xe8>)
 8000930:	f001 fe08 	bl	8002544 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800093a:	f000 f91d 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000948:	4619      	mov	r1, r3
 800094a:	481d      	ldr	r0, [pc, #116]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800094c:	f002 f8e2 	bl	8002b14 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000956:	f000 f90f 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800095a:	4819      	ldr	r0, [pc, #100]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800095c:	f001 fe41 	bl	80025e2 <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000966:	f000 f907 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_TIM3_Init+0xe8>)
 800097a:	f002 fcbb 	bl	80032f4 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000984:	f000 f8f8 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800098c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2208      	movs	r2, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM3_Init+0xe8>)
 80009a2:	f001 fff1 	bl	8002988 <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009ac:	f000 f8e4 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM3_Init+0xe8>)
 80009b2:	f000 f9bf 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 80009b6:	bf00      	nop
 80009b8:	3738      	adds	r7, #56	; 0x38
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20004ae4 	.word	0x20004ae4
 80009c4:	40000400 	.word	0x40000400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_GPIO_Init+0xc4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <MX_GPIO_Init+0xc4>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MX_GPIO_Init+0xc4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_GPIO_Init+0xc4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2110      	movs	r1, #16
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_GPIO_Init+0xc8>)
 8000a38:	f000 fe20 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <MX_GPIO_Init+0xcc>)
 8000a44:	f000 fe1a 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_GPIO_Init+0xc8>)
 8000a60:	f000 fc72 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_GPIO_Init+0xcc>)
 8000a7e:	f000 fc63 	bl	8001348 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400

08000a98 <StartBlink>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  note(500, 200);
 8000aa0:	21c8      	movs	r1, #200	; 0xc8
 8000aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa6:	f7ff fd91 	bl	80005cc <note>
	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <StartBlink+0x28>)
 8000ab0:	f000 fdfd 	bl	80016ae <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f002 fdc4 	bl	8003644 <osDelay>
	  note(500, 200);
 8000abc:	e7f0      	b.n	8000aa0 <StartBlink+0x8>
 8000abe:	bf00      	nop
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <StartFlashDemo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashDemo */
void StartFlashDemo(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashDemo */
  cmd[0] = 0x9f;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <StartFlashDemo+0x4c>)
 8000ace:	229f      	movs	r2, #159	; 0x9f
 8000ad0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <StartFlashDemo+0x50>)
 8000ad8:	f000 fdd0 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <StartFlashDemo+0x50>)
 8000ae2:	f000 fdcb 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, cmd, data, 4, 0xff);
 8000ae6:	23ff      	movs	r3, #255	; 0xff
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2304      	movs	r3, #4
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <StartFlashDemo+0x54>)
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <StartFlashDemo+0x4c>)
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <StartFlashDemo+0x58>)
 8000af2:	f001 fad9 	bl	80020a8 <HAL_SPI_TransmitReceive>
	  osDelay(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f002 fda4 	bl	8003644 <osDelay>
	  /* For some reason, printf seems to break threads */
	  /*printf("JedecID: %02x-%02x%02x\n", data[1], data[2], data[3]);*/
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <StartFlashDemo+0x50>)
 8000b02:	f000 fdbb 	bl	800167c <HAL_GPIO_WritePin>
	  osDelay(3000);
 8000b06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b0a:	f002 fd9b 	bl	8003644 <osDelay>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b0e:	e7e0      	b.n	8000ad2 <StartFlashDemo+0xe>
 8000b10:	20000090 	.word	0x20000090
 8000b14:	40020000 	.word	0x40020000
 8000b18:	20000094 	.word	0x20000094
 8000b1c:	20004b24 	.word	0x20004b24

08000b20 <StartIndicator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIndicator */
void StartIndicator(void *argument)
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b091      	sub	sp, #68	; 0x44
 8000b24:	af0e      	add	r7, sp, #56	; 0x38
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIndicator */
  /* Infinite loop */
  for(;;)
  {
    indicator_task(htim3, TIM_CHANNEL_3);
 8000b28:	4e09      	ldr	r6, [pc, #36]	; (8000b50 <StartIndicator+0x30>)
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8000b2e:	466d      	mov	r5, sp
 8000b30:	f106 0410 	add.w	r4, r6, #16
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b48:	f7ff fd12 	bl	8000570 <indicator_task>
 8000b4c:	e7ec      	b.n	8000b28 <StartIndicator+0x8>
 8000b4e:	bf00      	nop
 8000b50:	20004ae4 	.word	0x20004ae4

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 faed 	bl	8001144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <pool_spawn>:
 *
 * @note 	Because each element needs to be able to a pointer to another element,
 * 			the minimum elementSize is 8 bytes.
 */
struct pool* pool_spawn(uint32_t elementSize, uint32_t elementNumber)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	if (elementSize < 8) return NULL;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d801      	bhi.n	8000b9a <pool_spawn+0x14>
 8000b96:	2300      	movs	r3, #0
 8000b98:	e031      	b.n	8000bfe <pool_spawn+0x78>

	/* Allocate memory */
	struct pool *ptr = (struct pool *) pvPortMalloc(sizeof(struct pool) + elementSize * elementNumber);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	3310      	adds	r3, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 f95b 	bl	8005e60 <pvPortMalloc>
 8000baa:	60f8      	str	r0, [r7, #12]
	ptr->elementSize = elementSize;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
	ptr->elementNumber  = elementNumber;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
	ptr->usedElements = 0;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]

	/* Traverse to start of pool */
	struct freeElement *el = (struct freeElement *) ptr + sizeof(struct pool) / 4;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3310      	adds	r3, #16
 8000bc2:	617b      	str	r3, [r7, #20]
	struct freeElement *nextEl;
	ptr->nextFree = el;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	60da      	str	r2, [r3, #12]

	/* Create linked list of free elements */
	for (int i = 0; i < elementNumber - 1; ++i)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	e00d      	b.n	8000bec <pool_spawn+0x66>
	{
		nextEl = el + elementSize / 4;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f023 0303 	bic.w	r3, r3, #3
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4413      	add	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
		el->nextFree = nextEl;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	601a      	str	r2, [r3, #0]
		el = nextEl;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < elementNumber - 1; ++i)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3301      	adds	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8ec      	bhi.n	8000bd0 <pool_spawn+0x4a>
	}
	el->nextFree = NULL;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

	return ptr;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x54>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <HAL_MspInit+0x54>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_MspInit+0x54>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x54>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f000 fb51 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SPI1_SDI_Pin|SPI1_SDO_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 fb37 	bl	8001348 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_TIM_Base_MspInit+0x3c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_TIM_Base_MspInit+0x40>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_TIM_MspPostInit+0x68>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d11d      	bne.n	8000d92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PIEZO_Pin;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIEZO_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_TIM_MspPostInit+0x70>)
 8000d8e:	f000 fadb 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	2036      	movs	r0, #54	; 0x36
 8000dbe:	f000 fa99 	bl	80012f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f000 fab2 	bl	800132c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_InitTick+0xa4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_InitTick+0xa4>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_InitTick+0xa4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f8c4 	bl	8001f7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000df4:	f001 f8ae 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_InitTick+0xa8>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0c9b      	lsrs	r3, r3, #18
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_InitTick+0xac>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_InitTick+0xb0>)
 8000e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_InitTick+0xac>)
 8000e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_InitTick+0xac>)
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_InitTick+0xac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_InitTick+0xac>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_InitTick+0xac>)
 8000e2e:	f001 fb89 	bl	8002544 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d104      	bne.n	8000e42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_InitTick+0xac>)
 8000e3a:	f001 fbae 	bl	800259a <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	20004b88 	.word	0x20004b88
 8000e58:	40001000 	.word	0x40001000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM6_DAC_IRQHandler+0x10>)
 8000e96:	f001 fc6f 	bl	8002778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20004b88 	.word	0x20004b88

08000ea4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
	}

return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x16>
		heap_end = &end;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <_sbrk+0x50>)
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <_sbrk+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <_sbrk+0x50>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <_sbrk+0x50>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	466a      	mov	r2, sp
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d907      	bls.n	8000f82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f72:	f005 f94b 	bl	800620c <__errno>
 8000f76:	4602      	mov	r2, r0
 8000f78:	230c      	movs	r3, #12
 8000f7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	e006      	b.n	8000f90 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <_sbrk+0x50>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <_sbrk+0x50>)
 8000f8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000098 	.word	0x20000098
 8000f9c:	20004c10 	.word	0x20004c10

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SystemInit+0x28>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SystemInit+0x28>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SystemInit+0x28>)
 8000fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fba:	609a      	str	r2, [r3, #8]
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <execute_tests>:
  */

#include "test/exec.h"

void execute_tests()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	printf("Executing Test Cases...\n");
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <execute_tests+0x14>)
 8000fd2:	f005 f9cd 	bl	8006370 <puts>
	memory_pool_tests();
 8000fd6:	f000 f805 	bl	8000fe4 <memory_pool_tests>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800715c 	.word	0x0800715c

08000fe4 <memory_pool_tests>:


#include "test/pool.h"

bool memory_pool_tests()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	printf("[Memory Pool]\n");
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <memory_pool_tests+0x30>)
 8000fec:	f005 f9c0 	bl	8006370 <puts>
	bool passed = true;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	71fb      	strb	r3, [r7, #7]

	if (!_test_spawn()) passed = false;
 8000ff4:	f000 f810 	bl	8001018 <_test_spawn>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <memory_pool_tests+0x24>
 8001004:	2300      	movs	r3, #0
 8001006:	71fb      	strb	r3, [r7, #7]

	return passed;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	08007174 	.word	0x08007174

08001018 <_test_spawn>:

bool _test_spawn()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	printf("->Pool Spawn:\t");
 800101e:	4820      	ldr	r0, [pc, #128]	; (80010a0 <_test_spawn+0x88>)
 8001020:	f005 f932 	bl	8006288 <iprintf>
	struct pool *ptr = pool_spawn(8, 5);
 8001024:	2105      	movs	r1, #5
 8001026:	2008      	movs	r0, #8
 8001028:	f7ff fdad 	bl	8000b86 <pool_spawn>
 800102c:	6078      	str	r0, [r7, #4]
	bool elSize = ptr->elementSize == 8;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b08      	cmp	r3, #8
 8001034:	bf0c      	ite	eq
 8001036:	2301      	moveq	r3, #1
 8001038:	2300      	movne	r3, #0
 800103a:	70fb      	strb	r3, [r7, #3]
	bool elNum = ptr->elementNumber == 5;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b05      	cmp	r3, #5
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	70bb      	strb	r3, [r7, #2]
	bool used = ptr->usedElements == 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	707b      	strb	r3, [r7, #1]
	bool next = ptr->nextFree->nextFree->nextFree->nextFree->nextFree == NULL;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	703b      	strb	r3, [r7, #0]

	if (elSize && elNum && used && next)
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00d      	beq.n	8001090 <_test_spawn+0x78>
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <_test_spawn+0x78>
 800107a:	787b      	ldrb	r3, [r7, #1]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <_test_spawn+0x78>
 8001080:	783b      	ldrb	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <_test_spawn+0x78>
	{
		printf("PASS\n");
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <_test_spawn+0x8c>)
 8001088:	f005 f972 	bl	8006370 <puts>
		return true;
 800108c:	2301      	movs	r3, #1
 800108e:	e003      	b.n	8001098 <_test_spawn+0x80>
	}
	else
	{
		printf("FAIL\n");
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <_test_spawn+0x90>)
 8001092:	f005 f96d 	bl	8006370 <puts>
		return false;
 8001096:	2300      	movs	r3, #0
	}
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08007184 	.word	0x08007184
 80010a4:	08007194 	.word	0x08007194
 80010a8:	0800719c 	.word	0x0800719c

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010b2:	e003      	b.n	80010bc <LoopCopyDataInit>

080010b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ba:	3104      	adds	r1, #4

080010bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010c4:	d3f6      	bcc.n	80010b4 <CopyDataInit>
  ldr  r2, =_sbss
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010c8:	e002      	b.n	80010d0 <LoopFillZerobss>

080010ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010cc:	f842 3b04 	str.w	r3, [r2], #4

080010d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010d4:	d3f9      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010d6:	f7ff ff63 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010da:	f005 f89d 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fb05 	bl	80006ec <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010e8:	08007300 	.word	0x08007300
  ldr  r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010f0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80010f4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80010f8:	20004c10 	.word	0x20004c10

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_Init+0x40>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_Init+0x40>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x40>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f8d8 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fe3a 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fd68 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20004bc8 	.word	0x20004bc8

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20004bc8 	.word	0x20004bc8

08001184 <__NVIC_SetPriorityGrouping>:
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001306:	f7ff ff61 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800130a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ffb1 	bl	8001278 <NVIC_EncodePriority>
 8001316:	4602      	mov	r2, r0
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff80 	bl	8001224 <__NVIC_SetPriority>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff54 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e16b      	b.n	800163c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 815a 	bne.w	8001636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d00b      	beq.n	80013a2 <HAL_GPIO_Init+0x5a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001396:	2b11      	cmp	r3, #17
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0xfc>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80b4 	beq.w	8001636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_GPIO_Init+0x308>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a5e      	ldr	r2, [pc, #376]	; (8001650 <HAL_GPIO_Init+0x308>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_GPIO_Init+0x308>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a5a      	ldr	r2, [pc, #360]	; (8001654 <HAL_GPIO_Init+0x30c>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a51      	ldr	r2, [pc, #324]	; (8001658 <HAL_GPIO_Init+0x310>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d02b      	beq.n	800156e <HAL_GPIO_Init+0x226>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a50      	ldr	r2, [pc, #320]	; (800165c <HAL_GPIO_Init+0x314>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x222>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_GPIO_Init+0x318>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x21e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4e      	ldr	r2, [pc, #312]	; (8001664 <HAL_GPIO_Init+0x31c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <HAL_GPIO_Init+0x320>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x216>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x324>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x212>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4b      	ldr	r2, [pc, #300]	; (8001670 <HAL_GPIO_Init+0x328>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_GPIO_Init+0x32c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x20a>
 800154e:	2307      	movs	r3, #7
 8001550:	e00e      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001552:	2308      	movs	r3, #8
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001556:	2306      	movs	r3, #6
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x228>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x228>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4934      	ldr	r1, [pc, #208]	; (8001654 <HAL_GPIO_Init+0x30c>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b2:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_GPIO_Init+0x330>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_GPIO_Init+0x330>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <HAL_GPIO_Init+0x330>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_GPIO_Init+0x330>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_GPIO_Init+0x330>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_GPIO_Init+0x330>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f ae90 	bls.w	8001364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	3724      	adds	r7, #36	; 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40021c00 	.word	0x40021c00
 8001678:	40013c00 	.word	0x40013c00

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001698:	e003      	b.n	80016a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	401a      	ands	r2, r3
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d104      	bne.n	80016d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	041a      	lsls	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e25b      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d075      	beq.n	80017ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001702:	4ba3      	ldr	r3, [pc, #652]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b04      	cmp	r3, #4
 800170c:	d00c      	beq.n	8001728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170e:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001716:	2b08      	cmp	r3, #8
 8001718:	d112      	bne.n	8001740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171a:	4b9d      	ldr	r3, [pc, #628]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001726:	d10b      	bne.n	8001740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	4b99      	ldr	r3, [pc, #612]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d05b      	beq.n	80017ec <HAL_RCC_OscConfig+0x108>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d157      	bne.n	80017ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e236      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x74>
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x98>
 8001762:	4b8b      	ldr	r3, [pc, #556]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b88      	ldr	r3, [pc, #544]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a87      	ldr	r2, [pc, #540]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xb0>
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a83      	ldr	r2, [pc, #524]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a80      	ldr	r2, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fce6 	bl	800116c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fce2 	bl	800116c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1fb      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xc0>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fcd2 	bl	800116c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fcce 	bl	800116c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1e7      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0xe8>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001806:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x152>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1bb      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4952      	ldr	r1, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	e03a      	b.n	80018c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0x2b0>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fc87 	bl	800116c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fc83 	bl	800116c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e19c      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4940      	ldr	r1, [pc, #256]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e015      	b.n	80018c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x2b0>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fc66 	bl	800116c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc62 	bl	800116c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e17b      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d030      	beq.n	8001930 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x2b4>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fc46 	bl	800116c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc42 	bl	800116c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e15b      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x200>
 8001902:	e015      	b.n	8001930 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x2b4>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff fc2f 	bl	800116c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff fc2b 	bl	800116c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e144      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a0 	beq.w	8001a7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_OscConfig+0x2b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d121      	bne.n	80019be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_RCC_OscConfig+0x2b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_RCC_OscConfig+0x2b8>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff fbf1 	bl	800116c <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e011      	b.n	80019b2 <HAL_RCC_OscConfig+0x2ce>
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	42470000 	.word	0x42470000
 8001998:	42470e80 	.word	0x42470e80
 800199c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a0:	f7ff fbe4 	bl	800116c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0fd      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
 80019c6:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a7c      	ldr	r2, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x32a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x312>
 80019dc:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a76      	ldr	r2, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	4b74      	ldr	r3, [pc, #464]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a73      	ldr	r2, [pc, #460]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x32a>
 80019f6:	4b71      	ldr	r3, [pc, #452]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a70      	ldr	r2, [pc, #448]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a6d      	ldr	r2, [pc, #436]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff fba9 	bl	800116c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fba5 	bl	800116c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0bc      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ee      	beq.n	8001a1e <HAL_RCC_OscConfig+0x33a>
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb93 	bl	800116c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fb8f 	bl	800116c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0a6      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8092 	beq.w	8001bac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d05c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d141      	bne.n	8001b20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb63 	bl	800116c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fb5f 	bl	800116c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e078      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	019b      	lsls	r3, r3, #6
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	061b      	lsls	r3, r3, #24
 8001aec:	4933      	ldr	r1, [pc, #204]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb38 	bl	800116c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fb34 	bl	800116c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e04d      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x41c>
 8001b1e:	e045      	b.n	8001bac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fb21 	bl	800116c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff fb1d 	bl	800116c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e036      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x44a>
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e029      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCC_OscConfig+0x4d8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d115      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	42470060 	.word	0x42470060

08001bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0cc      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d90c      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b8      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	494d      	ldr	r1, [pc, #308]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d044      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d119      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d003      	beq.n	8001c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e06f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e067      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f023 0203 	bic.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4934      	ldr	r1, [pc, #208]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff fa5a 	bl	800116c <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7ff fa56 	bl	800116c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e04f      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 020c 	and.w	r2, r3, #12
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1eb      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d20c      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e032      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4916      	ldr	r1, [pc, #88]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d4a:	f000 f821 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f81c 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00
 8001d80:	40023800 	.word	0x40023800
 8001d84:	08007240 	.word	0x08007240
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d007      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x32>
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d008      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x38>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80b4 	bne.w	8001f24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dbe:	60bb      	str	r3, [r7, #8]
       break;
 8001dc0:	e0b3      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dc4:	60bb      	str	r3, [r7, #8]
      break;
 8001dc6:	e0b0      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d04a      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	f04f 0400 	mov.w	r4, #0
 8001de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	ea03 0501 	and.w	r5, r3, r1
 8001df4:	ea04 0602 	and.w	r6, r4, r2
 8001df8:	4629      	mov	r1, r5
 8001dfa:	4632      	mov	r2, r6
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f04f 0400 	mov.w	r4, #0
 8001e04:	0154      	lsls	r4, r2, #5
 8001e06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4622      	mov	r2, r4
 8001e10:	1b49      	subs	r1, r1, r5
 8001e12:	eb62 0206 	sbc.w	r2, r2, r6
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	0194      	lsls	r4, r2, #6
 8001e20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e24:	018b      	lsls	r3, r1, #6
 8001e26:	1a5b      	subs	r3, r3, r1
 8001e28:	eb64 0402 	sbc.w	r4, r4, r2
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	00e2      	lsls	r2, r4, #3
 8001e36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e3a:	00d9      	lsls	r1, r3, #3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4614      	mov	r4, r2
 8001e40:	195b      	adds	r3, r3, r5
 8001e42:	eb44 0406 	adc.w	r4, r4, r6
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	02a2      	lsls	r2, r4, #10
 8001e50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e54:	0299      	lsls	r1, r3, #10
 8001e56:	460b      	mov	r3, r1
 8001e58:	4614      	mov	r4, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f04f 0400 	mov.w	r4, #0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4623      	mov	r3, r4
 8001e68:	f7fe fa02 	bl	8000270 <__aeabi_uldivmod>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e049      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	ea03 0501 	and.w	r5, r3, r1
 8001e8a:	ea04 0602 	and.w	r6, r4, r2
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4632      	mov	r2, r6
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	f04f 0400 	mov.w	r4, #0
 8001e9a:	0154      	lsls	r4, r2, #5
 8001e9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ea0:	014b      	lsls	r3, r1, #5
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	1b49      	subs	r1, r1, r5
 8001ea8:	eb62 0206 	sbc.w	r2, r2, r6
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f04f 0400 	mov.w	r4, #0
 8001eb4:	0194      	lsls	r4, r2, #6
 8001eb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eba:	018b      	lsls	r3, r1, #6
 8001ebc:	1a5b      	subs	r3, r3, r1
 8001ebe:	eb64 0402 	sbc.w	r4, r4, r2
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	00e2      	lsls	r2, r4, #3
 8001ecc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ed0:	00d9      	lsls	r1, r3, #3
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	195b      	adds	r3, r3, r5
 8001ed8:	eb44 0406 	adc.w	r4, r4, r6
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	02a2      	lsls	r2, r4, #10
 8001ee6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001eea:	0299      	lsls	r1, r3, #10
 8001eec:	460b      	mov	r3, r1
 8001eee:	4614      	mov	r4, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f04f 0400 	mov.w	r4, #0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	f7fe f9b7 	bl	8000270 <__aeabi_uldivmod>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	60bb      	str	r3, [r7, #8]
      break;
 8001f22:	e002      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f26:	60bb      	str	r3, [r7, #8]
      break;
 8001f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	00f42400 	.word	0x00f42400

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	0a9b      	lsrs	r3, r3, #10
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08007250 	.word	0x08007250

08001f7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	220f      	movs	r2, #15
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_RCC_GetClockConfig+0x60>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e056      	b.n	80020a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fe27 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002028:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	ea42 0103 	orr.w	r1, r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	f003 0104 	and.w	r1, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x26>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e18a      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x33c>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020d6:	f7ff f849 	bl	800116c <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d00f      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x70>
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020fe:	d107      	bne.n	8002110 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <HAL_SPI_TransmitReceive+0x68>
 8002108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800210c:	2b04      	cmp	r3, #4
 800210e:	d003      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002110:	2302      	movs	r3, #2
 8002112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002116:	e15b      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_SPI_TransmitReceive+0x82>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_SPI_TransmitReceive+0x82>
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002130:	e14e      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b04      	cmp	r3, #4
 800213c:	d003      	beq.n	8002146 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	887a      	ldrh	r2, [r7, #2]
 8002156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b40      	cmp	r3, #64	; 0x40
 8002188:	d007      	beq.n	800219a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a2:	d178      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_TransmitReceive+0x10a>
 80021ac:	8b7b      	ldrh	r3, [r7, #26]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d166      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	1c9a      	adds	r2, r3, #2
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021d6:	e053      	b.n	8002280 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d11b      	bne.n	800221e <HAL_SPI_TransmitReceive+0x176>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <HAL_SPI_TransmitReceive+0x176>
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	881a      	ldrh	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	1c9a      	adds	r2, r3, #2
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d119      	bne.n	8002260 <HAL_SPI_TransmitReceive+0x1b8>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d014      	beq.n	8002260 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	b292      	uxth	r2, r2
 8002242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	1c9a      	adds	r2, r3, #2
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002260:	f7fe ff84 	bl	800116c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800226c:	429a      	cmp	r2, r3
 800226e:	d807      	bhi.n	8002280 <HAL_SPI_TransmitReceive+0x1d8>
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d003      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800227e:	e0a7      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1a6      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x130>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1a1      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x130>
 8002294:	e07c      	b.n	8002390 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_SPI_TransmitReceive+0x1fc>
 800229e:	8b7b      	ldrh	r3, [r7, #26]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d16b      	bne.n	800237c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	330c      	adds	r3, #12
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ca:	e057      	b.n	800237c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d11c      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x26c>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x26c>
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d114      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d119      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x2ae>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d014      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002352:	2301      	movs	r3, #1
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002356:	f7fe ff09 	bl	800116c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002362:	429a      	cmp	r2, r3
 8002364:	d803      	bhi.n	800236e <HAL_SPI_TransmitReceive+0x2c6>
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d102      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x2cc>
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800237a:	e029      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1a2      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x224>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d19d      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f893 	bl	80024c0 <SPI_EndRxTxTransaction>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023ac:	e010      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	e000      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023fc:	e04c      	b.n	8002498 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d048      	beq.n	8002498 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002406:	f7fe feb1 	bl	800116c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d902      	bls.n	800241c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d13d      	bne.n	8002498 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800242a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002434:	d111      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800243e:	d004      	beq.n	800244a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d107      	bne.n	800245a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002458:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	d10f      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002482:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e00f      	b.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d1a3      	bne.n	80023fe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <SPI_EndRxTxTransaction+0x7c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <SPI_EndRxTxTransaction+0x80>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0d5b      	lsrs	r3, r3, #21
 80024d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ea:	d112      	bne.n	8002512 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff78 	bl	80023ec <SPI_WaitFlagStateUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e00f      	b.n	8002532 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d0f2      	beq.n	8002512 <SPI_EndRxTxTransaction+0x52>
 800252c:	e000      	b.n	8002530 <SPI_EndRxTxTransaction+0x70>
        break;
 800252e:	bf00      	nop
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	165e9f81 	.word	0x165e9f81

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01d      	b.n	8002592 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fbc0 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 fba6 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d007      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e01d      	b.n	8002630 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f815 	bl	8002638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f000 fb57 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fe22 	bl	80032a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_TIM_PWM_Start+0x74>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_TIM_PWM_Start+0x2c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_TIM_PWM_Start+0x78>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_TIM_PWM_Start+0x30>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_TIM_PWM_Start+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d007      	beq.n	80026b4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	6839      	ldr	r1, [r7, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fde4 	bl	80032a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <HAL_TIM_PWM_Stop+0xa8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_PWM_Stop+0x2c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_TIM_PWM_Stop+0xac>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_PWM_Stop+0x30>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_TIM_PWM_Stop+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d017      	beq.n	800272e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	f241 1311 	movw	r3, #4369	; 0x1111
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_TIM_PWM_Stop+0x66>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	f240 4344 	movw	r3, #1092	; 0x444
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d107      	bne.n	800272e <HAL_TIM_PWM_Stop+0x66>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	f241 1311 	movw	r3, #4369	; 0x1111
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_TIM_PWM_Stop+0x96>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	f240 4344 	movw	r3, #1092	; 0x444
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <HAL_TIM_PWM_Stop+0x96>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0202 	mvn.w	r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa6b 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa5d 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fa6e 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d122      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0204 	mvn.w	r2, #4
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa41 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa33 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fa44 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0208 	mvn.w	r2, #8
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa17 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa09 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fa1a 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d122      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d11b      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0210 	mvn.w	r2, #16
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2208      	movs	r2, #8
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9ed 	bl	8002c96 <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f9df 	bl	8002c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f9f0 	bl	8002caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0201 	mvn.w	r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f92c 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d107      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fd6c 	bl	8003400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d107      	bne.n	8002954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9b5 	bl	8002cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0220 	mvn.w	r2, #32
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fd36 	bl	80033ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0b4      	b.n	8002b0c <HAL_TIM_PWM_ConfigChannel+0x184>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2202      	movs	r2, #2
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	f200 809f 	bhi.w	8002af8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002af9 	.word	0x08002af9
 80029c8:	08002af9 	.word	0x08002af9
 80029cc:	08002af9 	.word	0x08002af9
 80029d0:	08002a35 	.word	0x08002a35
 80029d4:	08002af9 	.word	0x08002af9
 80029d8:	08002af9 	.word	0x08002af9
 80029dc:	08002af9 	.word	0x08002af9
 80029e0:	08002a77 	.word	0x08002a77
 80029e4:	08002af9 	.word	0x08002af9
 80029e8:	08002af9 	.word	0x08002af9
 80029ec:	08002af9 	.word	0x08002af9
 80029f0:	08002ab7 	.word	0x08002ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa0a 	bl	8002e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0208 	orr.w	r2, r2, #8
 8002a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6999      	ldr	r1, [r3, #24]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	619a      	str	r2, [r3, #24]
      break;
 8002a32:	e062      	b.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fa5a 	bl	8002ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6999      	ldr	r1, [r3, #24]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	021a      	lsls	r2, r3, #8
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	619a      	str	r2, [r3, #24]
      break;
 8002a74:	e041      	b.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 faaf 	bl	8002fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0208 	orr.w	r2, r2, #8
 8002a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0204 	bic.w	r2, r2, #4
 8002aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69d9      	ldr	r1, [r3, #28]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	61da      	str	r2, [r3, #28]
      break;
 8002ab4:	e021      	b.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fb03 	bl	80030c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69d9      	ldr	r1, [r3, #28]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	021a      	lsls	r2, r3, #8
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	61da      	str	r2, [r3, #28]
      break;
 8002af6:	e000      	b.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002af8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_ConfigClockSource+0x18>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0a6      	b.n	8002c7a <HAL_TIM_ConfigClockSource+0x166>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d067      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x120>
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d80b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x6c>
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d073      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0x140>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d802      	bhi.n	8002b76 <HAL_TIM_ConfigClockSource+0x62>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d06f      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002b74:	e078      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d06c      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0x140>
 8002b7a:	2b30      	cmp	r3, #48	; 0x30
 8002b7c:	d06a      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002b7e:	e073      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b80:	2b70      	cmp	r3, #112	; 0x70
 8002b82:	d00d      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0x8c>
 8002b84:	2b70      	cmp	r3, #112	; 0x70
 8002b86:	d804      	bhi.n	8002b92 <HAL_TIM_ConfigClockSource+0x7e>
 8002b88:	2b50      	cmp	r3, #80	; 0x50
 8002b8a:	d033      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0xe0>
 8002b8c:	2b60      	cmp	r3, #96	; 0x60
 8002b8e:	d041      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002b90:	e06a      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	d066      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x152>
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d017      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002b9e:	e063      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f000 fb5a 	bl	8003268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]
      break;
 8002bcc:	e04c      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6899      	ldr	r1, [r3, #8]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f000 fb43 	bl	8003268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf0:	609a      	str	r2, [r3, #8]
      break;
 8002bf2:	e039      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 fab7 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2150      	movs	r1, #80	; 0x50
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fb10 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002c12:	e029      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f000 fad6 	bl	80031d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2160      	movs	r1, #96	; 0x60
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fb00 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002c32:	e019      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	461a      	mov	r2, r3
 8002c42:	f000 fa97 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2140      	movs	r1, #64	; 0x40
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 faf0 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002c52:	e009      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 fae7 	bl	8003232 <TIM_ITRx_SetConfig>
      break;
 8002c64:	e000      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf2:	d00f      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d108      	bne.n	8002d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d027      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <TIM_Base_SetConfig+0x118>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d023      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <TIM_Base_SetConfig+0x11c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <TIM_Base_SetConfig+0x120>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <TIM_Base_SetConfig+0x128>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <TIM_Base_SetConfig+0x12c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <TIM_Base_SetConfig+0x130>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_Base_SetConfig+0x134>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <TIM_Base_SetConfig+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <TIM_Base_SetConfig+0x13c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <TIM_Base_SetConfig+0x114>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <TIM_Base_SetConfig+0xf8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <TIM_Base_SetConfig+0x124>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800
 8002e08:	40001800 	.word	0x40001800
 8002e0c:	40001c00 	.word	0x40001c00
 8002e10:	40002000 	.word	0x40002000

08002e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 0302 	bic.w	r3, r3, #2
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a20      	ldr	r2, [pc, #128]	; (8002eec <TIM_OC1_SetConfig+0xd8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_OC1_SetConfig+0x64>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <TIM_OC1_SetConfig+0xdc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10c      	bne.n	8002e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0308 	bic.w	r3, r3, #8
 8002e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <TIM_OC1_SetConfig+0xd8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_OC1_SetConfig+0x8e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <TIM_OC1_SetConfig+0xdc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d111      	bne.n	8002ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0210 	bic.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0320 	bic.w	r3, r3, #32
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <TIM_OC2_SetConfig+0xe4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC2_SetConfig+0x68>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <TIM_OC2_SetConfig+0xe8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10d      	bne.n	8002f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <TIM_OC2_SetConfig+0xe4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_OC2_SetConfig+0x94>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <TIM_OC2_SetConfig+0xe8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d113      	bne.n	8002fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <TIM_OC3_SetConfig+0xe0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_OC3_SetConfig+0x66>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <TIM_OC3_SetConfig+0xe4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10d      	bne.n	8003062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800304c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <TIM_OC3_SetConfig+0xe0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC3_SetConfig+0x92>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <TIM_OC3_SetConfig+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	621a      	str	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	031b      	lsls	r3, r3, #12
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <TIM_OC4_SetConfig+0xa4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC4_SetConfig+0x68>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <TIM_OC4_SetConfig+0xa8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d109      	bne.n	8003144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40010400 	.word	0x40010400

08003174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0201 	bic.w	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 030a 	bic.w	r3, r3, #10
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800320e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	f043 0307 	orr.w	r3, r3, #7
 8003254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	431a      	orrs	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2201      	movs	r2, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003308:	2302      	movs	r3, #2
 800330a:	e05a      	b.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d022      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003358:	d01d      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10c      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800339c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40000800 	.word	0x40000800
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	40010400 	.word	0x40010400
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40001800 	.word	0x40001800

080033ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800342a:	f3ef 8305 	mrs	r3, IPSR
 800342e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	607b      	str	r3, [r7, #4]
  return(result);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003442:	f3ef 8311 	mrs	r3, BASEPRI
 8003446:	603b      	str	r3, [r7, #0]
  return(result);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <osKernelInitialize+0x3a>
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <osKernelInitialize+0x64>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d103      	bne.n	800345e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003456:	f06f 0305 	mvn.w	r3, #5
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00c      	b.n	8003478 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <osKernelInitialize+0x64>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <osKernelInitialize+0x64>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	2000009c 	.word	0x2000009c

0800348c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60bb      	str	r3, [r7, #8]
  return(result);
 8003498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	607b      	str	r3, [r7, #4]
  return(result);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034aa:	f3ef 8311 	mrs	r3, BASEPRI
 80034ae:	603b      	str	r3, [r7, #0]
  return(result);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <osKernelStart+0x3a>
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <osKernelStart+0x68>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80034be:	f06f 0305 	mvn.w	r3, #5
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e010      	b.n	80034e8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <osKernelStart+0x68>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d109      	bne.n	80034e2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034ce:	f7ff ffa1 	bl	8003414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <osKernelStart+0x68>)
 80034d4:	2202      	movs	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034d8:	f001 fa26 	bl	8004928 <vTaskStartScheduler>
      stat = osOK;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	e002      	b.n	80034e8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e8:	68fb      	ldr	r3, [r7, #12]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000009c 	.word	0x2000009c

080034f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003508:	f3ef 8305 	mrs	r3, IPSR
 800350c:	61fb      	str	r3, [r7, #28]
  return(result);
 800350e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 808f 	bne.w	8003634 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	61bb      	str	r3, [r7, #24]
  return(result);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003522:	f3ef 8311 	mrs	r3, BASEPRI
 8003526:	617b      	str	r3, [r7, #20]
  return(result);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <osThreadNew+0x3e>
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <osThreadNew+0x148>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d07e      	beq.n	8003634 <osThreadNew+0x13c>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d07b      	beq.n	8003634 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003540:	2318      	movs	r3, #24
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d045      	beq.n	80035e0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <osThreadNew+0x6a>
        name = attr->name;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <osThreadNew+0x90>
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	2b38      	cmp	r3, #56	; 0x38
 800357a:	d805      	bhi.n	8003588 <osThreadNew+0x90>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <osThreadNew+0x94>
        return (NULL);
 8003588:	2300      	movs	r3, #0
 800358a:	e054      	b.n	8003636 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <osThreadNew+0xca>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b5b      	cmp	r3, #91	; 0x5b
 80035aa:	d90a      	bls.n	80035c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <osThreadNew+0xca>
        mem = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	e010      	b.n	80035e4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <osThreadNew+0xec>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <osThreadNew+0xec>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <osThreadNew+0xec>
          mem = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	e001      	b.n	80035e4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d110      	bne.n	800360c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 ffbf 	bl	8004584 <xTaskCreateStatic>
 8003606:	4603      	mov	r3, r0
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e013      	b.n	8003634 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d110      	bne.n	8003634 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	b29a      	uxth	r2, r3
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f001 f807 	bl	8004638 <xTaskCreate>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <osThreadNew+0x13c>
          hTask = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003634:	693b      	ldr	r3, [r7, #16]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3730      	adds	r7, #48	; 0x30
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	2000009c 	.word	0x2000009c

08003644 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800364c:	f3ef 8305 	mrs	r3, IPSR
 8003650:	613b      	str	r3, [r7, #16]
  return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003658:	f3ef 8310 	mrs	r3, PRIMASK
 800365c:	60fb      	str	r3, [r7, #12]
  return(result);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003664:	f3ef 8311 	mrs	r3, BASEPRI
 8003668:	60bb      	str	r3, [r7, #8]
  return(result);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <osDelay+0x3c>
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <osDelay+0x58>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d103      	bne.n	8003680 <osDelay+0x3c>
    stat = osErrorISR;
 8003678:	f06f 0305 	mvn.w	r3, #5
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e007      	b.n	8003690 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <osDelay+0x4c>
      vTaskDelay(ticks);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f001 f918 	bl	80048c0 <vTaskDelay>
    }
  }

  return (stat);
 8003690:	697b      	ldr	r3, [r7, #20]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000009c 	.word	0x2000009c

080036a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b0:	f3ef 8305 	mrs	r3, IPSR
 80036b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d170      	bne.n	800379e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036bc:	f3ef 8310 	mrs	r3, PRIMASK
 80036c0:	617b      	str	r3, [r7, #20]
  return(result);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036c8:	f3ef 8311 	mrs	r3, BASEPRI
 80036cc:	613b      	str	r3, [r7, #16]
  return(result);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <osMessageQueueNew+0x3c>
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <osMessageQueueNew+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d060      	beq.n	800379e <osMessageQueueNew+0xfe>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d05d      	beq.n	800379e <osMessageQueueNew+0xfe>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05a      	beq.n	800379e <osMessageQueueNew+0xfe>
    mem = -1;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d029      	beq.n	8003748 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <osMessageQueueNew+0x82>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b4f      	cmp	r3, #79	; 0x4f
 8003702:	d90e      	bls.n	8003722 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <osMessageQueueNew+0x82>
        mem = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	e014      	b.n	800374c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d110      	bne.n	800374c <osMessageQueueNew+0xac>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <osMessageQueueNew+0xac>
          mem = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	e001      	b.n	800374c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10c      	bne.n	800376c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6899      	ldr	r1, [r3, #8]
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	460b      	mov	r3, r1
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9e4 	bl	8003b30 <xQueueGenericCreateStatic>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24
 800376a:	e008      	b.n	800377e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003772:	2200      	movs	r2, #0
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa4d 	bl	8003c16 <xQueueGenericCreate>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <osMessageQueueNew+0xf2>
        name = attr->name;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e001      	b.n	8003796 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003796:	69f9      	ldr	r1, [r7, #28]
 8003798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379a:	f000 fe97 	bl	80044cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000009c 	.word	0x2000009c

080037ac <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037c2:	f3ef 8305 	mrs	r3, IPSR
 80037c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80037c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ce:	f3ef 8310 	mrs	r3, PRIMASK
 80037d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037da:	f3ef 8311 	mrs	r3, BASEPRI
 80037de:	617b      	str	r3, [r7, #20]
  return(result);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02c      	beq.n	8003840 <osMessageQueueGet+0x94>
 80037e6:	4b28      	ldr	r3, [pc, #160]	; (8003888 <osMessageQueueGet+0xdc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d128      	bne.n	8003840 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <osMessageQueueGet+0x54>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <osMessageQueueGet+0x54>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003800:	f06f 0303 	mvn.w	r3, #3
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003806:	e038      	b.n	800387a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	461a      	mov	r2, r3
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	6a38      	ldr	r0, [r7, #32]
 8003816:	f000 fccb 	bl	80041b0 <xQueueReceiveFromISR>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d003      	beq.n	8003828 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003820:	f06f 0302 	mvn.w	r3, #2
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003826:	e028      	b.n	800387a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d025      	beq.n	800387a <osMessageQueueGet+0xce>
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <osMessageQueueGet+0xe0>)
 8003830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800383e:	e01c      	b.n	800387a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <osMessageQueueGet+0xa0>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800384c:	f06f 0303 	mvn.w	r3, #3
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	e013      	b.n	800387c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6a38      	ldr	r0, [r7, #32]
 800385a:	f000 fbcd 	bl	8003ff8 <xQueueReceive>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d00b      	beq.n	800387c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800386a:	f06f 0301 	mvn.w	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
 8003870:	e004      	b.n	800387c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003872:	f06f 0302 	mvn.w	r3, #2
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e000      	b.n	800387c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800387a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800387e:	4618      	mov	r0, r3
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	2000009c 	.word	0x2000009c
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a07      	ldr	r2, [pc, #28]	; (80038bc <vApplicationGetIdleTaskMemory+0x2c>)
 80038a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <vApplicationGetIdleTaskMemory+0x30>)
 80038a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	200000a0 	.word	0x200000a0
 80038c0:	200000fc 	.word	0x200000fc

080038c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80038d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a06      	ldr	r2, [pc, #24]	; (80038f4 <vApplicationGetTimerTaskMemory+0x30>)
 80038da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	200002fc 	.word	0x200002fc
 80038f4:	20000358 	.word	0x20000358

080038f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 0208 	add.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f103 0208 	add.w	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f103 0208 	add.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d103      	bne.n	80039ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e00c      	b.n	80039d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3308      	adds	r3, #8
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e002      	b.n	80039c8 <vListInsert+0x2e>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d2f6      	bcs.n	80039c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6852      	ldr	r2, [r2, #4]
 8003a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d103      	bne.n	8003a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	e7fe      	b.n	8003a86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a88:	f002 f8d0 	bl	8005c2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	68f9      	ldr	r1, [r7, #12]
 8003a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d114      	bne.n	8003b08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01a      	beq.n	8003b1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3310      	adds	r3, #16
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 f99c 	bl	8004e28 <xTaskRemoveFromEventList>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d012      	beq.n	8003b1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <xQueueGenericReset+0xcc>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	e009      	b.n	8003b1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3310      	adds	r3, #16
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fef3 	bl	80038f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3324      	adds	r3, #36	; 0x24
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff feee 	bl	80038f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b1c:	f002 f8b4 	bl	8005c88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	; 0x38
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <xQueueGenericCreateStatic+0x28>
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b56:	e7fe      	b.n	8003b56 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <xQueueGenericCreateStatic+0x42>
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	e7fe      	b.n	8003b70 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <xQueueGenericCreateStatic+0x4e>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <xQueueGenericCreateStatic+0x52>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <xQueueGenericCreateStatic+0x54>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <xQueueGenericCreateStatic+0x6c>
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <xQueueGenericCreateStatic+0x78>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <xQueueGenericCreateStatic+0x7c>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <xQueueGenericCreateStatic+0x7e>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <xQueueGenericCreateStatic+0x96>
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bc6:	2350      	movs	r3, #80	; 0x50
 8003bc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b50      	cmp	r3, #80	; 0x50
 8003bce:	d009      	beq.n	8003be4 <xQueueGenericCreateStatic+0xb4>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e7fe      	b.n	8003be2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003be4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bf8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f844 	bl	8003c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3730      	adds	r7, #48	; 0x30
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08a      	sub	sp, #40	; 0x28
 8003c1a:	af02      	add	r7, sp, #8
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	4613      	mov	r3, r2
 8003c22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <xQueueGenericCreate+0x28>
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e004      	b.n	8003c54 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3350      	adds	r3, #80	; 0x50
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f002 f901 	bl	8005e60 <pvPortMalloc>
 8003c5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3350      	adds	r3, #80	; 0x50
 8003c6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c78:	79fa      	ldrb	r2, [r7, #7]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f805 	bl	8003c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e002      	b.n	8003cb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	69b8      	ldr	r0, [r7, #24]
 8003cc6:	f7ff fecb 	bl	8003a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <xQueueGenericSend+0x30>
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0a:	e7fe      	b.n	8003d0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <xQueueGenericSend+0x3e>
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xQueueGenericSend+0x42>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xQueueGenericSend+0x44>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <xQueueGenericSend+0x5c>
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e7fe      	b.n	8003d36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d103      	bne.n	8003d46 <xQueueGenericSend+0x6a>
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <xQueueGenericSend+0x6e>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueGenericSend+0x70>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <xQueueGenericSend+0x88>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	e7fe      	b.n	8003d62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d64:	f001 fa16 	bl	8005194 <xTaskGetSchedulerState>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <xQueueGenericSend+0x98>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <xQueueGenericSend+0x9c>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <xQueueGenericSend+0x9e>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <xQueueGenericSend+0xb6>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e7fe      	b.n	8003d90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d92:	f001 ff4b 	bl	8005c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <xQueueGenericSend+0xcc>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d129      	bne.n	8003dfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dae:	f000 fa7c 	bl	80042aa <prvCopyDataToQueue>
 8003db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f831 	bl	8004e28 <xTaskRemoveFromEventList>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <xQueueGenericSend+0x1f0>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	e00a      	b.n	8003df4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003de4:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <xQueueGenericSend+0x1f0>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003df4:	f001 ff48 	bl	8005c88 <vPortExitCritical>
				return pdPASS;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e063      	b.n	8003ec4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e02:	f001 ff41 	bl	8005c88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e05c      	b.n	8003ec4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 f869 	bl	8004eec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e1e:	f001 ff33 	bl	8005c88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e22:	f000 fde5 	bl	80049f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e26:	f001 ff01 	bl	8005c2c <vPortEnterCritical>
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d103      	bne.n	8003e40 <xQueueGenericSend+0x164>
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d103      	bne.n	8003e56 <xQueueGenericSend+0x17a>
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e56:	f001 ff17 	bl	8005c88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e5a:	1d3a      	adds	r2, r7, #4
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f858 	bl	8004f18 <xTaskCheckForTimeOut>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d124      	bne.n	8003eb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e70:	f000 fb13 	bl	800449a <prvIsQueueFull>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ff82 	bl	8004d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e8a:	f000 fa9e 	bl	80043ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e8e:	f000 fdbd 	bl	8004a0c <xTaskResumeAll>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f af7c 	bne.w	8003d92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <xQueueGenericSend+0x1f0>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	e772      	b.n	8003d92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eae:	f000 fa8c 	bl	80043ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eb2:	f000 fdab 	bl	8004a0c <xTaskResumeAll>
 8003eb6:	e76c      	b.n	8003d92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eba:	f000 fa86 	bl	80043ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ebe:	f000 fda5 	bl	8004a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3738      	adds	r7, #56	; 0x38
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	; 0x38
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xQueueGenericSendFromISR+0x2c>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e7fe      	b.n	8003efa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <xQueueGenericSendFromISR+0x3a>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <xQueueGenericSendFromISR+0x3e>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <xQueueGenericSendFromISR+0x40>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <xQueueGenericSendFromISR+0x58>
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	e7fe      	b.n	8003f26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d103      	bne.n	8003f36 <xQueueGenericSendFromISR+0x66>
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <xQueueGenericSendFromISR+0x6a>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueGenericSendFromISR+0x6c>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <xQueueGenericSendFromISR+0x84>
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f54:	f001 ff46 	bl	8005de4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f58:	f3ef 8211 	mrs	r2, BASEPRI
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	61ba      	str	r2, [r7, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <xQueueGenericSendFromISR+0xb6>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d12c      	bne.n	8003fe0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f96:	f000 f988 	bl	80042aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d112      	bne.n	8003fca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	3324      	adds	r3, #36	; 0x24
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 ff39 	bl	8004e28 <xTaskRemoveFromEventList>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e007      	b.n	8003fda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fce:	3301      	adds	r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	b25a      	sxtb	r2, r3
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003fde:	e001      	b.n	8003fe4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3738      	adds	r7, #56	; 0x38
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	; 0x30
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <xQueueReceive+0x2e>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	e7fe      	b.n	8004024 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <xQueueReceive+0x3c>
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <xQueueReceive+0x40>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <xQueueReceive+0x42>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <xQueueReceive+0x5a>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e7fe      	b.n	8004050 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004052:	f001 f89f 	bl	8005194 <xTaskGetSchedulerState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xQueueReceive+0x6a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xQueueReceive+0x6e>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueReceive+0x70>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <xQueueReceive+0x88>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e7fe      	b.n	800407e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004080:	f001 fdd4 	bl	8005c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01f      	beq.n	80040d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 f973 	bl	800437e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00f      	beq.n	80040c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	3310      	adds	r3, #16
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 febb 	bl	8004e28 <xTaskRemoveFromEventList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <xQueueReceive+0x1b4>)
 80040ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040c8:	f001 fdde 	bl	8005c88 <vPortExitCritical>
				return pdPASS;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e069      	b.n	80041a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040d6:	f001 fdd7 	bl	8005c88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040da:	2300      	movs	r3, #0
 80040dc:	e062      	b.n	80041a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e4:	f107 0310 	add.w	r3, r7, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 feff 	bl	8004eec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040f2:	f001 fdc9 	bl	8005c88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040f6:	f000 fc7b 	bl	80049f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fa:	f001 fd97 	bl	8005c2c <vPortEnterCritical>
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004104:	b25b      	sxtb	r3, r3
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d103      	bne.n	8004114 <xQueueReceive+0x11c>
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411a:	b25b      	sxtb	r3, r3
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d103      	bne.n	800412a <xQueueReceive+0x132>
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800412a:	f001 fdad 	bl	8005c88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800412e:	1d3a      	adds	r2, r7, #4
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 feee 	bl	8004f18 <xTaskCheckForTimeOut>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d123      	bne.n	800418a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004144:	f000 f993 	bl	800446e <prvIsQueueEmpty>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fe18 	bl	8004d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800415c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415e:	f000 f934 	bl	80043ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004162:	f000 fc53 	bl	8004a0c <xTaskResumeAll>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d189      	bne.n	8004080 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <xQueueReceive+0x1b4>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	e780      	b.n	8004080 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800417e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004180:	f000 f923 	bl	80043ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004184:	f000 fc42 	bl	8004a0c <xTaskResumeAll>
 8004188:	e77a      	b.n	8004080 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800418a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418c:	f000 f91d 	bl	80043ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004190:	f000 fc3c 	bl	8004a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004196:	f000 f96a 	bl	800446e <prvIsQueueEmpty>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f43f af6f 	beq.w	8004080 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3730      	adds	r7, #48	; 0x30
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	; 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <xQueueReceiveFromISR+0x2a>
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	e7fe      	b.n	80041d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <xQueueReceiveFromISR+0x38>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <xQueueReceiveFromISR+0x3c>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <xQueueReceiveFromISR+0x3e>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <xQueueReceiveFromISR+0x56>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e7fe      	b.n	8004204 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004206:	f001 fded 	bl	8005de4 <vPortValidateInterruptPriority>
	__asm volatile
 800420a:	f3ef 8211 	mrs	r2, BASEPRI
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	61ba      	str	r2, [r7, #24]
 8004220:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004222:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02f      	beq.n	8004292 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004240:	f000 f89d 	bl	800437e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	1e5a      	subs	r2, r3, #1
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800424c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d112      	bne.n	800427c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	3310      	adds	r3, #16
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fde0 	bl	8004e28 <xTaskRemoveFromEventList>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00e      	beq.n	800428c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e007      	b.n	800428c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800427c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004280:	3301      	adds	r3, #1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	b25a      	sxtb	r2, r3
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800428c:	2301      	movs	r3, #1
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
 8004290:	e001      	b.n	8004296 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	613b      	str	r3, [r7, #16]
	__asm volatile
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3738      	adds	r7, #56	; 0x38
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d14d      	bne.n	800436c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 ff7b 	bl	80051d0 <xTaskPriorityDisinherit>
 80042da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	e043      	b.n	800436c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d119      	bne.n	800431e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6858      	ldr	r0, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	461a      	mov	r2, r3
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	f001 ffb3 	bl	8006260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d32b      	bcc.n	800436c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	e026      	b.n	800436c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68d8      	ldr	r0, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	461a      	mov	r2, r3
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	f001 ff99 	bl	8006260 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	425b      	negs	r3, r3
 8004338:	441a      	add	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d207      	bcs.n	800435a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	425b      	negs	r3, r3
 8004354:	441a      	add	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d105      	bne.n	800436c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3b01      	subs	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d018      	beq.n	80043c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d303      	bcc.n	80043b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68d9      	ldr	r1, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	461a      	mov	r2, r3
 80043bc:	6838      	ldr	r0, [r7, #0]
 80043be:	f001 ff4f 	bl	8006260 <memcpy>
	}
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043d2:	f001 fc2b 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043de:	e011      	b.n	8004404 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fd1b 	bl	8004e28 <xTaskRemoveFromEventList>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043f8:	f000 fdee 	bl	8004fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	3b01      	subs	r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	dce9      	bgt.n	80043e0 <prvUnlockQueue+0x16>
 800440c:	e000      	b.n	8004410 <prvUnlockQueue+0x46>
					break;
 800440e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004418:	f001 fc36 	bl	8005c88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800441c:	f001 fc06 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004426:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004428:	e011      	b.n	800444e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3310      	adds	r3, #16
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fcf6 	bl	8004e28 <xTaskRemoveFromEventList>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004442:	f000 fdc9 	bl	8004fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	3b01      	subs	r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800444e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004452:	2b00      	cmp	r3, #0
 8004454:	dce9      	bgt.n	800442a <prvUnlockQueue+0x60>
 8004456:	e000      	b.n	800445a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004458:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004462:	f001 fc11 	bl	8005c88 <vPortExitCritical>
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004476:	f001 fbd9 	bl	8005c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004482:	2301      	movs	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e001      	b.n	800448c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800448c:	f001 fbfc 	bl	8005c88 <vPortExitCritical>

	return xReturn;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044a2:	f001 fbc3 	bl	8005c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d102      	bne.n	80044b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e001      	b.n	80044bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044bc:	f001 fbe4 	bl	8005c88 <vPortExitCritical>

	return xReturn;
 80044c0:	68fb      	ldr	r3, [r7, #12]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e014      	b.n	8004506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044dc:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <vQueueAddToRegistry+0x4c>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044e8:	490b      	ldr	r1, [pc, #44]	; (8004518 <vQueueAddToRegistry+0x4c>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <vQueueAddToRegistry+0x4c>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044fe:	e005      	b.n	800450c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d9e7      	bls.n	80044dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20004bcc 	.word	0x20004bcc

0800451c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800452c:	f001 fb7e 	bl	8005c2c <vPortEnterCritical>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004536:	b25b      	sxtb	r3, r3
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d103      	bne.n	8004546 <vQueueWaitForMessageRestricted+0x2a>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800454c:	b25b      	sxtb	r3, r3
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d103      	bne.n	800455c <vQueueWaitForMessageRestricted+0x40>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800455c:	f001 fb94 	bl	8005c88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3324      	adds	r3, #36	; 0x24
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fc2f 	bl	8004dd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff27 	bl	80043ca <prvUnlockQueue>
	}
 800457c:	bf00      	nop
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af04      	add	r7, sp, #16
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <xTaskCreateStatic+0x28>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	e7fe      	b.n	80045aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <xTaskCreateStatic+0x42>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e7fe      	b.n	80045c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045c6:	235c      	movs	r3, #92	; 0x5c
 80045c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b5c      	cmp	r3, #92	; 0x5c
 80045ce:	d009      	beq.n	80045e4 <xTaskCreateStatic+0x60>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	e7fe      	b.n	80045e2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01e      	beq.n	800462a <xTaskCreateStatic+0xa6>
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01b      	beq.n	800462a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004604:	2300      	movs	r3, #0
 8004606:	9303      	str	r3, [sp, #12]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f850 	bl	80046c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004624:	f000 f8dc 	bl	80047e0 <prvAddNewTaskToReadyList>
 8004628:	e001      	b.n	800462e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800462e:	697b      	ldr	r3, [r7, #20]
	}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	; 0x30
 800463c:	af04      	add	r7, sp, #16
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fc07 	bl	8005e60 <pvPortMalloc>
 8004652:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800465a:	205c      	movs	r0, #92	; 0x5c
 800465c:	f001 fc00 	bl	8005e60 <pvPortMalloc>
 8004660:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
 800466e:	e005      	b.n	800467c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f001 fcb7 	bl	8005fe4 <vPortFree>
 8004676:	e001      	b.n	800467c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d017      	beq.n	80046b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	2300      	movs	r3, #0
 800468e:	9303      	str	r3, [sp, #12]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	9302      	str	r3, [sp, #8]
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f80e 	bl	80046c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046a6:	69f8      	ldr	r0, [r7, #28]
 80046a8:	f000 f89a 	bl	80047e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046ac:	2301      	movs	r3, #1
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e002      	b.n	80046b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046b8:	69bb      	ldr	r3, [r7, #24]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b088      	sub	sp, #32
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	461a      	mov	r2, r3
 80046da:	21a5      	movs	r1, #165	; 0xa5
 80046dc:	f001 fdcb 	bl	8006276 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046ea:	3b01      	subs	r3, #1
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f023 0307 	bic.w	r3, r3, #7
 80046f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <prvInitialiseNewTask+0x56>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e7fe      	b.n	8004716 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01f      	beq.n	800475e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e012      	b.n	800474a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4413      	add	r3, r2
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	3334      	adds	r3, #52	; 0x34
 8004734:	460a      	mov	r2, r1
 8004736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d006      	beq.n	8004752 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b0f      	cmp	r3, #15
 800474e:	d9e9      	bls.n	8004724 <prvInitialiseNewTask+0x62>
 8004750:	e000      	b.n	8004754 <prvInitialiseNewTask+0x92>
			{
				break;
 8004752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475c:	e003      	b.n	8004766 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	2b37      	cmp	r3, #55	; 0x37
 800476a:	d901      	bls.n	8004770 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800476c:	2337      	movs	r3, #55	; 0x37
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800477a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	2200      	movs	r2, #0
 8004780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f8d6 	bl	8003938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	3318      	adds	r3, #24
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f8d1 	bl	8003938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	69b8      	ldr	r0, [r7, #24]
 80047c0:	f001 f90c 	bl	80059dc <pxPortInitialiseStack>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047d6:	bf00      	nop
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047e8:	f001 fa20 	bl	8005c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047f6:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800480c:	f000 fc08 	bl	8005020 <prvInitialiseTaskLists>
 8004810:	e00d      	b.n	800482e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d802      	bhi.n	800482e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d903      	bls.n	8004854 <prvAddNewTaskToReadyList+0x74>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <prvAddNewTaskToReadyList+0xd8>)
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7ff f871 	bl	8003952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004870:	f001 fa0a 	bl	8005c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d207      	bcs.n	800489a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <prvAddNewTaskToReadyList+0xdc>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000c2c 	.word	0x20000c2c
 80048a8:	20000758 	.word	0x20000758
 80048ac:	20000c38 	.word	0x20000c38
 80048b0:	20000c48 	.word	0x20000c48
 80048b4:	20000c34 	.word	0x20000c34
 80048b8:	2000075c 	.word	0x2000075c
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <vTaskDelay+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <vTaskDelay+0x2e>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	e7fe      	b.n	80048ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80048ee:	f000 f87f 	bl	80049f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048f2:	2100      	movs	r1, #0
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fcd7 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048fa:	f000 f887 	bl	8004a0c <xTaskResumeAll>
 80048fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <vTaskDelay+0x64>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000c54 	.word	0x20000c54
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004936:	463a      	mov	r2, r7
 8004938:	1d39      	adds	r1, r7, #4
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe ffa6 	bl	8003890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	9202      	str	r2, [sp, #8]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	460a      	mov	r2, r1
 8004956:	4920      	ldr	r1, [pc, #128]	; (80049d8 <vTaskStartScheduler+0xb0>)
 8004958:	4820      	ldr	r0, [pc, #128]	; (80049dc <vTaskStartScheduler+0xb4>)
 800495a:	f7ff fe13 	bl	8004584 <xTaskCreateStatic>
 800495e:	4602      	mov	r2, r0
 8004960:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <vTaskStartScheduler+0xb8>)
 8004962:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <vTaskStartScheduler+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e001      	b.n	8004976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800497c:	f000 fce8 	bl	8005350 <xTimerCreateTimerTask>
 8004980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d115      	bne.n	80049b4 <vTaskStartScheduler+0x8c>
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <vTaskStartScheduler+0xbc>)
 800499c:	f04f 32ff 	mov.w	r2, #4294967295
 80049a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <vTaskStartScheduler+0xc0>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <vTaskStartScheduler+0xc4>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ae:	f001 f89f 	bl	8005af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049b2:	e00d      	b.n	80049d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d109      	bne.n	80049d0 <vTaskStartScheduler+0xa8>
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e7fe      	b.n	80049ce <vTaskStartScheduler+0xa6>
}
 80049d0:	bf00      	nop
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	080071a4 	.word	0x080071a4
 80049dc:	08004ff1 	.word	0x08004ff1
 80049e0:	20000c50 	.word	0x20000c50
 80049e4:	20000c4c 	.word	0x20000c4c
 80049e8:	20000c38 	.word	0x20000c38
 80049ec:	20000c30 	.word	0x20000c30

080049f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <vTaskSuspendAll+0x18>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a03      	ldr	r2, [pc, #12]	; (8004a08 <vTaskSuspendAll+0x18>)
 80049fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000c54 	.word	0x20000c54

08004a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a1a:	4b41      	ldr	r3, [pc, #260]	; (8004b20 <xTaskResumeAll+0x114>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <xTaskResumeAll+0x2a>
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	e7fe      	b.n	8004a34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a36:	f001 f8f9 	bl	8005c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a3a:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <xTaskResumeAll+0x114>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <xTaskResumeAll+0x114>)
 8004a42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a44:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <xTaskResumeAll+0x114>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d162      	bne.n	8004b12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a4c:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <xTaskResumeAll+0x118>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05e      	beq.n	8004b12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a54:	e02f      	b.n	8004ab6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <xTaskResumeAll+0x11c>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3318      	adds	r3, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe ffd2 	bl	8003a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe ffcd 	bl	8003a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <xTaskResumeAll+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d903      	bls.n	8004a86 <xTaskResumeAll+0x7a>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <xTaskResumeAll+0x120>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <xTaskResumeAll+0x124>)
 8004a94:	441a      	add	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fe ff58 	bl	8003952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <xTaskResumeAll+0x128>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <xTaskResumeAll+0x12c>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <xTaskResumeAll+0x11c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1cb      	bne.n	8004a56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac4:	f000 fb46 	bl	8005154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	; (8004b3c <xTaskResumeAll+0x130>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad4:	f000 f846 	bl	8004b64 <xTaskIncrementTick>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ade:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <xTaskResumeAll+0x12c>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f1      	bne.n	8004ad4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <xTaskResumeAll+0x130>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <xTaskResumeAll+0x12c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <xTaskResumeAll+0x134>)
 8004b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f001 f8b9 	bl	8005c88 <vPortExitCritical>

	return xAlreadyYielded;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000c54 	.word	0x20000c54
 8004b24:	20000c2c 	.word	0x20000c2c
 8004b28:	20000bec 	.word	0x20000bec
 8004b2c:	20000c34 	.word	0x20000c34
 8004b30:	2000075c 	.word	0x2000075c
 8004b34:	20000758 	.word	0x20000758
 8004b38:	20000c40 	.word	0x20000c40
 8004b3c:	20000c3c 	.word	0x20000c3c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <xTaskGetTickCount+0x1c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000c30 	.word	0x20000c30

08004b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ca8 <xTaskIncrementTick+0x144>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 8088 	bne.w	8004c88 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b78:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <xTaskIncrementTick+0x148>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <xTaskIncrementTick+0x148>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11f      	bne.n	8004bcc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b8c:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <xTaskIncrementTick+0x46>
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	e7fe      	b.n	8004ba8 <xTaskIncrementTick+0x44>
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3e      	ldr	r2, [pc, #248]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4a3e      	ldr	r2, [pc, #248]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <xTaskIncrementTick+0x154>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a3c      	ldr	r2, [pc, #240]	; (8004cb8 <xTaskIncrementTick+0x154>)
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	f000 fac4 	bl	8005154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bcc:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <xTaskIncrementTick+0x158>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d349      	bcc.n	8004c6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <xTaskIncrementTick+0x158>)
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	601a      	str	r2, [r3, #0]
					break;
 8004be8:	e03f      	b.n	8004c6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d203      	bcs.n	8004c0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c02:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <xTaskIncrementTick+0x158>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c08:	e02f      	b.n	8004c6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fefc 	bl	8003a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3318      	adds	r3, #24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fef3 	bl	8003a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <xTaskIncrementTick+0x15c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d903      	bls.n	8004c3a <xTaskIncrementTick+0xd6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <xTaskIncrementTick+0x15c>)
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <xTaskIncrementTick+0x160>)
 8004c48:	441a      	add	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fe fe7e 	bl	8003952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <xTaskIncrementTick+0x164>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3b8      	bcc.n	8004bd6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c68:	e7b5      	b.n	8004bd6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <xTaskIncrementTick+0x164>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4914      	ldr	r1, [pc, #80]	; (8004cc4 <xTaskIncrementTick+0x160>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d907      	bls.n	8004c92 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e004      	b.n	8004c92 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <xTaskIncrementTick+0x168>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <xTaskIncrementTick+0x168>)
 8004c90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <xTaskIncrementTick+0x16c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000c54 	.word	0x20000c54
 8004cac:	20000c30 	.word	0x20000c30
 8004cb0:	20000be4 	.word	0x20000be4
 8004cb4:	20000be8 	.word	0x20000be8
 8004cb8:	20000c44 	.word	0x20000c44
 8004cbc:	20000c4c 	.word	0x20000c4c
 8004cc0:	20000c34 	.word	0x20000c34
 8004cc4:	2000075c 	.word	0x2000075c
 8004cc8:	20000758 	.word	0x20000758
 8004ccc:	20000c3c 	.word	0x20000c3c
 8004cd0:	20000c40 	.word	0x20000c40

08004cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <vTaskSwitchContext+0xa4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <vTaskSwitchContext+0xa8>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ce8:	e040      	b.n	8004d6c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <vTaskSwitchContext+0xa8>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf0:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <vTaskSwitchContext+0xac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e00f      	b.n	8004d18 <vTaskSwitchContext+0x44>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <vTaskSwitchContext+0x3e>
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	e7fe      	b.n	8004d10 <vTaskSwitchContext+0x3c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	491a      	ldr	r1, [pc, #104]	; (8004d84 <vTaskSwitchContext+0xb0>)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0e5      	beq.n	8004cf8 <vTaskSwitchContext+0x24>
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <vTaskSwitchContext+0xb0>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d104      	bne.n	8004d5c <vTaskSwitchContext+0x88>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <vTaskSwitchContext+0xb4>)
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <vTaskSwitchContext+0xac>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000c54 	.word	0x20000c54
 8004d7c:	20000c40 	.word	0x20000c40
 8004d80:	20000c34 	.word	0x20000c34
 8004d84:	2000075c 	.word	0x2000075c
 8004d88:	20000758 	.word	0x20000758

08004d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <vTaskPlaceOnEventList+0x24>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e7fe      	b.n	8004dae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <vTaskPlaceOnEventList+0x44>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3318      	adds	r3, #24
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fe fdee 	bl	800399a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	6838      	ldr	r0, [r7, #0]
 8004dc2:	f000 fa71 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000758 	.word	0x20000758

08004dd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <vTaskPlaceOnEventListRestricted+0x26>
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e7fe      	b.n	8004df8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <vTaskPlaceOnEventListRestricted+0x50>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3318      	adds	r3, #24
 8004e00:	4619      	mov	r1, r3
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7fe fda5 	bl	8003952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f000 fa46 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
	}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000758 	.word	0x20000758

08004e28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <xTaskRemoveFromEventList+0x2a>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e7fe      	b.n	8004e50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3318      	adds	r3, #24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fdd8 	bl	8003a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <xTaskRemoveFromEventList+0xac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11d      	bne.n	8004ea0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fdcf 	bl	8003a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <xTaskRemoveFromEventList+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d903      	bls.n	8004e82 <xTaskRemoveFromEventList+0x5a>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <xTaskRemoveFromEventList+0xb0>)
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <xTaskRemoveFromEventList+0xb4>)
 8004e90:	441a      	add	r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fe fd5a 	bl	8003952 <vListInsertEnd>
 8004e9e:	e005      	b.n	8004eac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	480e      	ldr	r0, [pc, #56]	; (8004ee0 <xTaskRemoveFromEventList+0xb8>)
 8004ea8:	f7fe fd53 	bl	8003952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <xTaskRemoveFromEventList+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d905      	bls.n	8004ec6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <xTaskRemoveFromEventList+0xc0>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e001      	b.n	8004eca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000c54 	.word	0x20000c54
 8004ed8:	20000c34 	.word	0x20000c34
 8004edc:	2000075c 	.word	0x2000075c
 8004ee0:	20000bec 	.word	0x20000bec
 8004ee4:	20000758 	.word	0x20000758
 8004ee8:	20000c40 	.word	0x20000c40

08004eec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <vTaskInternalSetTimeOutState+0x24>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <vTaskInternalSetTimeOutState+0x28>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	605a      	str	r2, [r3, #4]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	20000c44 	.word	0x20000c44
 8004f14:	20000c30 	.word	0x20000c30

08004f18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <xTaskCheckForTimeOut+0x24>
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e7fe      	b.n	8004f3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <xTaskCheckForTimeOut+0x3e>
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e7fe      	b.n	8004f54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f56:	f000 fe69 	bl	8005c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <xTaskCheckForTimeOut+0xb8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d102      	bne.n	8004f7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e023      	b.n	8004fc2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <xTaskCheckForTimeOut+0xbc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d007      	beq.n	8004f96 <xTaskCheckForTimeOut+0x7e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e015      	b.n	8004fc2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d20b      	bcs.n	8004fb8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ff9d 	bl	8004eec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e004      	b.n	8004fc2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fc2:	f000 fe61 	bl	8005c88 <vPortExitCritical>

	return xReturn;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000c30 	.word	0x20000c30
 8004fd4:	20000c44 	.word	0x20000c44

08004fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <vTaskMissedYield+0x14>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000c40 	.word	0x20000c40

08004ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ff8:	f000 f852 	bl	80050a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <prvIdleTask+0x28>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d9f9      	bls.n	8004ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <prvIdleTask+0x2c>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005014:	e7f0      	b.n	8004ff8 <prvIdleTask+0x8>
 8005016:	bf00      	nop
 8005018:	2000075c 	.word	0x2000075c
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	e00c      	b.n	8005046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <prvInitialiseTaskLists+0x60>)
 8005038:	4413      	add	r3, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fc5c 	bl	80038f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3301      	adds	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b37      	cmp	r3, #55	; 0x37
 800504a:	d9ef      	bls.n	800502c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800504c:	480d      	ldr	r0, [pc, #52]	; (8005084 <prvInitialiseTaskLists+0x64>)
 800504e:	f7fe fc53 	bl	80038f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005052:	480d      	ldr	r0, [pc, #52]	; (8005088 <prvInitialiseTaskLists+0x68>)
 8005054:	f7fe fc50 	bl	80038f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005058:	480c      	ldr	r0, [pc, #48]	; (800508c <prvInitialiseTaskLists+0x6c>)
 800505a:	f7fe fc4d 	bl	80038f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800505e:	480c      	ldr	r0, [pc, #48]	; (8005090 <prvInitialiseTaskLists+0x70>)
 8005060:	f7fe fc4a 	bl	80038f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005064:	480b      	ldr	r0, [pc, #44]	; (8005094 <prvInitialiseTaskLists+0x74>)
 8005066:	f7fe fc47 	bl	80038f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <prvInitialiseTaskLists+0x78>)
 800506c:	4a05      	ldr	r2, [pc, #20]	; (8005084 <prvInitialiseTaskLists+0x64>)
 800506e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <prvInitialiseTaskLists+0x7c>)
 8005072:	4a05      	ldr	r2, [pc, #20]	; (8005088 <prvInitialiseTaskLists+0x68>)
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	2000075c 	.word	0x2000075c
 8005084:	20000bbc 	.word	0x20000bbc
 8005088:	20000bd0 	.word	0x20000bd0
 800508c:	20000bec 	.word	0x20000bec
 8005090:	20000c00 	.word	0x20000c00
 8005094:	20000c18 	.word	0x20000c18
 8005098:	20000be4 	.word	0x20000be4
 800509c:	20000be8 	.word	0x20000be8

080050a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050a6:	e019      	b.n	80050dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050a8:	f000 fdc0 	bl	8005c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <prvCheckTasksWaitingTermination+0x4c>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fca7 	bl	8003a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <prvCheckTasksWaitingTermination+0x50>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <prvCheckTasksWaitingTermination+0x50>)
 80050c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <prvCheckTasksWaitingTermination+0x54>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <prvCheckTasksWaitingTermination+0x54>)
 80050d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050d2:	f000 fdd9 	bl	8005c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f80e 	bl	80050f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <prvCheckTasksWaitingTermination+0x54>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e1      	bne.n	80050a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000c00 	.word	0x20000c00
 80050f0:	20000c2c 	.word	0x20000c2c
 80050f4:	20000c14 	.word	0x20000c14

080050f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff68 	bl	8005fe4 <vPortFree>
				vPortFree( pxTCB );
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 ff65 	bl	8005fe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800511a:	e017      	b.n	800514c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005122:	2b01      	cmp	r3, #1
 8005124:	d103      	bne.n	800512e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 ff5c 	bl	8005fe4 <vPortFree>
	}
 800512c:	e00e      	b.n	800514c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005134:	2b02      	cmp	r3, #2
 8005136:	d009      	beq.n	800514c <prvDeleteTCB+0x54>
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e7fe      	b.n	800514a <prvDeleteTCB+0x52>
	}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <prvResetNextTaskUnblockTime+0x38>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <prvResetNextTaskUnblockTime+0x3c>)
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800516c:	e008      	b.n	8005180 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <prvResetNextTaskUnblockTime+0x38>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <prvResetNextTaskUnblockTime+0x3c>)
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000be4 	.word	0x20000be4
 8005190:	20000c4c 	.word	0x20000c4c

08005194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <xTaskGetSchedulerState+0x34>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051a2:	2301      	movs	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	e008      	b.n	80051ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <xTaskGetSchedulerState+0x38>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051b0:	2302      	movs	r3, #2
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	e001      	b.n	80051ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051b6:	2300      	movs	r3, #0
 80051b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051ba:	687b      	ldr	r3, [r7, #4]
	}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	20000c38 	.word	0x20000c38
 80051cc:	20000c54 	.word	0x20000c54

080051d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d054      	beq.n	8005290 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <xTaskPriorityDisinherit+0xcc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d009      	beq.n	8005204 <xTaskPriorityDisinherit+0x34>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e7fe      	b.n	8005202 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <xTaskPriorityDisinherit+0x50>
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	e7fe      	b.n	800521e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	1e5a      	subs	r2, r3, #1
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	429a      	cmp	r2, r3
 8005234:	d02c      	beq.n	8005290 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d128      	bne.n	8005290 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3304      	adds	r3, #4
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fbe2 	bl	8003a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTaskPriorityDisinherit+0xd0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d903      	bls.n	8005270 <xTaskPriorityDisinherit+0xa0>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <xTaskPriorityDisinherit+0xd0>)
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <xTaskPriorityDisinherit+0xd4>)
 800527e:	441a      	add	r2, r3
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7fe fb63 	bl	8003952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005290:	697b      	ldr	r3, [r7, #20]
	}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000758 	.word	0x20000758
 80052a0:	20000c34 	.word	0x20000c34
 80052a4:	2000075c 	.word	0x2000075c

080052a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <prvAddCurrentTaskToDelayedList+0x90>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fba4 	bl	8003a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d10a      	bne.n	80052e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4819      	ldr	r0, [pc, #100]	; (8005340 <prvAddCurrentTaskToDelayedList+0x98>)
 80052dc:	f7fe fb39 	bl	8003952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052e0:	e026      	b.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ea:	4b14      	ldr	r3, [pc, #80]	; (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d209      	bcs.n	800530e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7fe fb47 	bl	800399a <vListInsert>
}
 800530c:	e010      	b.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7fe fb3d 	bl	800399a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d202      	bcs.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800532a:	4a08      	ldr	r2, [pc, #32]	; (800534c <prvAddCurrentTaskToDelayedList+0xa4>)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000c30 	.word	0x20000c30
 800533c:	20000758 	.word	0x20000758
 8005340:	20000c18 	.word	0x20000c18
 8005344:	20000be8 	.word	0x20000be8
 8005348:	20000be4 	.word	0x20000be4
 800534c:	20000c4c 	.word	0x20000c4c

08005350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800535a:	f000 faff 	bl	800595c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <xTimerCreateTimerTask+0x80>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d021      	beq.n	80053aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800536e:	1d3a      	adds	r2, r7, #4
 8005370:	f107 0108 	add.w	r1, r7, #8
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe faa3 	bl	80038c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	9202      	str	r2, [sp, #8]
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2302      	movs	r3, #2
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2300      	movs	r3, #0
 800538e:	460a      	mov	r2, r1
 8005390:	4910      	ldr	r1, [pc, #64]	; (80053d4 <xTimerCreateTimerTask+0x84>)
 8005392:	4811      	ldr	r0, [pc, #68]	; (80053d8 <xTimerCreateTimerTask+0x88>)
 8005394:	f7ff f8f6 	bl	8004584 <xTaskCreateStatic>
 8005398:	4602      	mov	r2, r0
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <xTimerCreateTimerTask+0x8c>)
 800539c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xTimerCreateTimerTask+0x8c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <xTimerCreateTimerTask+0x74>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e7fe      	b.n	80053c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80053c4:	697b      	ldr	r3, [r7, #20]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000c88 	.word	0x20000c88
 80053d4:	080071ac 	.word	0x080071ac
 80053d8:	08005511 	.word	0x08005511
 80053dc:	20000c8c 	.word	0x20000c8c

080053e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <xTimerGenericCommand+0x2c>
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	e7fe      	b.n	800540a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <xTimerGenericCommand+0x94>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02a      	beq.n	800546a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b05      	cmp	r3, #5
 8005424:	dc18      	bgt.n	8005458 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005426:	f7ff feb5 	bl	8005194 <xTaskGetSchedulerState>
 800542a:	4603      	mov	r3, r0
 800542c:	2b02      	cmp	r3, #2
 800542e:	d109      	bne.n	8005444 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005430:	4b10      	ldr	r3, [pc, #64]	; (8005474 <xTimerGenericCommand+0x94>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f107 0110 	add.w	r1, r7, #16
 8005438:	2300      	movs	r3, #0
 800543a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543c:	f7fe fc4e 	bl	8003cdc <xQueueGenericSend>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24
 8005442:	e012      	b.n	800546a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <xTimerGenericCommand+0x94>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	f107 0110 	add.w	r1, r7, #16
 800544c:	2300      	movs	r3, #0
 800544e:	2200      	movs	r2, #0
 8005450:	f7fe fc44 	bl	8003cdc <xQueueGenericSend>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24
 8005456:	e008      	b.n	800546a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <xTimerGenericCommand+0x94>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	f107 0110 	add.w	r1, r7, #16
 8005460:	2300      	movs	r3, #0
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	f7fe fd34 	bl	8003ed0 <xQueueGenericSendFromISR>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800546c:	4618      	mov	r0, r3
 800546e:	3728      	adds	r7, #40	; 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000c88 	.word	0x20000c88

08005478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <prvProcessExpiredTimer+0x94>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fabb 	bl	8003a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d021      	beq.n	80054e8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	18d1      	adds	r1, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	6978      	ldr	r0, [r7, #20]
 80054b2:	f000 f8d1 	bl	8005658 <prvInsertTimerInActiveList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01e      	beq.n	80054fa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	2300      	movs	r3, #0
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	2100      	movs	r1, #0
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f7ff ff8a 	bl	80053e0 <xTimerGenericCommand>
 80054cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d112      	bne.n	80054fa <prvProcessExpiredTimer+0x82>
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e7fe      	b.n	80054e6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	4798      	blx	r3
}
 8005502:	bf00      	nop
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000c80 	.word	0x20000c80

08005510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f857 	bl	80055d0 <prvGetNextExpireTime>
 8005522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4619      	mov	r1, r3
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f803 	bl	8005534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800552e:	f000 f8d5 	bl	80056dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005532:	e7f1      	b.n	8005518 <prvTimerTask+0x8>

08005534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800553e:	f7ff fa57 	bl	80049f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f866 	bl	8005618 <prvSampleTimeNow>
 800554c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d130      	bne.n	80055b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <prvProcessTimerOrBlockTask+0x3c>
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	429a      	cmp	r2, r3
 8005560:	d806      	bhi.n	8005570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005562:	f7ff fa53 	bl	8004a0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff85 	bl	8005478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800556e:	e024      	b.n	80055ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <prvProcessTimerOrBlockTask+0x90>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <prvProcessTimerOrBlockTask+0x50>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <prvProcessTimerOrBlockTask+0x52>
 8005584:	2300      	movs	r3, #0
 8005586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <prvProcessTimerOrBlockTask+0x94>)
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	4619      	mov	r1, r3
 8005596:	f7fe ffc1 	bl	800451c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800559a:	f7ff fa37 	bl	8004a0c <xTaskResumeAll>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <prvProcessTimerOrBlockTask+0x98>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
}
 80055b4:	e001      	b.n	80055ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055b6:	f7ff fa29 	bl	8004a0c <xTaskResumeAll>
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000c84 	.word	0x20000c84
 80055c8:	20000c88 	.word	0x20000c88
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <prvGetNextExpireTime+0x44>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <prvGetNextExpireTime+0x16>
 80055e2:	2201      	movs	r2, #1
 80055e4:	e000      	b.n	80055e8 <prvGetNextExpireTime+0x18>
 80055e6:	2200      	movs	r2, #0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <prvGetNextExpireTime+0x44>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e001      	b.n	8005604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005604:	68fb      	ldr	r3, [r7, #12]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000c80 	.word	0x20000c80

08005618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005620:	f7ff fa90 	bl	8004b44 <xTaskGetTickCount>
 8005624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <prvSampleTimeNow+0x3c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	429a      	cmp	r2, r3
 800562e:	d205      	bcs.n	800563c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005630:	f000 f930 	bl	8005894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e002      	b.n	8005642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvSampleTimeNow+0x3c>)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000c90 	.word	0x20000c90

08005658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d812      	bhi.n	80056a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800568c:	2301      	movs	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e01b      	b.n	80056ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <prvInsertTimerInActiveList+0x7c>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fe f97c 	bl	800399a <vListInsert>
 80056a2:	e012      	b.n	80056ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d206      	bcs.n	80056ba <prvInsertTimerInActiveList+0x62>
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e007      	b.n	80056ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <prvInsertTimerInActiveList+0x80>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fe f968 	bl	800399a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056ca:	697b      	ldr	r3, [r7, #20]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000c84 	.word	0x20000c84
 80056d8:	20000c80 	.word	0x20000c80

080056dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056e2:	e0c6      	b.n	8005872 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da17      	bge.n	800571a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	3304      	adds	r3, #4
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvProcessReceivedCommands+0x2e>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e7fe      	b.n	8005708 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005710:	6850      	ldr	r0, [r2, #4]
 8005712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	4611      	mov	r1, r2
 8005718:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f2c0 80a7 	blt.w	8005870 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	3304      	adds	r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe f96a 	bl	8003a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005738:	463b      	mov	r3, r7
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff ff6c 	bl	8005618 <prvSampleTimeNow>
 8005740:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b09      	cmp	r3, #9
 8005746:	f200 8094 	bhi.w	8005872 <prvProcessReceivedCommands+0x196>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <prvProcessReceivedCommands+0x74>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005779 	.word	0x08005779
 8005754:	08005779 	.word	0x08005779
 8005758:	08005779 	.word	0x08005779
 800575c:	080057eb 	.word	0x080057eb
 8005760:	080057ff 	.word	0x080057ff
 8005764:	08005847 	.word	0x08005847
 8005768:	08005779 	.word	0x08005779
 800576c:	08005779 	.word	0x08005779
 8005770:	080057eb 	.word	0x080057eb
 8005774:	080057ff 	.word	0x080057ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	18d1      	adds	r1, r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005798:	f7ff ff5e 	bl	8005658 <prvInsertTimerInActiveList>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d067      	beq.n	8005872 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05c      	beq.n	8005872 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	441a      	add	r2, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	2100      	movs	r1, #0
 80057c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ca:	f7ff fe09 	bl	80053e0 <xTimerGenericCommand>
 80057ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d14d      	bne.n	8005872 <prvProcessReceivedCommands+0x196>
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e7fe      	b.n	80057e8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057fc:	e039      	b.n	8005872 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <prvProcessReceivedCommands+0x156>
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e7fe      	b.n	8005830 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	18d1      	adds	r1, r2, r3
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005840:	f7ff ff0a 	bl	8005658 <prvInsertTimerInActiveList>
					break;
 8005844:	e015      	b.n	8005872 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005856:	f000 fbc5 	bl	8005fe4 <vPortFree>
 800585a:	e00a      	b.n	8005872 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800586e:	e000      	b.n	8005872 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005870:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <prvProcessReceivedCommands+0x1b4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1d39      	adds	r1, r7, #4
 8005878:	2200      	movs	r2, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fbbc 	bl	8003ff8 <xQueueReceive>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f47f af2e 	bne.w	80056e4 <prvProcessReceivedCommands+0x8>
	}
}
 8005888:	bf00      	nop
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000c88 	.word	0x20000c88

08005894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800589a:	e047      	b.n	800592c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800589c:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <prvSwitchTimerLists+0xc0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a6:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <prvSwitchTimerLists+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe f8a9 	bl	8003a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02d      	beq.n	800592c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d90e      	bls.n	8005900 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ee:	4b19      	ldr	r3, [pc, #100]	; (8005954 <prvSwitchTimerLists+0xc0>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe f84e 	bl	800399a <vListInsert>
 80058fe:	e015      	b.n	800592c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005900:	2300      	movs	r3, #0
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	2100      	movs	r1, #0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fd68 	bl	80053e0 <xTimerGenericCommand>
 8005910:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <prvSwitchTimerLists+0x98>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	603b      	str	r3, [r7, #0]
 800592a:	e7fe      	b.n	800592a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <prvSwitchTimerLists+0xc0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1b2      	bne.n	800589c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <prvSwitchTimerLists+0xc0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800593c:	4b06      	ldr	r3, [pc, #24]	; (8005958 <prvSwitchTimerLists+0xc4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a04      	ldr	r2, [pc, #16]	; (8005954 <prvSwitchTimerLists+0xc0>)
 8005942:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <prvSwitchTimerLists+0xc4>)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000c80 	.word	0x20000c80
 8005958:	20000c84 	.word	0x20000c84

0800595c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005962:	f000 f963 	bl	8005c2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <prvCheckForValidListAndQueue+0x60>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d120      	bne.n	80059b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800596e:	4814      	ldr	r0, [pc, #80]	; (80059c0 <prvCheckForValidListAndQueue+0x64>)
 8005970:	f7fd ffc2 	bl	80038f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005974:	4813      	ldr	r0, [pc, #76]	; (80059c4 <prvCheckForValidListAndQueue+0x68>)
 8005976:	f7fd ffbf 	bl	80038f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800597a:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <prvCheckForValidListAndQueue+0x6c>)
 800597c:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <prvCheckForValidListAndQueue+0x64>)
 800597e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <prvCheckForValidListAndQueue+0x70>)
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <prvCheckForValidListAndQueue+0x68>)
 8005984:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005986:	2300      	movs	r3, #0
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <prvCheckForValidListAndQueue+0x74>)
 800598c:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <prvCheckForValidListAndQueue+0x78>)
 800598e:	2110      	movs	r1, #16
 8005990:	200a      	movs	r0, #10
 8005992:	f7fe f8cd 	bl	8003b30 <xQueueGenericCreateStatic>
 8005996:	4602      	mov	r2, r0
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <prvCheckForValidListAndQueue+0x60>)
 800599a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <prvCheckForValidListAndQueue+0x60>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <prvCheckForValidListAndQueue+0x60>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	490b      	ldr	r1, [pc, #44]	; (80059d8 <prvCheckForValidListAndQueue+0x7c>)
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe fd8e 	bl	80044cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059b0:	f000 f96a 	bl	8005c88 <vPortExitCritical>
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000c88 	.word	0x20000c88
 80059c0:	20000c58 	.word	0x20000c58
 80059c4:	20000c6c 	.word	0x20000c6c
 80059c8:	20000c80 	.word	0x20000c80
 80059cc:	20000c84 	.word	0x20000c84
 80059d0:	20000d34 	.word	0x20000d34
 80059d4:	20000c94 	.word	0x20000c94
 80059d8:	080071b4 	.word	0x080071b4

080059dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3b04      	subs	r3, #4
 80059ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b04      	subs	r3, #4
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f023 0201 	bic.w	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <pxPortInitialiseStack+0x64>)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b14      	subs	r3, #20
 8005a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f06f 0202 	mvn.w	r2, #2
 8005a2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3b20      	subs	r3, #32
 8005a30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	08005a45 	.word	0x08005a45

08005a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <prvTaskExitError+0x50>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d009      	beq.n	8005a6c <prvTaskExitError+0x28>
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e7fe      	b.n	8005a6a <prvTaskExitError+0x26>
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a7e:	bf00      	nop
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0fc      	beq.n	8005a80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000000c 	.word	0x2000000c
	...

08005aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <pxCurrentTCBConst2>)
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	6808      	ldr	r0, [r1, #0]
 8005aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	f380 8809 	msr	PSP, r0
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8811 	msr	BASEPRI, r0
 8005aba:	4770      	bx	lr
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst2>:
 8005ac0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ac8:	4808      	ldr	r0, [pc, #32]	; (8005aec <prvPortStartFirstTask+0x24>)
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f380 8808 	msr	MSP, r0
 8005ad2:	f04f 0000 	mov.w	r0, #0
 8005ad6:	f380 8814 	msr	CONTROL, r0
 8005ada:	b662      	cpsie	i
 8005adc:	b661      	cpsie	f
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	df00      	svc	0
 8005ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aea:	bf00      	nop
 8005aec:	e000ed08 	.word	0xe000ed08

08005af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <xPortStartScheduler+0x118>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a44      	ldr	r2, [pc, #272]	; (8005c0c <xPortStartScheduler+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d109      	bne.n	8005b14 <xPortStartScheduler+0x24>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e7fe      	b.n	8005b12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <xPortStartScheduler+0x118>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3d      	ldr	r2, [pc, #244]	; (8005c10 <xPortStartScheduler+0x120>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d109      	bne.n	8005b32 <xPortStartScheduler+0x42>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e7fe      	b.n	8005b30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b32:	4b38      	ldr	r3, [pc, #224]	; (8005c14 <xPortStartScheduler+0x124>)
 8005b34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <xPortStartScheduler+0x128>)
 8005b58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b5c:	2207      	movs	r2, #7
 8005b5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b60:	e009      	b.n	8005b76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b62:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	4a2c      	ldr	r2, [pc, #176]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d0ef      	beq.n	8005b62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b82:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1c3 0307 	rsb	r3, r3, #7
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d009      	beq.n	8005ba2 <xPortStartScheduler+0xb2>
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	e7fe      	b.n	8005ba0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb4:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <xPortStartScheduler+0x12c>)
 8005bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <xPortStartScheduler+0x130>)
 8005bd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bd8:	f000 f8d6 	bl	8005d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bdc:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <xPortStartScheduler+0x134>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005be2:	f000 f8f5 	bl	8005dd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xPortStartScheduler+0x138>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <xPortStartScheduler+0x138>)
 8005bec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bf2:	f7ff ff69 	bl	8005ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf6:	f7ff f86d 	bl	8004cd4 <vTaskSwitchContext>
	prvTaskExitError();
 8005bfa:	f7ff ff23 	bl	8005a44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed00 	.word	0xe000ed00
 8005c0c:	410fc271 	.word	0x410fc271
 8005c10:	410fc270 	.word	0x410fc270
 8005c14:	e000e400 	.word	0xe000e400
 8005c18:	20000d84 	.word	0x20000d84
 8005c1c:	20000d88 	.word	0x20000d88
 8005c20:	e000ed20 	.word	0xe000ed20
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	e000ef34 	.word	0xe000ef34

08005c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <vPortEnterCritical+0x54>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10e      	bne.n	8005c74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <vPortEnterCritical+0x58>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <vPortEnterCritical+0x48>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	e7fe      	b.n	8005c72 <vPortEnterCritical+0x46>
	}
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <vPortExitCritical+0x22>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e7fe      	b.n	8005ca8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cb4:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <vPortExitCritical+0x4c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <vPortExitCritical+0x3e>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c
	...

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f01e 0f10 	tst.w	lr, #16
 8005cf0:	bf08      	it	eq
 8005cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d04:	f380 8811 	msr	BASEPRI, r0
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f7fe ffe0 	bl	8004cd4 <vTaskSwitchContext>
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f380 8811 	msr	BASEPRI, r0
 8005d1c:	bc09      	pop	{r0, r3}
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d26:	f01e 0f10 	tst.w	lr, #16
 8005d2a:	bf08      	it	eq
 8005d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d30:	f380 8809 	msr	PSP, r0
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst>:
 8005d40:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d60:	f7fe ff00 	bl	8004b64 <xTaskIncrementTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <SysTick_Handler+0x3c>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	2300      	movs	r3, #0
 8005d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <vPortSetupTimerInterrupt+0x34>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <vPortSetupTimerInterrupt+0x38>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <vPortSetupTimerInterrupt+0x3c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <vPortSetupTimerInterrupt+0x40>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <vPortSetupTimerInterrupt+0x44>)
 8005da6:	3b01      	subs	r3, #1
 8005da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <vPortSetupTimerInterrupt+0x34>)
 8005dac:	2207      	movs	r2, #7
 8005dae:	601a      	str	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	e000e010 	.word	0xe000e010
 8005dc0:	e000e018 	.word	0xe000e018
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	10624dd3 	.word	0x10624dd3
 8005dcc:	e000e014 	.word	0xe000e014

08005dd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005de0 <vPortEnableVFP+0x10>
 8005dd4:	6801      	ldr	r1, [r0, #0]
 8005dd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dda:	6001      	str	r1, [r0, #0]
 8005ddc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dde:	bf00      	nop
 8005de0:	e000ed88 	.word	0xe000ed88

08005de4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dea:	f3ef 8305 	mrs	r3, IPSR
 8005dee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d913      	bls.n	8005e1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <vPortValidateInterruptPriority+0x6c>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e00:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <vPortValidateInterruptPriority+0x70>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	7afa      	ldrb	r2, [r7, #11]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d209      	bcs.n	8005e1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	e7fe      	b.n	8005e1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <vPortValidateInterruptPriority+0x74>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <vPortValidateInterruptPriority+0x78>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d909      	bls.n	8005e42 <vPortValidateInterruptPriority+0x5e>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	e7fe      	b.n	8005e40 <vPortValidateInterruptPriority+0x5c>
	}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e3f0 	.word	0xe000e3f0
 8005e54:	20000d84 	.word	0x20000d84
 8005e58:	e000ed0c 	.word	0xe000ed0c
 8005e5c:	20000d88 	.word	0x20000d88

08005e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e6c:	f7fe fdc0 	bl	80049f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e70:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <pvPortMalloc+0x170>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e78:	f000 f90c 	bl	8006094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e7c:	4b55      	ldr	r3, [pc, #340]	; (8005fd4 <pvPortMalloc+0x174>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 808c 	bne.w	8005fa2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01c      	beq.n	8005eca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e90:	2208      	movs	r2, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f023 0307 	bic.w	r3, r3, #7
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <pvPortMalloc+0x6a>
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e7fe      	b.n	8005ec8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d068      	beq.n	8005fa2 <pvPortMalloc+0x142>
 8005ed0:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <pvPortMalloc+0x178>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d863      	bhi.n	8005fa2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eda:	4b40      	ldr	r3, [pc, #256]	; (8005fdc <pvPortMalloc+0x17c>)
 8005edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ede:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <pvPortMalloc+0x17c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ee4:	e004      	b.n	8005ef0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d903      	bls.n	8005f02 <pvPortMalloc+0xa2>
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f1      	bne.n	8005ee6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f02:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <pvPortMalloc+0x170>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d04a      	beq.n	8005fa2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2208      	movs	r2, #8
 8005f12:	4413      	add	r3, r2
 8005f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	2308      	movs	r3, #8
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d91e      	bls.n	8005f6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <pvPortMalloc+0xf4>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e7fe      	b.n	8005f52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f66:	69b8      	ldr	r0, [r7, #24]
 8005f68:	f000 f8f6 	bl	8006158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <pvPortMalloc+0x180>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d203      	bcs.n	8005f8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <pvPortMalloc+0x178>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <pvPortMalloc+0x180>)
 8005f8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <pvPortMalloc+0x174>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fa2:	f7fe fd33 	bl	8004a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <pvPortMalloc+0x164>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e7fe      	b.n	8005fc2 <pvPortMalloc+0x162>
	return pvReturn;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3728      	adds	r7, #40	; 0x28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20004994 	.word	0x20004994
 8005fd4:	200049a0 	.word	0x200049a0
 8005fd8:	20004998 	.word	0x20004998
 8005fdc:	2000498c 	.word	0x2000498c
 8005fe0:	2000499c 	.word	0x2000499c

08005fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d046      	beq.n	8006084 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	4b20      	ldr	r3, [pc, #128]	; (800608c <vPortFree+0xa8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <vPortFree+0x42>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e7fe      	b.n	8006024 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <vPortFree+0x5e>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	e7fe      	b.n	8006040 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <vPortFree+0xa8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <vPortFree+0xa8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006068:	f7fe fcc2 	bl	80049f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vPortFree+0xac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	4a06      	ldr	r2, [pc, #24]	; (8006090 <vPortFree+0xac>)
 8006078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 f86c 	bl	8006158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006080:	f7fe fcc4 	bl	8004a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	200049a0 	.word	0x200049a0
 8006090:	20004998 	.word	0x20004998

08006094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800609a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800609e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <prvHeapInit+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <prvHeapInit+0xac>)
 80060c4:	4413      	add	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <prvHeapInit+0xb0>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <prvHeapInit+0xb0>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060e0:	2208      	movs	r2, #8
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <prvHeapInit+0xb4>)
 80060f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <prvHeapInit+0xb4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <prvHeapInit+0xb4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvHeapInit+0xb4>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <prvHeapInit+0xb8>)
 8006122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <prvHeapInit+0xbc>)
 800612a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <prvHeapInit+0xc0>)
 800612e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20000d8c 	.word	0x20000d8c
 8006144:	2000498c 	.word	0x2000498c
 8006148:	20004994 	.word	0x20004994
 800614c:	2000499c 	.word	0x2000499c
 8006150:	20004998 	.word	0x20004998
 8006154:	200049a0 	.word	0x200049a0

08006158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <prvInsertBlockIntoFreeList+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e002      	b.n	800616c <prvInsertBlockIntoFreeList+0x14>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d8f7      	bhi.n	8006166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4413      	add	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d108      	bne.n	800619a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	441a      	add	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	441a      	add	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d118      	bne.n	80061e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d00d      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e008      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e003      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d002      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000498c 	.word	0x2000498c
 8006208:	20004994 	.word	0x20004994

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000010 	.word	0x20000010

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4e0d      	ldr	r6, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1ba4      	subs	r4, r4, r6
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2500      	movs	r5, #0
 8006224:	42a5      	cmp	r5, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4e0b      	ldr	r6, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f000 ff74 	bl	8007118 <_init>
 8006230:	1ba4      	subs	r4, r4, r6
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2500      	movs	r5, #0
 8006236:	42a5      	cmp	r5, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006240:	4798      	blx	r3
 8006242:	3501      	adds	r5, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800624a:	4798      	blx	r3
 800624c:	3501      	adds	r5, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	080072f8 	.word	0x080072f8
 8006254:	080072f8 	.word	0x080072f8
 8006258:	080072f8 	.word	0x080072f8
 800625c:	080072fc 	.word	0x080072fc

08006260 <memcpy>:
 8006260:	b510      	push	{r4, lr}
 8006262:	1e43      	subs	r3, r0, #1
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	bd10      	pop	{r4, pc}
 800626c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006274:	e7f7      	b.n	8006266 <memcpy+0x6>

08006276 <memset>:
 8006276:	4402      	add	r2, r0
 8006278:	4603      	mov	r3, r0
 800627a:	4293      	cmp	r3, r2
 800627c:	d100      	bne.n	8006280 <memset+0xa>
 800627e:	4770      	bx	lr
 8006280:	f803 1b01 	strb.w	r1, [r3], #1
 8006284:	e7f9      	b.n	800627a <memset+0x4>
	...

08006288 <iprintf>:
 8006288:	b40f      	push	{r0, r1, r2, r3}
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <iprintf+0x2c>)
 800628c:	b513      	push	{r0, r1, r4, lr}
 800628e:	681c      	ldr	r4, [r3, #0]
 8006290:	b124      	cbz	r4, 800629c <iprintf+0x14>
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	b913      	cbnz	r3, 800629c <iprintf+0x14>
 8006296:	4620      	mov	r0, r4
 8006298:	f000 fa22 	bl	80066e0 <__sinit>
 800629c:	ab05      	add	r3, sp, #20
 800629e:	9a04      	ldr	r2, [sp, #16]
 80062a0:	68a1      	ldr	r1, [r4, #8]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 fbdb 	bl	8006a60 <_vfiprintf_r>
 80062aa:	b002      	add	sp, #8
 80062ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b0:	b004      	add	sp, #16
 80062b2:	4770      	bx	lr
 80062b4:	20000010 	.word	0x20000010

080062b8 <_puts_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	460e      	mov	r6, r1
 80062bc:	4605      	mov	r5, r0
 80062be:	b118      	cbz	r0, 80062c8 <_puts_r+0x10>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_puts_r+0x10>
 80062c4:	f000 fa0c 	bl	80066e0 <__sinit>
 80062c8:	69ab      	ldr	r3, [r5, #24]
 80062ca:	68ac      	ldr	r4, [r5, #8]
 80062cc:	b913      	cbnz	r3, 80062d4 <_puts_r+0x1c>
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 fa06 	bl	80066e0 <__sinit>
 80062d4:	4b23      	ldr	r3, [pc, #140]	; (8006364 <_puts_r+0xac>)
 80062d6:	429c      	cmp	r4, r3
 80062d8:	d117      	bne.n	800630a <_puts_r+0x52>
 80062da:	686c      	ldr	r4, [r5, #4]
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	071b      	lsls	r3, r3, #28
 80062e0:	d51d      	bpl.n	800631e <_puts_r+0x66>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	b1db      	cbz	r3, 800631e <_puts_r+0x66>
 80062e6:	3e01      	subs	r6, #1
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	b9e9      	cbnz	r1, 8006330 <_puts_r+0x78>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da2e      	bge.n	8006356 <_puts_r+0x9e>
 80062f8:	4622      	mov	r2, r4
 80062fa:	210a      	movs	r1, #10
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f83f 	bl	8006380 <__swbuf_r>
 8006302:	3001      	adds	r0, #1
 8006304:	d011      	beq.n	800632a <_puts_r+0x72>
 8006306:	200a      	movs	r0, #10
 8006308:	e011      	b.n	800632e <_puts_r+0x76>
 800630a:	4b17      	ldr	r3, [pc, #92]	; (8006368 <_puts_r+0xb0>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d101      	bne.n	8006314 <_puts_r+0x5c>
 8006310:	68ac      	ldr	r4, [r5, #8]
 8006312:	e7e3      	b.n	80062dc <_puts_r+0x24>
 8006314:	4b15      	ldr	r3, [pc, #84]	; (800636c <_puts_r+0xb4>)
 8006316:	429c      	cmp	r4, r3
 8006318:	bf08      	it	eq
 800631a:	68ec      	ldreq	r4, [r5, #12]
 800631c:	e7de      	b.n	80062dc <_puts_r+0x24>
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 f87f 	bl	8006424 <__swsetup_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	d0dd      	beq.n	80062e6 <_puts_r+0x2e>
 800632a:	f04f 30ff 	mov.w	r0, #4294967295
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	2b00      	cmp	r3, #0
 8006332:	da04      	bge.n	800633e <_puts_r+0x86>
 8006334:	69a2      	ldr	r2, [r4, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	dc06      	bgt.n	8006348 <_puts_r+0x90>
 800633a:	290a      	cmp	r1, #10
 800633c:	d004      	beq.n	8006348 <_puts_r+0x90>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	7019      	strb	r1, [r3, #0]
 8006346:	e7cf      	b.n	80062e8 <_puts_r+0x30>
 8006348:	4622      	mov	r2, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f818 	bl	8006380 <__swbuf_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d1c9      	bne.n	80062e8 <_puts_r+0x30>
 8006354:	e7e9      	b.n	800632a <_puts_r+0x72>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	200a      	movs	r0, #10
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	7018      	strb	r0, [r3, #0]
 8006360:	e7e5      	b.n	800632e <_puts_r+0x76>
 8006362:	bf00      	nop
 8006364:	0800727c 	.word	0x0800727c
 8006368:	0800729c 	.word	0x0800729c
 800636c:	0800725c 	.word	0x0800725c

08006370 <puts>:
 8006370:	4b02      	ldr	r3, [pc, #8]	; (800637c <puts+0xc>)
 8006372:	4601      	mov	r1, r0
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f7ff bf9f 	b.w	80062b8 <_puts_r>
 800637a:	bf00      	nop
 800637c:	20000010 	.word	0x20000010

08006380 <__swbuf_r>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	460e      	mov	r6, r1
 8006384:	4614      	mov	r4, r2
 8006386:	4605      	mov	r5, r0
 8006388:	b118      	cbz	r0, 8006392 <__swbuf_r+0x12>
 800638a:	6983      	ldr	r3, [r0, #24]
 800638c:	b90b      	cbnz	r3, 8006392 <__swbuf_r+0x12>
 800638e:	f000 f9a7 	bl	80066e0 <__sinit>
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <__swbuf_r+0x98>)
 8006394:	429c      	cmp	r4, r3
 8006396:	d12a      	bne.n	80063ee <__swbuf_r+0x6e>
 8006398:	686c      	ldr	r4, [r5, #4]
 800639a:	69a3      	ldr	r3, [r4, #24]
 800639c:	60a3      	str	r3, [r4, #8]
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	071a      	lsls	r2, r3, #28
 80063a2:	d52e      	bpl.n	8006402 <__swbuf_r+0x82>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	b363      	cbz	r3, 8006402 <__swbuf_r+0x82>
 80063a8:	6923      	ldr	r3, [r4, #16]
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	1ac0      	subs	r0, r0, r3
 80063ae:	6963      	ldr	r3, [r4, #20]
 80063b0:	b2f6      	uxtb	r6, r6
 80063b2:	4283      	cmp	r3, r0
 80063b4:	4637      	mov	r7, r6
 80063b6:	dc04      	bgt.n	80063c2 <__swbuf_r+0x42>
 80063b8:	4621      	mov	r1, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	f000 f926 	bl	800660c <_fflush_r>
 80063c0:	bb28      	cbnz	r0, 800640e <__swbuf_r+0x8e>
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	6022      	str	r2, [r4, #0]
 80063ce:	701e      	strb	r6, [r3, #0]
 80063d0:	6963      	ldr	r3, [r4, #20]
 80063d2:	3001      	adds	r0, #1
 80063d4:	4283      	cmp	r3, r0
 80063d6:	d004      	beq.n	80063e2 <__swbuf_r+0x62>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	07db      	lsls	r3, r3, #31
 80063dc:	d519      	bpl.n	8006412 <__swbuf_r+0x92>
 80063de:	2e0a      	cmp	r6, #10
 80063e0:	d117      	bne.n	8006412 <__swbuf_r+0x92>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 f911 	bl	800660c <_fflush_r>
 80063ea:	b190      	cbz	r0, 8006412 <__swbuf_r+0x92>
 80063ec:	e00f      	b.n	800640e <__swbuf_r+0x8e>
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <__swbuf_r+0x9c>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d101      	bne.n	80063f8 <__swbuf_r+0x78>
 80063f4:	68ac      	ldr	r4, [r5, #8]
 80063f6:	e7d0      	b.n	800639a <__swbuf_r+0x1a>
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <__swbuf_r+0xa0>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	bf08      	it	eq
 80063fe:	68ec      	ldreq	r4, [r5, #12]
 8006400:	e7cb      	b.n	800639a <__swbuf_r+0x1a>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f80d 	bl	8006424 <__swsetup_r>
 800640a:	2800      	cmp	r0, #0
 800640c:	d0cc      	beq.n	80063a8 <__swbuf_r+0x28>
 800640e:	f04f 37ff 	mov.w	r7, #4294967295
 8006412:	4638      	mov	r0, r7
 8006414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006416:	bf00      	nop
 8006418:	0800727c 	.word	0x0800727c
 800641c:	0800729c 	.word	0x0800729c
 8006420:	0800725c 	.word	0x0800725c

08006424 <__swsetup_r>:
 8006424:	4b32      	ldr	r3, [pc, #200]	; (80064f0 <__swsetup_r+0xcc>)
 8006426:	b570      	push	{r4, r5, r6, lr}
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	4606      	mov	r6, r0
 800642c:	460c      	mov	r4, r1
 800642e:	b125      	cbz	r5, 800643a <__swsetup_r+0x16>
 8006430:	69ab      	ldr	r3, [r5, #24]
 8006432:	b913      	cbnz	r3, 800643a <__swsetup_r+0x16>
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f953 	bl	80066e0 <__sinit>
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <__swsetup_r+0xd0>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d10f      	bne.n	8006460 <__swsetup_r+0x3c>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	b29a      	uxth	r2, r3
 8006448:	0715      	lsls	r5, r2, #28
 800644a:	d42c      	bmi.n	80064a6 <__swsetup_r+0x82>
 800644c:	06d0      	lsls	r0, r2, #27
 800644e:	d411      	bmi.n	8006474 <__swsetup_r+0x50>
 8006450:	2209      	movs	r2, #9
 8006452:	6032      	str	r2, [r6, #0]
 8006454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	f04f 30ff 	mov.w	r0, #4294967295
 800645e:	e03e      	b.n	80064de <__swsetup_r+0xba>
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <__swsetup_r+0xd4>)
 8006462:	429c      	cmp	r4, r3
 8006464:	d101      	bne.n	800646a <__swsetup_r+0x46>
 8006466:	68ac      	ldr	r4, [r5, #8]
 8006468:	e7eb      	b.n	8006442 <__swsetup_r+0x1e>
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <__swsetup_r+0xd8>)
 800646c:	429c      	cmp	r4, r3
 800646e:	bf08      	it	eq
 8006470:	68ec      	ldreq	r4, [r5, #12]
 8006472:	e7e6      	b.n	8006442 <__swsetup_r+0x1e>
 8006474:	0751      	lsls	r1, r2, #29
 8006476:	d512      	bpl.n	800649e <__swsetup_r+0x7a>
 8006478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647a:	b141      	cbz	r1, 800648e <__swsetup_r+0x6a>
 800647c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006480:	4299      	cmp	r1, r3
 8006482:	d002      	beq.n	800648a <__swsetup_r+0x66>
 8006484:	4630      	mov	r0, r6
 8006486:	f000 fa19 	bl	80068bc <_free_r>
 800648a:	2300      	movs	r3, #0
 800648c:	6363      	str	r3, [r4, #52]	; 0x34
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006494:	81a3      	strh	r3, [r4, #12]
 8006496:	2300      	movs	r3, #0
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	b94b      	cbnz	r3, 80064be <__swsetup_r+0x9a>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b4:	d003      	beq.n	80064be <__swsetup_r+0x9a>
 80064b6:	4621      	mov	r1, r4
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f9bf 	bl	800683c <__smakebuf_r>
 80064be:	89a2      	ldrh	r2, [r4, #12]
 80064c0:	f012 0301 	ands.w	r3, r2, #1
 80064c4:	d00c      	beq.n	80064e0 <__swsetup_r+0xbc>
 80064c6:	2300      	movs	r3, #0
 80064c8:	60a3      	str	r3, [r4, #8]
 80064ca:	6963      	ldr	r3, [r4, #20]
 80064cc:	425b      	negs	r3, r3
 80064ce:	61a3      	str	r3, [r4, #24]
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	b953      	cbnz	r3, 80064ea <__swsetup_r+0xc6>
 80064d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80064dc:	d1ba      	bne.n	8006454 <__swsetup_r+0x30>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	0792      	lsls	r2, r2, #30
 80064e2:	bf58      	it	pl
 80064e4:	6963      	ldrpl	r3, [r4, #20]
 80064e6:	60a3      	str	r3, [r4, #8]
 80064e8:	e7f2      	b.n	80064d0 <__swsetup_r+0xac>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e7f7      	b.n	80064de <__swsetup_r+0xba>
 80064ee:	bf00      	nop
 80064f0:	20000010 	.word	0x20000010
 80064f4:	0800727c 	.word	0x0800727c
 80064f8:	0800729c 	.word	0x0800729c
 80064fc:	0800725c 	.word	0x0800725c

08006500 <__sflush_r>:
 8006500:	898a      	ldrh	r2, [r1, #12]
 8006502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	4605      	mov	r5, r0
 8006508:	0710      	lsls	r0, r2, #28
 800650a:	460c      	mov	r4, r1
 800650c:	d458      	bmi.n	80065c0 <__sflush_r+0xc0>
 800650e:	684b      	ldr	r3, [r1, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc05      	bgt.n	8006520 <__sflush_r+0x20>
 8006514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	dc02      	bgt.n	8006520 <__sflush_r+0x20>
 800651a:	2000      	movs	r0, #0
 800651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006522:	2e00      	cmp	r6, #0
 8006524:	d0f9      	beq.n	800651a <__sflush_r+0x1a>
 8006526:	2300      	movs	r3, #0
 8006528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800652c:	682f      	ldr	r7, [r5, #0]
 800652e:	6a21      	ldr	r1, [r4, #32]
 8006530:	602b      	str	r3, [r5, #0]
 8006532:	d032      	beq.n	800659a <__sflush_r+0x9a>
 8006534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	075a      	lsls	r2, r3, #29
 800653a:	d505      	bpl.n	8006548 <__sflush_r+0x48>
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	1ac0      	subs	r0, r0, r3
 8006540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006542:	b10b      	cbz	r3, 8006548 <__sflush_r+0x48>
 8006544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006546:	1ac0      	subs	r0, r0, r3
 8006548:	2300      	movs	r3, #0
 800654a:	4602      	mov	r2, r0
 800654c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800654e:	6a21      	ldr	r1, [r4, #32]
 8006550:	4628      	mov	r0, r5
 8006552:	47b0      	blx	r6
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	d106      	bne.n	8006568 <__sflush_r+0x68>
 800655a:	6829      	ldr	r1, [r5, #0]
 800655c:	291d      	cmp	r1, #29
 800655e:	d848      	bhi.n	80065f2 <__sflush_r+0xf2>
 8006560:	4a29      	ldr	r2, [pc, #164]	; (8006608 <__sflush_r+0x108>)
 8006562:	40ca      	lsrs	r2, r1
 8006564:	07d6      	lsls	r6, r2, #31
 8006566:	d544      	bpl.n	80065f2 <__sflush_r+0xf2>
 8006568:	2200      	movs	r2, #0
 800656a:	6062      	str	r2, [r4, #4]
 800656c:	04d9      	lsls	r1, r3, #19
 800656e:	6922      	ldr	r2, [r4, #16]
 8006570:	6022      	str	r2, [r4, #0]
 8006572:	d504      	bpl.n	800657e <__sflush_r+0x7e>
 8006574:	1c42      	adds	r2, r0, #1
 8006576:	d101      	bne.n	800657c <__sflush_r+0x7c>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b903      	cbnz	r3, 800657e <__sflush_r+0x7e>
 800657c:	6560      	str	r0, [r4, #84]	; 0x54
 800657e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006580:	602f      	str	r7, [r5, #0]
 8006582:	2900      	cmp	r1, #0
 8006584:	d0c9      	beq.n	800651a <__sflush_r+0x1a>
 8006586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800658a:	4299      	cmp	r1, r3
 800658c:	d002      	beq.n	8006594 <__sflush_r+0x94>
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f994 	bl	80068bc <_free_r>
 8006594:	2000      	movs	r0, #0
 8006596:	6360      	str	r0, [r4, #52]	; 0x34
 8006598:	e7c0      	b.n	800651c <__sflush_r+0x1c>
 800659a:	2301      	movs	r3, #1
 800659c:	4628      	mov	r0, r5
 800659e:	47b0      	blx	r6
 80065a0:	1c41      	adds	r1, r0, #1
 80065a2:	d1c8      	bne.n	8006536 <__sflush_r+0x36>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0c5      	beq.n	8006536 <__sflush_r+0x36>
 80065aa:	2b1d      	cmp	r3, #29
 80065ac:	d001      	beq.n	80065b2 <__sflush_r+0xb2>
 80065ae:	2b16      	cmp	r3, #22
 80065b0:	d101      	bne.n	80065b6 <__sflush_r+0xb6>
 80065b2:	602f      	str	r7, [r5, #0]
 80065b4:	e7b1      	b.n	800651a <__sflush_r+0x1a>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	e7ad      	b.n	800651c <__sflush_r+0x1c>
 80065c0:	690f      	ldr	r7, [r1, #16]
 80065c2:	2f00      	cmp	r7, #0
 80065c4:	d0a9      	beq.n	800651a <__sflush_r+0x1a>
 80065c6:	0793      	lsls	r3, r2, #30
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	bf08      	it	eq
 80065cc:	694b      	ldreq	r3, [r1, #20]
 80065ce:	600f      	str	r7, [r1, #0]
 80065d0:	bf18      	it	ne
 80065d2:	2300      	movne	r3, #0
 80065d4:	eba6 0807 	sub.w	r8, r6, r7
 80065d8:	608b      	str	r3, [r1, #8]
 80065da:	f1b8 0f00 	cmp.w	r8, #0
 80065de:	dd9c      	ble.n	800651a <__sflush_r+0x1a>
 80065e0:	4643      	mov	r3, r8
 80065e2:	463a      	mov	r2, r7
 80065e4:	6a21      	ldr	r1, [r4, #32]
 80065e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b0      	blx	r6
 80065ec:	2800      	cmp	r0, #0
 80065ee:	dc06      	bgt.n	80065fe <__sflush_r+0xfe>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e78e      	b.n	800651c <__sflush_r+0x1c>
 80065fe:	4407      	add	r7, r0
 8006600:	eba8 0800 	sub.w	r8, r8, r0
 8006604:	e7e9      	b.n	80065da <__sflush_r+0xda>
 8006606:	bf00      	nop
 8006608:	20400001 	.word	0x20400001

0800660c <_fflush_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	690b      	ldr	r3, [r1, #16]
 8006610:	4605      	mov	r5, r0
 8006612:	460c      	mov	r4, r1
 8006614:	b1db      	cbz	r3, 800664e <_fflush_r+0x42>
 8006616:	b118      	cbz	r0, 8006620 <_fflush_r+0x14>
 8006618:	6983      	ldr	r3, [r0, #24]
 800661a:	b90b      	cbnz	r3, 8006620 <_fflush_r+0x14>
 800661c:	f000 f860 	bl	80066e0 <__sinit>
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <_fflush_r+0x48>)
 8006622:	429c      	cmp	r4, r3
 8006624:	d109      	bne.n	800663a <_fflush_r+0x2e>
 8006626:	686c      	ldr	r4, [r5, #4]
 8006628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662c:	b17b      	cbz	r3, 800664e <_fflush_r+0x42>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006636:	f7ff bf63 	b.w	8006500 <__sflush_r>
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <_fflush_r+0x4c>)
 800663c:	429c      	cmp	r4, r3
 800663e:	d101      	bne.n	8006644 <_fflush_r+0x38>
 8006640:	68ac      	ldr	r4, [r5, #8]
 8006642:	e7f1      	b.n	8006628 <_fflush_r+0x1c>
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <_fflush_r+0x50>)
 8006646:	429c      	cmp	r4, r3
 8006648:	bf08      	it	eq
 800664a:	68ec      	ldreq	r4, [r5, #12]
 800664c:	e7ec      	b.n	8006628 <_fflush_r+0x1c>
 800664e:	2000      	movs	r0, #0
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	bf00      	nop
 8006654:	0800727c 	.word	0x0800727c
 8006658:	0800729c 	.word	0x0800729c
 800665c:	0800725c 	.word	0x0800725c

08006660 <std>:
 8006660:	2300      	movs	r3, #0
 8006662:	b510      	push	{r4, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	e9c0 3300 	strd	r3, r3, [r0]
 800666a:	6083      	str	r3, [r0, #8]
 800666c:	8181      	strh	r1, [r0, #12]
 800666e:	6643      	str	r3, [r0, #100]	; 0x64
 8006670:	81c2      	strh	r2, [r0, #14]
 8006672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006676:	6183      	str	r3, [r0, #24]
 8006678:	4619      	mov	r1, r3
 800667a:	2208      	movs	r2, #8
 800667c:	305c      	adds	r0, #92	; 0x5c
 800667e:	f7ff fdfa 	bl	8006276 <memset>
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <std+0x38>)
 8006684:	6263      	str	r3, [r4, #36]	; 0x24
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <std+0x3c>)
 8006688:	62a3      	str	r3, [r4, #40]	; 0x28
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <std+0x40>)
 800668c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800668e:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <std+0x44>)
 8006690:	6224      	str	r4, [r4, #32]
 8006692:	6323      	str	r3, [r4, #48]	; 0x30
 8006694:	bd10      	pop	{r4, pc}
 8006696:	bf00      	nop
 8006698:	08006fbd 	.word	0x08006fbd
 800669c:	08006fdf 	.word	0x08006fdf
 80066a0:	08007017 	.word	0x08007017
 80066a4:	0800703b 	.word	0x0800703b

080066a8 <_cleanup_r>:
 80066a8:	4901      	ldr	r1, [pc, #4]	; (80066b0 <_cleanup_r+0x8>)
 80066aa:	f000 b885 	b.w	80067b8 <_fwalk_reent>
 80066ae:	bf00      	nop
 80066b0:	0800660d 	.word	0x0800660d

080066b4 <__sfmoreglue>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	1e4a      	subs	r2, r1, #1
 80066b8:	2568      	movs	r5, #104	; 0x68
 80066ba:	4355      	muls	r5, r2
 80066bc:	460e      	mov	r6, r1
 80066be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066c2:	f000 f949 	bl	8006958 <_malloc_r>
 80066c6:	4604      	mov	r4, r0
 80066c8:	b140      	cbz	r0, 80066dc <__sfmoreglue+0x28>
 80066ca:	2100      	movs	r1, #0
 80066cc:	e9c0 1600 	strd	r1, r6, [r0]
 80066d0:	300c      	adds	r0, #12
 80066d2:	60a0      	str	r0, [r4, #8]
 80066d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066d8:	f7ff fdcd 	bl	8006276 <memset>
 80066dc:	4620      	mov	r0, r4
 80066de:	bd70      	pop	{r4, r5, r6, pc}

080066e0 <__sinit>:
 80066e0:	6983      	ldr	r3, [r0, #24]
 80066e2:	b510      	push	{r4, lr}
 80066e4:	4604      	mov	r4, r0
 80066e6:	bb33      	cbnz	r3, 8006736 <__sinit+0x56>
 80066e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80066ec:	6503      	str	r3, [r0, #80]	; 0x50
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <__sinit+0x58>)
 80066f0:	4a12      	ldr	r2, [pc, #72]	; (800673c <__sinit+0x5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6282      	str	r2, [r0, #40]	; 0x28
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bf04      	itt	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	6183      	streq	r3, [r0, #24]
 80066fe:	f000 f81f 	bl	8006740 <__sfp>
 8006702:	6060      	str	r0, [r4, #4]
 8006704:	4620      	mov	r0, r4
 8006706:	f000 f81b 	bl	8006740 <__sfp>
 800670a:	60a0      	str	r0, [r4, #8]
 800670c:	4620      	mov	r0, r4
 800670e:	f000 f817 	bl	8006740 <__sfp>
 8006712:	2200      	movs	r2, #0
 8006714:	60e0      	str	r0, [r4, #12]
 8006716:	2104      	movs	r1, #4
 8006718:	6860      	ldr	r0, [r4, #4]
 800671a:	f7ff ffa1 	bl	8006660 <std>
 800671e:	2201      	movs	r2, #1
 8006720:	2109      	movs	r1, #9
 8006722:	68a0      	ldr	r0, [r4, #8]
 8006724:	f7ff ff9c 	bl	8006660 <std>
 8006728:	2202      	movs	r2, #2
 800672a:	2112      	movs	r1, #18
 800672c:	68e0      	ldr	r0, [r4, #12]
 800672e:	f7ff ff97 	bl	8006660 <std>
 8006732:	2301      	movs	r3, #1
 8006734:	61a3      	str	r3, [r4, #24]
 8006736:	bd10      	pop	{r4, pc}
 8006738:	08007258 	.word	0x08007258
 800673c:	080066a9 	.word	0x080066a9

08006740 <__sfp>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <__sfp+0x70>)
 8006744:	681e      	ldr	r6, [r3, #0]
 8006746:	69b3      	ldr	r3, [r6, #24]
 8006748:	4607      	mov	r7, r0
 800674a:	b913      	cbnz	r3, 8006752 <__sfp+0x12>
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ffc7 	bl	80066e0 <__sinit>
 8006752:	3648      	adds	r6, #72	; 0x48
 8006754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006758:	3b01      	subs	r3, #1
 800675a:	d503      	bpl.n	8006764 <__sfp+0x24>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	b133      	cbz	r3, 800676e <__sfp+0x2e>
 8006760:	6836      	ldr	r6, [r6, #0]
 8006762:	e7f7      	b.n	8006754 <__sfp+0x14>
 8006764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006768:	b16d      	cbz	r5, 8006786 <__sfp+0x46>
 800676a:	3468      	adds	r4, #104	; 0x68
 800676c:	e7f4      	b.n	8006758 <__sfp+0x18>
 800676e:	2104      	movs	r1, #4
 8006770:	4638      	mov	r0, r7
 8006772:	f7ff ff9f 	bl	80066b4 <__sfmoreglue>
 8006776:	6030      	str	r0, [r6, #0]
 8006778:	2800      	cmp	r0, #0
 800677a:	d1f1      	bne.n	8006760 <__sfp+0x20>
 800677c:	230c      	movs	r3, #12
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4604      	mov	r4, r0
 8006782:	4620      	mov	r0, r4
 8006784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <__sfp+0x74>)
 8006788:	6665      	str	r5, [r4, #100]	; 0x64
 800678a:	e9c4 5500 	strd	r5, r5, [r4]
 800678e:	60a5      	str	r5, [r4, #8]
 8006790:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006794:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006798:	2208      	movs	r2, #8
 800679a:	4629      	mov	r1, r5
 800679c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a0:	f7ff fd69 	bl	8006276 <memset>
 80067a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067ac:	e7e9      	b.n	8006782 <__sfp+0x42>
 80067ae:	bf00      	nop
 80067b0:	08007258 	.word	0x08007258
 80067b4:	ffff0001 	.word	0xffff0001

080067b8 <_fwalk_reent>:
 80067b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	4680      	mov	r8, r0
 80067be:	4689      	mov	r9, r1
 80067c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067c4:	2600      	movs	r6, #0
 80067c6:	b914      	cbnz	r4, 80067ce <_fwalk_reent+0x16>
 80067c8:	4630      	mov	r0, r6
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80067d2:	3f01      	subs	r7, #1
 80067d4:	d501      	bpl.n	80067da <_fwalk_reent+0x22>
 80067d6:	6824      	ldr	r4, [r4, #0]
 80067d8:	e7f5      	b.n	80067c6 <_fwalk_reent+0xe>
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d907      	bls.n	80067f0 <_fwalk_reent+0x38>
 80067e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067e4:	3301      	adds	r3, #1
 80067e6:	d003      	beq.n	80067f0 <_fwalk_reent+0x38>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4640      	mov	r0, r8
 80067ec:	47c8      	blx	r9
 80067ee:	4306      	orrs	r6, r0
 80067f0:	3568      	adds	r5, #104	; 0x68
 80067f2:	e7ee      	b.n	80067d2 <_fwalk_reent+0x1a>

080067f4 <__swhatbuf_r>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	460e      	mov	r6, r1
 80067f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fc:	2900      	cmp	r1, #0
 80067fe:	b096      	sub	sp, #88	; 0x58
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	da07      	bge.n	8006816 <__swhatbuf_r+0x22>
 8006806:	2300      	movs	r3, #0
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	89b3      	ldrh	r3, [r6, #12]
 800680c:	061a      	lsls	r2, r3, #24
 800680e:	d410      	bmi.n	8006832 <__swhatbuf_r+0x3e>
 8006810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006814:	e00e      	b.n	8006834 <__swhatbuf_r+0x40>
 8006816:	466a      	mov	r2, sp
 8006818:	f000 fc36 	bl	8007088 <_fstat_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	dbf2      	blt.n	8006806 <__swhatbuf_r+0x12>
 8006820:	9a01      	ldr	r2, [sp, #4]
 8006822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800682a:	425a      	negs	r2, r3
 800682c:	415a      	adcs	r2, r3
 800682e:	602a      	str	r2, [r5, #0]
 8006830:	e7ee      	b.n	8006810 <__swhatbuf_r+0x1c>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	2000      	movs	r0, #0
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	b016      	add	sp, #88	; 0x58
 800683a:	bd70      	pop	{r4, r5, r6, pc}

0800683c <__smakebuf_r>:
 800683c:	898b      	ldrh	r3, [r1, #12]
 800683e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006840:	079d      	lsls	r5, r3, #30
 8006842:	4606      	mov	r6, r0
 8006844:	460c      	mov	r4, r1
 8006846:	d507      	bpl.n	8006858 <__smakebuf_r+0x1c>
 8006848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2301      	movs	r3, #1
 8006852:	6163      	str	r3, [r4, #20]
 8006854:	b002      	add	sp, #8
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	ab01      	add	r3, sp, #4
 800685a:	466a      	mov	r2, sp
 800685c:	f7ff ffca 	bl	80067f4 <__swhatbuf_r>
 8006860:	9900      	ldr	r1, [sp, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f877 	bl	8006958 <_malloc_r>
 800686a:	b948      	cbnz	r0, 8006880 <__smakebuf_r+0x44>
 800686c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d4ef      	bmi.n	8006854 <__smakebuf_r+0x18>
 8006874:	f023 0303 	bic.w	r3, r3, #3
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	e7e3      	b.n	8006848 <__smakebuf_r+0xc>
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <__smakebuf_r+0x7c>)
 8006882:	62b3      	str	r3, [r6, #40]	; 0x28
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	6020      	str	r0, [r4, #0]
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	6163      	str	r3, [r4, #20]
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	6120      	str	r0, [r4, #16]
 8006896:	b15b      	cbz	r3, 80068b0 <__smakebuf_r+0x74>
 8006898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 fc05 	bl	80070ac <_isatty_r>
 80068a2:	b128      	cbz	r0, 80068b0 <__smakebuf_r+0x74>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	431d      	orrs	r5, r3
 80068b4:	81a5      	strh	r5, [r4, #12]
 80068b6:	e7cd      	b.n	8006854 <__smakebuf_r+0x18>
 80068b8:	080066a9 	.word	0x080066a9

080068bc <_free_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4605      	mov	r5, r0
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d045      	beq.n	8006950 <_free_r+0x94>
 80068c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c8:	1f0c      	subs	r4, r1, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfb8      	it	lt
 80068ce:	18e4      	addlt	r4, r4, r3
 80068d0:	f000 fc0e 	bl	80070f0 <__malloc_lock>
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <_free_r+0x98>)
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	4610      	mov	r0, r2
 80068da:	b933      	cbnz	r3, 80068ea <_free_r+0x2e>
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	6014      	str	r4, [r2, #0]
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e6:	f000 bc04 	b.w	80070f2 <__malloc_unlock>
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	d90c      	bls.n	8006908 <_free_r+0x4c>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	1862      	adds	r2, r4, r1
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bf04      	itt	eq
 80068f6:	681a      	ldreq	r2, [r3, #0]
 80068f8:	685b      	ldreq	r3, [r3, #4]
 80068fa:	6063      	str	r3, [r4, #4]
 80068fc:	bf04      	itt	eq
 80068fe:	1852      	addeq	r2, r2, r1
 8006900:	6022      	streq	r2, [r4, #0]
 8006902:	6004      	str	r4, [r0, #0]
 8006904:	e7ec      	b.n	80068e0 <_free_r+0x24>
 8006906:	4613      	mov	r3, r2
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	b10a      	cbz	r2, 8006910 <_free_r+0x54>
 800690c:	42a2      	cmp	r2, r4
 800690e:	d9fa      	bls.n	8006906 <_free_r+0x4a>
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	1858      	adds	r0, r3, r1
 8006914:	42a0      	cmp	r0, r4
 8006916:	d10b      	bne.n	8006930 <_free_r+0x74>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	4401      	add	r1, r0
 800691c:	1858      	adds	r0, r3, r1
 800691e:	4282      	cmp	r2, r0
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	d1dd      	bne.n	80068e0 <_free_r+0x24>
 8006924:	6810      	ldr	r0, [r2, #0]
 8006926:	6852      	ldr	r2, [r2, #4]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	4401      	add	r1, r0
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	e7d7      	b.n	80068e0 <_free_r+0x24>
 8006930:	d902      	bls.n	8006938 <_free_r+0x7c>
 8006932:	230c      	movs	r3, #12
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	e7d3      	b.n	80068e0 <_free_r+0x24>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	1821      	adds	r1, r4, r0
 800693c:	428a      	cmp	r2, r1
 800693e:	bf04      	itt	eq
 8006940:	6811      	ldreq	r1, [r2, #0]
 8006942:	6852      	ldreq	r2, [r2, #4]
 8006944:	6062      	str	r2, [r4, #4]
 8006946:	bf04      	itt	eq
 8006948:	1809      	addeq	r1, r1, r0
 800694a:	6021      	streq	r1, [r4, #0]
 800694c:	605c      	str	r4, [r3, #4]
 800694e:	e7c7      	b.n	80068e0 <_free_r+0x24>
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	200049a4 	.word	0x200049a4

08006958 <_malloc_r>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	1ccd      	adds	r5, r1, #3
 800695c:	f025 0503 	bic.w	r5, r5, #3
 8006960:	3508      	adds	r5, #8
 8006962:	2d0c      	cmp	r5, #12
 8006964:	bf38      	it	cc
 8006966:	250c      	movcc	r5, #12
 8006968:	2d00      	cmp	r5, #0
 800696a:	4606      	mov	r6, r0
 800696c:	db01      	blt.n	8006972 <_malloc_r+0x1a>
 800696e:	42a9      	cmp	r1, r5
 8006970:	d903      	bls.n	800697a <_malloc_r+0x22>
 8006972:	230c      	movs	r3, #12
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	2000      	movs	r0, #0
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	f000 fbb9 	bl	80070f0 <__malloc_lock>
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <_malloc_r+0xac>)
 8006980:	6814      	ldr	r4, [r2, #0]
 8006982:	4621      	mov	r1, r4
 8006984:	b991      	cbnz	r1, 80069ac <_malloc_r+0x54>
 8006986:	4c20      	ldr	r4, [pc, #128]	; (8006a08 <_malloc_r+0xb0>)
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	b91b      	cbnz	r3, 8006994 <_malloc_r+0x3c>
 800698c:	4630      	mov	r0, r6
 800698e:	f000 fb05 	bl	8006f9c <_sbrk_r>
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f000 fb00 	bl	8006f9c <_sbrk_r>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d124      	bne.n	80069ea <_malloc_r+0x92>
 80069a0:	230c      	movs	r3, #12
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 fba4 	bl	80070f2 <__malloc_unlock>
 80069aa:	e7e4      	b.n	8006976 <_malloc_r+0x1e>
 80069ac:	680b      	ldr	r3, [r1, #0]
 80069ae:	1b5b      	subs	r3, r3, r5
 80069b0:	d418      	bmi.n	80069e4 <_malloc_r+0x8c>
 80069b2:	2b0b      	cmp	r3, #11
 80069b4:	d90f      	bls.n	80069d6 <_malloc_r+0x7e>
 80069b6:	600b      	str	r3, [r1, #0]
 80069b8:	50cd      	str	r5, [r1, r3]
 80069ba:	18cc      	adds	r4, r1, r3
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 fb98 	bl	80070f2 <__malloc_unlock>
 80069c2:	f104 000b 	add.w	r0, r4, #11
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	f020 0007 	bic.w	r0, r0, #7
 80069cc:	1ac3      	subs	r3, r0, r3
 80069ce:	d0d3      	beq.n	8006978 <_malloc_r+0x20>
 80069d0:	425a      	negs	r2, r3
 80069d2:	50e2      	str	r2, [r4, r3]
 80069d4:	e7d0      	b.n	8006978 <_malloc_r+0x20>
 80069d6:	428c      	cmp	r4, r1
 80069d8:	684b      	ldr	r3, [r1, #4]
 80069da:	bf16      	itet	ne
 80069dc:	6063      	strne	r3, [r4, #4]
 80069de:	6013      	streq	r3, [r2, #0]
 80069e0:	460c      	movne	r4, r1
 80069e2:	e7eb      	b.n	80069bc <_malloc_r+0x64>
 80069e4:	460c      	mov	r4, r1
 80069e6:	6849      	ldr	r1, [r1, #4]
 80069e8:	e7cc      	b.n	8006984 <_malloc_r+0x2c>
 80069ea:	1cc4      	adds	r4, r0, #3
 80069ec:	f024 0403 	bic.w	r4, r4, #3
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d005      	beq.n	8006a00 <_malloc_r+0xa8>
 80069f4:	1a21      	subs	r1, r4, r0
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 fad0 	bl	8006f9c <_sbrk_r>
 80069fc:	3001      	adds	r0, #1
 80069fe:	d0cf      	beq.n	80069a0 <_malloc_r+0x48>
 8006a00:	6025      	str	r5, [r4, #0]
 8006a02:	e7db      	b.n	80069bc <_malloc_r+0x64>
 8006a04:	200049a4 	.word	0x200049a4
 8006a08:	200049a8 	.word	0x200049a8

08006a0c <__sfputc_r>:
 8006a0c:	6893      	ldr	r3, [r2, #8]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	b410      	push	{r4}
 8006a14:	6093      	str	r3, [r2, #8]
 8006a16:	da08      	bge.n	8006a2a <__sfputc_r+0x1e>
 8006a18:	6994      	ldr	r4, [r2, #24]
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	db01      	blt.n	8006a22 <__sfputc_r+0x16>
 8006a1e:	290a      	cmp	r1, #10
 8006a20:	d103      	bne.n	8006a2a <__sfputc_r+0x1e>
 8006a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a26:	f7ff bcab 	b.w	8006380 <__swbuf_r>
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	1c58      	adds	r0, r3, #1
 8006a2e:	6010      	str	r0, [r2, #0]
 8006a30:	7019      	strb	r1, [r3, #0]
 8006a32:	4608      	mov	r0, r1
 8006a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <__sfputs_r>:
 8006a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	18d5      	adds	r5, r2, r3
 8006a44:	42ac      	cmp	r4, r5
 8006a46:	d101      	bne.n	8006a4c <__sfputs_r+0x12>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e007      	b.n	8006a5c <__sfputs_r+0x22>
 8006a4c:	463a      	mov	r2, r7
 8006a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7ff ffda 	bl	8006a0c <__sfputc_r>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d1f3      	bne.n	8006a44 <__sfputs_r+0xa>
 8006a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a60 <_vfiprintf_r>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	b09d      	sub	sp, #116	; 0x74
 8006a68:	4617      	mov	r7, r2
 8006a6a:	461d      	mov	r5, r3
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	b118      	cbz	r0, 8006a78 <_vfiprintf_r+0x18>
 8006a70:	6983      	ldr	r3, [r0, #24]
 8006a72:	b90b      	cbnz	r3, 8006a78 <_vfiprintf_r+0x18>
 8006a74:	f7ff fe34 	bl	80066e0 <__sinit>
 8006a78:	4b7c      	ldr	r3, [pc, #496]	; (8006c6c <_vfiprintf_r+0x20c>)
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d158      	bne.n	8006b30 <_vfiprintf_r+0xd0>
 8006a7e:	6874      	ldr	r4, [r6, #4]
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	0718      	lsls	r0, r3, #28
 8006a84:	d55e      	bpl.n	8006b44 <_vfiprintf_r+0xe4>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d05b      	beq.n	8006b44 <_vfiprintf_r+0xe4>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a90:	2320      	movs	r3, #32
 8006a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a96:	2330      	movs	r3, #48	; 0x30
 8006a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a9c:	9503      	str	r5, [sp, #12]
 8006a9e:	f04f 0b01 	mov.w	fp, #1
 8006aa2:	46b8      	mov	r8, r7
 8006aa4:	4645      	mov	r5, r8
 8006aa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006aaa:	b10b      	cbz	r3, 8006ab0 <_vfiprintf_r+0x50>
 8006aac:	2b25      	cmp	r3, #37	; 0x25
 8006aae:	d154      	bne.n	8006b5a <_vfiprintf_r+0xfa>
 8006ab0:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ab4:	d00b      	beq.n	8006ace <_vfiprintf_r+0x6e>
 8006ab6:	4653      	mov	r3, sl
 8006ab8:	463a      	mov	r2, r7
 8006aba:	4621      	mov	r1, r4
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff ffbc 	bl	8006a3a <__sfputs_r>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f000 80c2 	beq.w	8006c4c <_vfiprintf_r+0x1ec>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	4453      	add	r3, sl
 8006acc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ace:	f898 3000 	ldrb.w	r3, [r8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 80ba 	beq.w	8006c4c <_vfiprintf_r+0x1ec>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	9307      	str	r3, [sp, #28]
 8006ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aea:	931a      	str	r3, [sp, #104]	; 0x68
 8006aec:	46a8      	mov	r8, r5
 8006aee:	2205      	movs	r2, #5
 8006af0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006af4:	485e      	ldr	r0, [pc, #376]	; (8006c70 <_vfiprintf_r+0x210>)
 8006af6:	f7f9 fb6b 	bl	80001d0 <memchr>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	bb78      	cbnz	r0, 8006b5e <_vfiprintf_r+0xfe>
 8006afe:	06d9      	lsls	r1, r3, #27
 8006b00:	bf44      	itt	mi
 8006b02:	2220      	movmi	r2, #32
 8006b04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b08:	071a      	lsls	r2, r3, #28
 8006b0a:	bf44      	itt	mi
 8006b0c:	222b      	movmi	r2, #43	; 0x2b
 8006b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b12:	782a      	ldrb	r2, [r5, #0]
 8006b14:	2a2a      	cmp	r2, #42	; 0x2a
 8006b16:	d02a      	beq.n	8006b6e <_vfiprintf_r+0x10e>
 8006b18:	9a07      	ldr	r2, [sp, #28]
 8006b1a:	46a8      	mov	r8, r5
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	250a      	movs	r5, #10
 8006b20:	4641      	mov	r1, r8
 8006b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b26:	3b30      	subs	r3, #48	; 0x30
 8006b28:	2b09      	cmp	r3, #9
 8006b2a:	d969      	bls.n	8006c00 <_vfiprintf_r+0x1a0>
 8006b2c:	b360      	cbz	r0, 8006b88 <_vfiprintf_r+0x128>
 8006b2e:	e024      	b.n	8006b7a <_vfiprintf_r+0x11a>
 8006b30:	4b50      	ldr	r3, [pc, #320]	; (8006c74 <_vfiprintf_r+0x214>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d101      	bne.n	8006b3a <_vfiprintf_r+0xda>
 8006b36:	68b4      	ldr	r4, [r6, #8]
 8006b38:	e7a2      	b.n	8006a80 <_vfiprintf_r+0x20>
 8006b3a:	4b4f      	ldr	r3, [pc, #316]	; (8006c78 <_vfiprintf_r+0x218>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	bf08      	it	eq
 8006b40:	68f4      	ldreq	r4, [r6, #12]
 8006b42:	e79d      	b.n	8006a80 <_vfiprintf_r+0x20>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7ff fc6c 	bl	8006424 <__swsetup_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d09d      	beq.n	8006a8c <_vfiprintf_r+0x2c>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b01d      	add	sp, #116	; 0x74
 8006b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5a:	46a8      	mov	r8, r5
 8006b5c:	e7a2      	b.n	8006aa4 <_vfiprintf_r+0x44>
 8006b5e:	4a44      	ldr	r2, [pc, #272]	; (8006c70 <_vfiprintf_r+0x210>)
 8006b60:	1a80      	subs	r0, r0, r2
 8006b62:	fa0b f000 	lsl.w	r0, fp, r0
 8006b66:	4318      	orrs	r0, r3
 8006b68:	9004      	str	r0, [sp, #16]
 8006b6a:	4645      	mov	r5, r8
 8006b6c:	e7be      	b.n	8006aec <_vfiprintf_r+0x8c>
 8006b6e:	9a03      	ldr	r2, [sp, #12]
 8006b70:	1d11      	adds	r1, r2, #4
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	9103      	str	r1, [sp, #12]
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	db01      	blt.n	8006b7e <_vfiprintf_r+0x11e>
 8006b7a:	9207      	str	r2, [sp, #28]
 8006b7c:	e004      	b.n	8006b88 <_vfiprintf_r+0x128>
 8006b7e:	4252      	negs	r2, r2
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	9207      	str	r2, [sp, #28]
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	f898 3000 	ldrb.w	r3, [r8]
 8006b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b8e:	d10e      	bne.n	8006bae <_vfiprintf_r+0x14e>
 8006b90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b94:	2b2a      	cmp	r3, #42	; 0x2a
 8006b96:	d138      	bne.n	8006c0a <_vfiprintf_r+0x1aa>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9203      	str	r2, [sp, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfb8      	it	lt
 8006ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ba8:	f108 0802 	add.w	r8, r8, #2
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	4d33      	ldr	r5, [pc, #204]	; (8006c7c <_vfiprintf_r+0x21c>)
 8006bb0:	f898 1000 	ldrb.w	r1, [r8]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f7f9 fb0a 	bl	80001d0 <memchr>
 8006bbc:	b140      	cbz	r0, 8006bd0 <_vfiprintf_r+0x170>
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	1b40      	subs	r0, r0, r5
 8006bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	4303      	orrs	r3, r0
 8006bca:	f108 0801 	add.w	r8, r8, #1
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	f898 1000 	ldrb.w	r1, [r8]
 8006bd4:	482a      	ldr	r0, [pc, #168]	; (8006c80 <_vfiprintf_r+0x220>)
 8006bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bda:	2206      	movs	r2, #6
 8006bdc:	f108 0701 	add.w	r7, r8, #1
 8006be0:	f7f9 faf6 	bl	80001d0 <memchr>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d037      	beq.n	8006c58 <_vfiprintf_r+0x1f8>
 8006be8:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <_vfiprintf_r+0x224>)
 8006bea:	bb1b      	cbnz	r3, 8006c34 <_vfiprintf_r+0x1d4>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	3307      	adds	r3, #7
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfa:	444b      	add	r3, r9
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfe:	e750      	b.n	8006aa2 <_vfiprintf_r+0x42>
 8006c00:	fb05 3202 	mla	r2, r5, r2, r3
 8006c04:	2001      	movs	r0, #1
 8006c06:	4688      	mov	r8, r1
 8006c08:	e78a      	b.n	8006b20 <_vfiprintf_r+0xc0>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f108 0801 	add.w	r8, r8, #1
 8006c10:	9305      	str	r3, [sp, #20]
 8006c12:	4619      	mov	r1, r3
 8006c14:	250a      	movs	r5, #10
 8006c16:	4640      	mov	r0, r8
 8006c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c1c:	3a30      	subs	r2, #48	; 0x30
 8006c1e:	2a09      	cmp	r2, #9
 8006c20:	d903      	bls.n	8006c2a <_vfiprintf_r+0x1ca>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0c3      	beq.n	8006bae <_vfiprintf_r+0x14e>
 8006c26:	9105      	str	r1, [sp, #20]
 8006c28:	e7c1      	b.n	8006bae <_vfiprintf_r+0x14e>
 8006c2a:	fb05 2101 	mla	r1, r5, r1, r2
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4680      	mov	r8, r0
 8006c32:	e7f0      	b.n	8006c16 <_vfiprintf_r+0x1b6>
 8006c34:	ab03      	add	r3, sp, #12
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4622      	mov	r2, r4
 8006c3a:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <_vfiprintf_r+0x228>)
 8006c3c:	a904      	add	r1, sp, #16
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f3af 8000 	nop.w
 8006c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c48:	4681      	mov	r9, r0
 8006c4a:	d1d5      	bne.n	8006bf8 <_vfiprintf_r+0x198>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	065b      	lsls	r3, r3, #25
 8006c50:	f53f af7e 	bmi.w	8006b50 <_vfiprintf_r+0xf0>
 8006c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c56:	e77d      	b.n	8006b54 <_vfiprintf_r+0xf4>
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <_vfiprintf_r+0x228>)
 8006c60:	a904      	add	r1, sp, #16
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 f888 	bl	8006d78 <_printf_i>
 8006c68:	e7ec      	b.n	8006c44 <_vfiprintf_r+0x1e4>
 8006c6a:	bf00      	nop
 8006c6c:	0800727c 	.word	0x0800727c
 8006c70:	080072bc 	.word	0x080072bc
 8006c74:	0800729c 	.word	0x0800729c
 8006c78:	0800725c 	.word	0x0800725c
 8006c7c:	080072c2 	.word	0x080072c2
 8006c80:	080072c6 	.word	0x080072c6
 8006c84:	00000000 	.word	0x00000000
 8006c88:	08006a3b 	.word	0x08006a3b

08006c8c <_printf_common>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	4691      	mov	r9, r2
 8006c92:	461f      	mov	r7, r3
 8006c94:	688a      	ldr	r2, [r1, #8]
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	bfb8      	it	lt
 8006ca0:	4613      	movlt	r3, r2
 8006ca2:	f8c9 3000 	str.w	r3, [r9]
 8006ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006caa:	4606      	mov	r6, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	b112      	cbz	r2, 8006cb6 <_printf_common+0x2a>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	f8c9 3000 	str.w	r3, [r9]
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	0699      	lsls	r1, r3, #26
 8006cba:	bf42      	ittt	mi
 8006cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006cc0:	3302      	addmi	r3, #2
 8006cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	f015 0506 	ands.w	r5, r5, #6
 8006ccc:	d107      	bne.n	8006cde <_printf_common+0x52>
 8006cce:	f104 0a19 	add.w	sl, r4, #25
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	dc28      	bgt.n	8006d30 <_printf_common+0xa4>
 8006cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	3300      	adds	r3, #0
 8006ce6:	bf18      	it	ne
 8006ce8:	2301      	movne	r3, #1
 8006cea:	0692      	lsls	r2, r2, #26
 8006cec:	d42d      	bmi.n	8006d4a <_printf_common+0xbe>
 8006cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	47c0      	blx	r8
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d020      	beq.n	8006d3e <_printf_common+0xb2>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	68e5      	ldr	r5, [r4, #12]
 8006d00:	f8d9 2000 	ldr.w	r2, [r9]
 8006d04:	f003 0306 	and.w	r3, r3, #6
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	bf08      	it	eq
 8006d0c:	1aad      	subeq	r5, r5, r2
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	bf0c      	ite	eq
 8006d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d18:	2500      	movne	r5, #0
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	bfc4      	itt	gt
 8006d1e:	1a9b      	subgt	r3, r3, r2
 8006d20:	18ed      	addgt	r5, r5, r3
 8006d22:	f04f 0900 	mov.w	r9, #0
 8006d26:	341a      	adds	r4, #26
 8006d28:	454d      	cmp	r5, r9
 8006d2a:	d11a      	bne.n	8006d62 <_printf_common+0xd6>
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e008      	b.n	8006d42 <_printf_common+0xb6>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4652      	mov	r2, sl
 8006d34:	4639      	mov	r1, r7
 8006d36:	4630      	mov	r0, r6
 8006d38:	47c0      	blx	r8
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d103      	bne.n	8006d46 <_printf_common+0xba>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	3501      	adds	r5, #1
 8006d48:	e7c3      	b.n	8006cd2 <_printf_common+0x46>
 8006d4a:	18e1      	adds	r1, r4, r3
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	2030      	movs	r0, #48	; 0x30
 8006d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d54:	4422      	add	r2, r4
 8006d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d5e:	3302      	adds	r3, #2
 8006d60:	e7c5      	b.n	8006cee <_printf_common+0x62>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4622      	mov	r2, r4
 8006d66:	4639      	mov	r1, r7
 8006d68:	4630      	mov	r0, r6
 8006d6a:	47c0      	blx	r8
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d0e6      	beq.n	8006d3e <_printf_common+0xb2>
 8006d70:	f109 0901 	add.w	r9, r9, #1
 8006d74:	e7d8      	b.n	8006d28 <_printf_common+0x9c>
	...

08006d78 <_printf_i>:
 8006d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d80:	460c      	mov	r4, r1
 8006d82:	7e09      	ldrb	r1, [r1, #24]
 8006d84:	b085      	sub	sp, #20
 8006d86:	296e      	cmp	r1, #110	; 0x6e
 8006d88:	4617      	mov	r7, r2
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	4698      	mov	r8, r3
 8006d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d90:	f000 80b3 	beq.w	8006efa <_printf_i+0x182>
 8006d94:	d822      	bhi.n	8006ddc <_printf_i+0x64>
 8006d96:	2963      	cmp	r1, #99	; 0x63
 8006d98:	d036      	beq.n	8006e08 <_printf_i+0x90>
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x3a>
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	f000 80b9 	beq.w	8006f14 <_printf_i+0x19c>
 8006da2:	2958      	cmp	r1, #88	; 0x58
 8006da4:	f000 8083 	beq.w	8006eae <_printf_i+0x136>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006db0:	e032      	b.n	8006e18 <_printf_i+0xa0>
 8006db2:	2964      	cmp	r1, #100	; 0x64
 8006db4:	d001      	beq.n	8006dba <_printf_i+0x42>
 8006db6:	2969      	cmp	r1, #105	; 0x69
 8006db8:	d1f6      	bne.n	8006da8 <_printf_i+0x30>
 8006dba:	6820      	ldr	r0, [r4, #0]
 8006dbc:	6813      	ldr	r3, [r2, #0]
 8006dbe:	0605      	lsls	r5, r0, #24
 8006dc0:	f103 0104 	add.w	r1, r3, #4
 8006dc4:	d52a      	bpl.n	8006e1c <_printf_i+0xa4>
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6011      	str	r1, [r2, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da03      	bge.n	8006dd6 <_printf_i+0x5e>
 8006dce:	222d      	movs	r2, #45	; 0x2d
 8006dd0:	425b      	negs	r3, r3
 8006dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006dd6:	486f      	ldr	r0, [pc, #444]	; (8006f94 <_printf_i+0x21c>)
 8006dd8:	220a      	movs	r2, #10
 8006dda:	e039      	b.n	8006e50 <_printf_i+0xd8>
 8006ddc:	2973      	cmp	r1, #115	; 0x73
 8006dde:	f000 809d 	beq.w	8006f1c <_printf_i+0x1a4>
 8006de2:	d808      	bhi.n	8006df6 <_printf_i+0x7e>
 8006de4:	296f      	cmp	r1, #111	; 0x6f
 8006de6:	d020      	beq.n	8006e2a <_printf_i+0xb2>
 8006de8:	2970      	cmp	r1, #112	; 0x70
 8006dea:	d1dd      	bne.n	8006da8 <_printf_i+0x30>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	f043 0320 	orr.w	r3, r3, #32
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	e003      	b.n	8006dfe <_printf_i+0x86>
 8006df6:	2975      	cmp	r1, #117	; 0x75
 8006df8:	d017      	beq.n	8006e2a <_printf_i+0xb2>
 8006dfa:	2978      	cmp	r1, #120	; 0x78
 8006dfc:	d1d4      	bne.n	8006da8 <_printf_i+0x30>
 8006dfe:	2378      	movs	r3, #120	; 0x78
 8006e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e04:	4864      	ldr	r0, [pc, #400]	; (8006f98 <_printf_i+0x220>)
 8006e06:	e055      	b.n	8006eb4 <_printf_i+0x13c>
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	1d19      	adds	r1, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6011      	str	r1, [r2, #0]
 8006e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e08c      	b.n	8006f36 <_printf_i+0x1be>
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6011      	str	r1, [r2, #0]
 8006e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e24:	bf18      	it	ne
 8006e26:	b21b      	sxthne	r3, r3
 8006e28:	e7cf      	b.n	8006dca <_printf_i+0x52>
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	6825      	ldr	r5, [r4, #0]
 8006e2e:	1d18      	adds	r0, r3, #4
 8006e30:	6010      	str	r0, [r2, #0]
 8006e32:	0628      	lsls	r0, r5, #24
 8006e34:	d501      	bpl.n	8006e3a <_printf_i+0xc2>
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	e002      	b.n	8006e40 <_printf_i+0xc8>
 8006e3a:	0668      	lsls	r0, r5, #25
 8006e3c:	d5fb      	bpl.n	8006e36 <_printf_i+0xbe>
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	4854      	ldr	r0, [pc, #336]	; (8006f94 <_printf_i+0x21c>)
 8006e42:	296f      	cmp	r1, #111	; 0x6f
 8006e44:	bf14      	ite	ne
 8006e46:	220a      	movne	r2, #10
 8006e48:	2208      	moveq	r2, #8
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e50:	6865      	ldr	r5, [r4, #4]
 8006e52:	60a5      	str	r5, [r4, #8]
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	f2c0 8095 	blt.w	8006f84 <_printf_i+0x20c>
 8006e5a:	6821      	ldr	r1, [r4, #0]
 8006e5c:	f021 0104 	bic.w	r1, r1, #4
 8006e60:	6021      	str	r1, [r4, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13d      	bne.n	8006ee2 <_printf_i+0x16a>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	f040 808e 	bne.w	8006f88 <_printf_i+0x210>
 8006e6c:	4665      	mov	r5, ip
 8006e6e:	2a08      	cmp	r2, #8
 8006e70:	d10b      	bne.n	8006e8a <_printf_i+0x112>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	07db      	lsls	r3, r3, #31
 8006e76:	d508      	bpl.n	8006e8a <_printf_i+0x112>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	bfde      	ittt	le
 8006e80:	2330      	movle	r3, #48	; 0x30
 8006e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e8a:	ebac 0305 	sub.w	r3, ip, r5
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	f8cd 8000 	str.w	r8, [sp]
 8006e94:	463b      	mov	r3, r7
 8006e96:	aa03      	add	r2, sp, #12
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff fef6 	bl	8006c8c <_printf_common>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d14d      	bne.n	8006f40 <_printf_i+0x1c8>
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea8:	b005      	add	sp, #20
 8006eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eae:	4839      	ldr	r0, [pc, #228]	; (8006f94 <_printf_i+0x21c>)
 8006eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006eb4:	6813      	ldr	r3, [r2, #0]
 8006eb6:	6821      	ldr	r1, [r4, #0]
 8006eb8:	1d1d      	adds	r5, r3, #4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6015      	str	r5, [r2, #0]
 8006ebe:	060a      	lsls	r2, r1, #24
 8006ec0:	d50b      	bpl.n	8006eda <_printf_i+0x162>
 8006ec2:	07ca      	lsls	r2, r1, #31
 8006ec4:	bf44      	itt	mi
 8006ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8006eca:	6021      	strmi	r1, [r4, #0]
 8006ecc:	b91b      	cbnz	r3, 8006ed6 <_printf_i+0x15e>
 8006ece:	6822      	ldr	r2, [r4, #0]
 8006ed0:	f022 0220 	bic.w	r2, r2, #32
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	e7b7      	b.n	8006e4a <_printf_i+0xd2>
 8006eda:	064d      	lsls	r5, r1, #25
 8006edc:	bf48      	it	mi
 8006ede:	b29b      	uxthmi	r3, r3
 8006ee0:	e7ef      	b.n	8006ec2 <_printf_i+0x14a>
 8006ee2:	4665      	mov	r5, ip
 8006ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8006eec:	5cc3      	ldrb	r3, [r0, r3]
 8006eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d1f5      	bne.n	8006ee4 <_printf_i+0x16c>
 8006ef8:	e7b9      	b.n	8006e6e <_printf_i+0xf6>
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	6825      	ldr	r5, [r4, #0]
 8006efe:	6961      	ldr	r1, [r4, #20]
 8006f00:	1d18      	adds	r0, r3, #4
 8006f02:	6010      	str	r0, [r2, #0]
 8006f04:	0628      	lsls	r0, r5, #24
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	d501      	bpl.n	8006f0e <_printf_i+0x196>
 8006f0a:	6019      	str	r1, [r3, #0]
 8006f0c:	e002      	b.n	8006f14 <_printf_i+0x19c>
 8006f0e:	066a      	lsls	r2, r5, #25
 8006f10:	d5fb      	bpl.n	8006f0a <_printf_i+0x192>
 8006f12:	8019      	strh	r1, [r3, #0]
 8006f14:	2300      	movs	r3, #0
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	4665      	mov	r5, ip
 8006f1a:	e7b9      	b.n	8006e90 <_printf_i+0x118>
 8006f1c:	6813      	ldr	r3, [r2, #0]
 8006f1e:	1d19      	adds	r1, r3, #4
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	681d      	ldr	r5, [r3, #0]
 8006f24:	6862      	ldr	r2, [r4, #4]
 8006f26:	2100      	movs	r1, #0
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7f9 f951 	bl	80001d0 <memchr>
 8006f2e:	b108      	cbz	r0, 8006f34 <_printf_i+0x1bc>
 8006f30:	1b40      	subs	r0, r0, r5
 8006f32:	6060      	str	r0, [r4, #4]
 8006f34:	6863      	ldr	r3, [r4, #4]
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3e:	e7a7      	b.n	8006e90 <_printf_i+0x118>
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	462a      	mov	r2, r5
 8006f44:	4639      	mov	r1, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	47c0      	blx	r8
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d0aa      	beq.n	8006ea4 <_printf_i+0x12c>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	079b      	lsls	r3, r3, #30
 8006f52:	d413      	bmi.n	8006f7c <_printf_i+0x204>
 8006f54:	68e0      	ldr	r0, [r4, #12]
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	4298      	cmp	r0, r3
 8006f5a:	bfb8      	it	lt
 8006f5c:	4618      	movlt	r0, r3
 8006f5e:	e7a3      	b.n	8006ea8 <_printf_i+0x130>
 8006f60:	2301      	movs	r3, #1
 8006f62:	464a      	mov	r2, r9
 8006f64:	4639      	mov	r1, r7
 8006f66:	4630      	mov	r0, r6
 8006f68:	47c0      	blx	r8
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d09a      	beq.n	8006ea4 <_printf_i+0x12c>
 8006f6e:	3501      	adds	r5, #1
 8006f70:	68e3      	ldr	r3, [r4, #12]
 8006f72:	9a03      	ldr	r2, [sp, #12]
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	42ab      	cmp	r3, r5
 8006f78:	dcf2      	bgt.n	8006f60 <_printf_i+0x1e8>
 8006f7a:	e7eb      	b.n	8006f54 <_printf_i+0x1dc>
 8006f7c:	2500      	movs	r5, #0
 8006f7e:	f104 0919 	add.w	r9, r4, #25
 8006f82:	e7f5      	b.n	8006f70 <_printf_i+0x1f8>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1ac      	bne.n	8006ee2 <_printf_i+0x16a>
 8006f88:	7803      	ldrb	r3, [r0, #0]
 8006f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f92:	e76c      	b.n	8006e6e <_printf_i+0xf6>
 8006f94:	080072cd 	.word	0x080072cd
 8006f98:	080072de 	.word	0x080072de

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4c06      	ldr	r4, [pc, #24]	; (8006fb8 <_sbrk_r+0x1c>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	f7f9 ffce 	bl	8000f48 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20004c0c 	.word	0x20004c0c

08006fbc <__sread>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 f896 	bl	80070f4 <_read_r>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	bfab      	itete	ge
 8006fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fce:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd0:	181b      	addge	r3, r3, r0
 8006fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fd6:	bfac      	ite	ge
 8006fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fda:	81a3      	strhlt	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__swrite>:
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	898b      	ldrh	r3, [r1, #12]
 8006fe6:	05db      	lsls	r3, r3, #23
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	4616      	mov	r6, r2
 8006fee:	d505      	bpl.n	8006ffc <__swrite+0x1e>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	f000 f868 	bl	80070cc <_lseek_r>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	4632      	mov	r2, r6
 800700a:	463b      	mov	r3, r7
 800700c:	4628      	mov	r0, r5
 800700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	f000 b817 	b.w	8007044 <_write_r>

08007016 <__sseek>:
 8007016:	b510      	push	{r4, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 f855 	bl	80070cc <_lseek_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	bf15      	itete	ne
 8007028:	6560      	strne	r0, [r4, #84]	; 0x54
 800702a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800702e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007032:	81a3      	strheq	r3, [r4, #12]
 8007034:	bf18      	it	ne
 8007036:	81a3      	strhne	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__sclose>:
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 b813 	b.w	8007068 <_close_r>
	...

08007044 <_write_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4c07      	ldr	r4, [pc, #28]	; (8007064 <_write_r+0x20>)
 8007048:	4605      	mov	r5, r0
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	2200      	movs	r2, #0
 8007050:	6022      	str	r2, [r4, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7f9 fb2b 	bl	80006ae <_write>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_write_r+0x1e>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	b103      	cbz	r3, 8007062 <_write_r+0x1e>
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20004c0c 	.word	0x20004c0c

08007068 <_close_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4c06      	ldr	r4, [pc, #24]	; (8007084 <_close_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4605      	mov	r5, r0
 8007070:	4608      	mov	r0, r1
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	f7f9 ff33 	bl	8000ede <_close>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_close_r+0x1a>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	b103      	cbz	r3, 8007082 <_close_r+0x1a>
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20004c0c 	.word	0x20004c0c

08007088 <_fstat_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4c07      	ldr	r4, [pc, #28]	; (80070a8 <_fstat_r+0x20>)
 800708c:	2300      	movs	r3, #0
 800708e:	4605      	mov	r5, r0
 8007090:	4608      	mov	r0, r1
 8007092:	4611      	mov	r1, r2
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	f7f9 ff2e 	bl	8000ef6 <_fstat>
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	d102      	bne.n	80070a4 <_fstat_r+0x1c>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	b103      	cbz	r3, 80070a4 <_fstat_r+0x1c>
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	bf00      	nop
 80070a8:	20004c0c 	.word	0x20004c0c

080070ac <_isatty_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4c06      	ldr	r4, [pc, #24]	; (80070c8 <_isatty_r+0x1c>)
 80070b0:	2300      	movs	r3, #0
 80070b2:	4605      	mov	r5, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	f7f9 ff2d 	bl	8000f16 <_isatty>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_isatty_r+0x1a>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_isatty_r+0x1a>
 80070c4:	602b      	str	r3, [r5, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	20004c0c 	.word	0x20004c0c

080070cc <_lseek_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4c07      	ldr	r4, [pc, #28]	; (80070ec <_lseek_r+0x20>)
 80070d0:	4605      	mov	r5, r0
 80070d2:	4608      	mov	r0, r1
 80070d4:	4611      	mov	r1, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	6022      	str	r2, [r4, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	f7f9 ff26 	bl	8000f2c <_lseek>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_lseek_r+0x1e>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_lseek_r+0x1e>
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	20004c0c 	.word	0x20004c0c

080070f0 <__malloc_lock>:
 80070f0:	4770      	bx	lr

080070f2 <__malloc_unlock>:
 80070f2:	4770      	bx	lr

080070f4 <_read_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4c07      	ldr	r4, [pc, #28]	; (8007114 <_read_r+0x20>)
 80070f8:	4605      	mov	r5, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7f9 fece 	bl	8000ea4 <_read>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_read_r+0x1e>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	b103      	cbz	r3, 8007112 <_read_r+0x1e>
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20004c0c 	.word	0x20004c0c

08007118 <_init>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr

08007124 <_fini>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	bf00      	nop
 8007128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712a:	bc08      	pop	{r3}
 800712c:	469e      	mov	lr, r3
 800712e:	4770      	bx	lr

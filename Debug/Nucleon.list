
Nucleon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e4  080060e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060ec  080060ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a9c  20000010  08006104  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aac  08006104  00024aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001844d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e12  00000000  00000000  0003848d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  0003c588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d7b  00000000  00000000  0003d728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eefe  00000000  00000000  0005e4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8257  00000000  00000000  0006d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001355f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  00135674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fec 	.word	0x08005fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005fec 	.word	0x08005fec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <indicator_task>:
  */

#include "Human_Interface/indicator.h"

void indicator_task(TIM_HandleTypeDef timerHandle, uint32_t timerChannel)
{
 80004d0:	b084      	sub	sp, #16
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	f107 0c10 	add.w	ip, r7, #16
 80004dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	struct tone t;
	if (osMessageQueueGet(toneQueueId, &t, NULL, osWaitForever) == osOK)
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <indicator_task+0x54>)
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	4639      	mov	r1, r7
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2200      	movs	r2, #0
 80004ec:	f003 f816 	bl	800351c <osMessageQueueGet>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d108      	bne.n	8000508 <indicator_task+0x38>
	{
		_piezo_config(t.freq);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f82d 	bl	8000558 <_piezo_config>
		osDelay(t.length);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fee3 	bl	80032cc <osDelay>
	else
	{
		_piezo_halt();
		osDelay(500);
	}
}
 8000506:	e005      	b.n	8000514 <indicator_task+0x44>
		_piezo_halt();
 8000508:	f000 f856 	bl	80005b8 <_piezo_halt>
		osDelay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000510:	f002 fedc 	bl	80032cc <osDelay>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800051e:	b004      	add	sp, #16
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	2000497c 	.word	0x2000497c

08000528 <note>:

void note(uint32_t freq, uint32_t length)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	struct tone t;
	t.freq = freq;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60bb      	str	r3, [r7, #8]
	t.length = length;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(toneQueueId, &t, 1, 50);
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <note+0x2c>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	f107 0108 	add.w	r1, r7, #8
 8000542:	2332      	movs	r3, #50	; 0x32
 8000544:	2201      	movs	r2, #1
 8000546:	f002 ff75 	bl	8003434 <osMessageQueuePut>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000497c 	.word	0x2000497c

08000558 <_piezo_config>:

void _piezo_config(uint32_t freq)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint32_t t = (uint32_t) 1000000 / freq;
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <_piezo_config+0x58>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 800056a:	2108      	movs	r1, #8
 800056c:	4811      	ldr	r0, [pc, #68]	; (80005b4 <_piezo_config+0x5c>)
 800056e:	f001 feef 	bl	8002350 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	piezo.Init.Period = t;//1000/(freq);
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <_piezo_config+0x5c>)
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	60d3      	str	r3, [r2, #12]
	piezo.Init.Period = t;
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <_piezo_config+0x5c>)
 800057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057c:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Init(&piezo);
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <_piezo_config+0x5c>)
 8000580:	f001 fe73 	bl	800226a <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = piezo.Init.Period / 2;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <_piezo_config+0x5c>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
	HAL_TIM_PWM_ConfigChannel(&piezo, &sConfigOC, TIM_CHANNEL_3);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2208      	movs	r2, #8
 8000596:	4619      	mov	r1, r3
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <_piezo_config+0x5c>)
 800059a:	f002 f839 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&piezo, TIM_CHANNEL_3);
 800059e:	2108      	movs	r1, #8
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <_piezo_config+0x5c>)
 80005a2:	f001 fe97 	bl	80022d4 <HAL_TIM_PWM_Start>
}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	; 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	000f4240 	.word	0x000f4240
 80005b4:	2000493c 	.word	0x2000493c

080005b8 <_piezo_halt>:

void _piezo_halt()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 80005bc:	2108      	movs	r1, #8
 80005be:	4802      	ldr	r0, [pc, #8]	; (80005c8 <_piezo_halt+0x10>)
 80005c0:	f001 fec6 	bl	8002350 <HAL_TIM_PWM_Stop>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000493c 	.word	0x2000493c

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fbda 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f85a 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f964 	bl	80008a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005dc:	f000 f8b4 	bl	8000748 <MX_SPI1_Init>
  MX_TIM3_Init();
 80005e0:	f000 f8e8 	bl	80007b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e4:	f002 fd62 	bl	80030ac <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of toneQueue */
  toneQueueHandle = osMessageQueueNew (30, sizeof(struct tone), &toneQueue_attributes);
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <main+0x88>)
 80005ea:	2108      	movs	r1, #8
 80005ec:	201e      	movs	r0, #30
 80005ee:	f002 fe9b 	bl	8003328 <osMessageQueueNew>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <main+0x8c>)
 80005f6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  toneQueueId = toneQueueHandle;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <main+0x8c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a17      	ldr	r2, [pc, #92]	; (800065c <main+0x90>)
 80005fe:	6013      	str	r3, [r2, #0]
  piezo = htim3;
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <main+0x94>)
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0x98>)
 8000604:	4614      	mov	r4, r2
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <main+0x9c>)
 800061e:	2100      	movs	r1, #0
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <main+0xa0>)
 8000622:	f002 fdad 	bl	8003180 <osThreadNew>
 8000626:	4602      	mov	r2, r0
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <main+0xa4>)
 800062a:	601a      	str	r2, [r3, #0]

  /* creation of flashDemo */
  flashDemoHandle = osThreadNew(StartFlashDemo, NULL, &flashDemo_attributes);
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <main+0xa8>)
 800062e:	2100      	movs	r1, #0
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xac>)
 8000632:	f002 fda5 	bl	8003180 <osThreadNew>
 8000636:	4602      	mov	r2, r0
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <main+0xb0>)
 800063a:	601a      	str	r2, [r3, #0]

  /* creation of indicator */
  indicatorHandle = osThreadNew(StartIndicator, NULL, &indicator_attributes);
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <main+0xb4>)
 800063e:	2100      	movs	r1, #0
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0xb8>)
 8000642:	f002 fd9d 	bl	8003180 <osThreadNew>
 8000646:	4602      	mov	r2, r0
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0xbc>)
 800064a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f002 fd62 	bl	8003114 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x84>
 8000652:	bf00      	nop
 8000654:	080060b4 	.word	0x080060b4
 8000658:	20004980 	.word	0x20004980
 800065c:	2000497c 	.word	0x2000497c
 8000660:	2000493c 	.word	0x2000493c
 8000664:	20004984 	.word	0x20004984
 8000668:	08006048 	.word	0x08006048
 800066c:	08000975 	.word	0x08000975
 8000670:	20004a1c 	.word	0x20004a1c
 8000674:	0800606c 	.word	0x0800606c
 8000678:	080009a9 	.word	0x080009a9
 800067c:	20004a20 	.word	0x20004a20
 8000680:	08006090 	.word	0x08006090
 8000684:	08000a05 	.word	0x08000a05
 8000688:	20004a24 	.word	0x20004a24

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fc9d 	bl	8005fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xb4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xb4>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <SystemClock_Config+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <SystemClock_Config+0xb8>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fe36 	bl	800136c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000706:	f000 f9a9 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f890 	bl	800184c <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000732:	f000 f993 	bl	8000a5c <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f001 fa65 	bl	8001c68 <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f95a 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200049c4 	.word	0x200049c4
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_TIM3_Init+0xe8>)
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <MX_TIM3_Init+0xec>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_TIM3_Init+0xe8>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_TIM3_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_TIM3_Init+0xe8>)
 80007f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_TIM3_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_TIM3_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080a:	4824      	ldr	r0, [pc, #144]	; (800089c <MX_TIM3_Init+0xe8>)
 800080c:	f001 fcde 	bl	80021cc <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000816:	f000 f921 	bl	8000a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000824:	4619      	mov	r1, r3
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <MX_TIM3_Init+0xe8>)
 8000828:	f001 ffb8 	bl	800279c <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000832:	f000 f913 	bl	8000a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <MX_TIM3_Init+0xe8>)
 8000838:	f001 fd17 	bl	800226a <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 f90b 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	4619      	mov	r1, r3
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_TIM3_Init+0xe8>)
 8000856:	f002 fb91 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000860:	f000 f8fc 	bl	8000a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000868:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800086c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2208      	movs	r2, #8
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <MX_TIM3_Init+0xe8>)
 800087e:	f001 fec7 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 f8e8 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <MX_TIM3_Init+0xe8>)
 800088e:	f000 f983 	bl	8000b98 <HAL_TIM_MspPostInit>

}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	; 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20004984 	.word	0x20004984
 80008a0:	40000400 	.word	0x40000400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_GPIO_Init+0xc4>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_GPIO_Init+0xc4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <MX_GPIO_Init+0xc8>)
 8000914:	f000 fcf6 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0xcc>)
 8000920:	f000 fcf0 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000924:	2310      	movs	r3, #16
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_GPIO_Init+0xc8>)
 800093c:	f000 fb48 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS1_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0xcc>)
 800095a:	f000 fb39 	bl	8000fd0 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400

08000974 <StartBlink>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  note(500, 100);
 800097c:	2164      	movs	r1, #100	; 0x64
 800097e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000982:	f7ff fdd1 	bl	8000528 <note>
	  note(0, 400);
 8000986:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fdcc 	bl	8000528 <note>
	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <StartBlink+0x30>)
 8000996:	f000 fcce 	bl	8001336 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800099a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099e:	f002 fc95 	bl	80032cc <osDelay>
	  note(500, 100);
 80009a2:	e7eb      	b.n	800097c <StartBlink+0x8>
 80009a4:	40020400 	.word	0x40020400

080009a8 <StartFlashDemo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashDemo */
void StartFlashDemo(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashDemo */
  cmd[0] = 0x9f;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <StartFlashDemo+0x4c>)
 80009b2:	229f      	movs	r2, #159	; 0x9f
 80009b4:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2110      	movs	r1, #16
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <StartFlashDemo+0x50>)
 80009bc:	f000 fca2 	bl	8001304 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <StartFlashDemo+0x50>)
 80009c6:	f000 fc9d 	bl	8001304 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, cmd, data, 4, 0xff);
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2304      	movs	r3, #4
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <StartFlashDemo+0x54>)
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <StartFlashDemo+0x4c>)
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <StartFlashDemo+0x58>)
 80009d6:	f001 f9ab 	bl	8001d30 <HAL_SPI_TransmitReceive>
	  osDelay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f002 fc76 	bl	80032cc <osDelay>
	  /* For some reason, printf seems to break threads */
	  /*printf("JedecID: %02x-%02x%02x\n", data[1], data[2], data[3]);*/
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2110      	movs	r1, #16
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <StartFlashDemo+0x50>)
 80009e6:	f000 fc8d 	bl	8001304 <HAL_GPIO_WritePin>
	  osDelay(3000);
 80009ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ee:	f002 fc6d 	bl	80032cc <osDelay>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80009f2:	e7e0      	b.n	80009b6 <StartFlashDemo+0xe>
 80009f4:	2000002c 	.word	0x2000002c
 80009f8:	40020000 	.word	0x40020000
 80009fc:	20000030 	.word	0x20000030
 8000a00:	200049c4 	.word	0x200049c4

08000a04 <StartIndicator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIndicator */
void StartIndicator(void *argument)
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	b091      	sub	sp, #68	; 0x44
 8000a08:	af0e      	add	r7, sp, #56	; 0x38
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIndicator */
  /* Infinite loop */
  for(;;)
  {
    indicator_task(htim3, TIM_CHANNEL_3);
 8000a0c:	4e09      	ldr	r6, [pc, #36]	; (8000a34 <StartIndicator+0x30>)
 8000a0e:	2308      	movs	r3, #8
 8000a10:	930c      	str	r3, [sp, #48]	; 0x30
 8000a12:	466d      	mov	r5, sp
 8000a14:	f106 0410 	add.w	r4, r6, #16
 8000a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a28:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a2c:	f7ff fd50 	bl	80004d0 <indicator_task>
 8000a30:	e7ec      	b.n	8000a0c <StartIndicator+0x8>
 8000a32:	bf00      	nop
 8000a34:	20004984 	.word	0x20004984

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 f9bf 	bl	8000dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40001000 	.word	0x40001000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fa63 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_SPI_MspInit+0x84>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d12b      	bne.n	8000b3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SPI1_SDI_Pin|SPI1_SDO_Pin;
 8000b1e:	23e0      	movs	r3, #224	; 0xe0
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000b3a:	f000 fa49 	bl	8000fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_TIM_Base_MspInit+0x3c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d10d      	bne.n	8000b82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_TIM_Base_MspInit+0x40>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x40>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_Base_MspInit+0x40>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40000400 	.word	0x40000400
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_TIM_MspPostInit+0x68>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d11d      	bne.n	8000bf6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_TIM_MspPostInit+0x6c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_TIM_MspPostInit+0x6c>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_TIM_MspPostInit+0x6c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PIEZO_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIEZO_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_TIM_MspPostInit+0x70>)
 8000bf2:	f000 f9ed 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f000 f9ab 	bl	8000f7c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f000 f9c4 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 0210 	add.w	r2, r7, #16
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 ffd6 	bl	8001c04 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c58:	f000 ffc0 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	0c9b      	lsrs	r3, r3, #18
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <HAL_InitTick+0xb0>)
 8000c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c92:	f001 fa9b 	bl	80021cc <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c9e:	f001 fac0 	bl	8002222 <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	; 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	20004a28 	.word	0x20004a28
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM6_DAC_IRQHandler+0x10>)
 8000cfa:	f001 fb81 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20004a28 	.word	0x20004a28

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <SystemInit+0x28>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <SystemInit+0x28>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x28>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3a:	e003      	b.n	8000d44 <LoopCopyDataInit>

08000d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d42:	3104      	adds	r1, #4

08000d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d4c:	d3f6      	bcc.n	8000d3c <CopyDataInit>
  ldr  r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d50:	e002      	b.n	8000d58 <LoopFillZerobss>

08000d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d54:	f842 3b04 	str.w	r3, [r2], #4

08000d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d5c:	d3f9      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff ffd3 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f005 f90b 	bl	8005f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fc31 	bl	80005cc <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d70:	080060f4 	.word	0x080060f4
  ldr  r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d78:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d7c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d80:	20004aac 	.word	0x20004aac

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8d8 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff ff28 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe56 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20004a68 	.word	0x20004a68

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20004a68 	.word	0x20004a68

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8e:	f7ff ff61 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ffb1 	bl	8000f00 <NVIC_EncodePriority>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff80 	bl	8000eac <__NVIC_SetPriority>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff54 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x5a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	2b11      	cmp	r3, #17
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b12      	cmp	r3, #18
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0xfc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x308>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5e      	ldr	r2, [pc, #376]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x330>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x330>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x330>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	401a      	ands	r2, r3
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	429a      	cmp	r2, r3
 800134e:	d104      	bne.n	800135a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e25b      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d075      	beq.n	8001476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	4ba3      	ldr	r3, [pc, #652]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d00c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4ba0      	ldr	r3, [pc, #640]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4b9d      	ldr	r3, [pc, #628]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b99      	ldr	r3, [pc, #612]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d05b      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d157      	bne.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e236      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x74>
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a90      	ldr	r2, [pc, #576]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b8b      	ldr	r3, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a8a      	ldr	r2, [pc, #552]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a87      	ldr	r2, [pc, #540]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 8001404:	4b84      	ldr	r3, [pc, #528]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a83      	ldr	r2, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a80      	ldr	r2, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fce6 	bl	8000df4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fce2 	bl	8000df4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1fb      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xc0>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fcd2 	bl	8000df4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fcce 	bl	8000df4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1e7      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0xe8>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d063      	beq.n	800154a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1bb      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4952      	ldr	r1, [pc, #328]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	e03a      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <HAL_RCC_OscConfig+0x2b0>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fc87 	bl	8000df4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc83 	bl	8000df4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e19c      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4940      	ldr	r1, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_OscConfig+0x2b0>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fc66 	bl	8000df4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fc62 	bl	8000df4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e17b      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d030      	beq.n	80015b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d016      	beq.n	800158c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_OscConfig+0x2b4>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fc46 	bl	8000df4 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fc42 	bl	8000df4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e15b      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x200>
 800158a:	e015      	b.n	80015b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x2b4>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fc2f 	bl	8000df4 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fc2b 	bl	8000df4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e144      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a0 	beq.w	8001706 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d121      	bne.n	8001646 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_RCC_OscConfig+0x2b8>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fbf1 	bl	8000df4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e011      	b.n	800163a <HAL_RCC_OscConfig+0x2ce>
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	42470000 	.word	0x42470000
 8001620:	42470e80 	.word	0x42470e80
 8001624:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001628:	f7ff fbe4 	bl	8000df4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0fd      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x4d4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d106      	bne.n	800165c <HAL_RCC_OscConfig+0x2f0>
 800164e:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a7c      	ldr	r2, [pc, #496]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x32a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x312>
 8001664:	4b77      	ldr	r3, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a76      	ldr	r2, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x32a>
 800167e:	4b71      	ldr	r3, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a70      	ldr	r2, [pc, #448]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	4b6e      	ldr	r3, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a6d      	ldr	r2, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fba9 	bl	8000df4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fba5 	bl	8000df4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0bc      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x33a>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb93 	bl	8000df4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fb8f 	bl	8000df4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0a6      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8092 	beq.w	8001834 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d05c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d141      	bne.n	80017a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_RCC_OscConfig+0x4dc>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb63 	bl	8000df4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fb5f 	bl	8000df4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e078      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001744:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	019b      	lsls	r3, r3, #6
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	4933      	ldr	r1, [pc, #204]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x4dc>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb38 	bl	8000df4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fb34 	bl	8000df4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e04d      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x41c>
 80017a6:	e045      	b.n	8001834 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x4dc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb21 	bl	8000df4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb1d 	bl	8000df4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e036      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x44a>
 80017d4:	e02e      	b.n	8001834 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e029      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_RCC_OscConfig+0x4d8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d11c      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d115      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000
 8001844:	40023800 	.word	0x40023800
 8001848:	42470060 	.word	0x42470060

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 030f 	and.w	r3, r3, #15
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90c      	bls.n	8001888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d044      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e067      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4934      	ldr	r1, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa5a 	bl	8000df4 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa56 	bl	8000df4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4601      	mov	r1, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	fa21 f303 	lsr.w	r3, r1, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f90a 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	080060cc 	.word	0x080060cc
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d007      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x32>
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d008      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x38>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80b4 	bne.w	8001bac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a46:	60bb      	str	r3, [r7, #8]
       break;
 8001a48:	e0b3      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a4c:	60bb      	str	r3, [r7, #8]
      break;
 8001a4e:	e0b0      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d04a      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	ea03 0501 	and.w	r5, r3, r1
 8001a7c:	ea04 0602 	and.w	r6, r4, r2
 8001a80:	4629      	mov	r1, r5
 8001a82:	4632      	mov	r2, r6
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	f04f 0400 	mov.w	r4, #0
 8001a8c:	0154      	lsls	r4, r2, #5
 8001a8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a92:	014b      	lsls	r3, r1, #5
 8001a94:	4619      	mov	r1, r3
 8001a96:	4622      	mov	r2, r4
 8001a98:	1b49      	subs	r1, r1, r5
 8001a9a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	f04f 0400 	mov.w	r4, #0
 8001aa6:	0194      	lsls	r4, r2, #6
 8001aa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aac:	018b      	lsls	r3, r1, #6
 8001aae:	1a5b      	subs	r3, r3, r1
 8001ab0:	eb64 0402 	sbc.w	r4, r4, r2
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	00e2      	lsls	r2, r4, #3
 8001abe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac2:	00d9      	lsls	r1, r3, #3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	195b      	adds	r3, r3, r5
 8001aca:	eb44 0406 	adc.w	r4, r4, r6
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	02a2      	lsls	r2, r4, #10
 8001ad8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001adc:	0299      	lsls	r1, r3, #10
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f04f 0400 	mov.w	r4, #0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	f7fe fb6e 	bl	80001d0 <__aeabi_uldivmod>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e049      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	f04f 0400 	mov.w	r4, #0
 8001b06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	ea03 0501 	and.w	r5, r3, r1
 8001b12:	ea04 0602 	and.w	r6, r4, r2
 8001b16:	4629      	mov	r1, r5
 8001b18:	4632      	mov	r2, r6
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f04f 0400 	mov.w	r4, #0
 8001b22:	0154      	lsls	r4, r2, #5
 8001b24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b28:	014b      	lsls	r3, r1, #5
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	1b49      	subs	r1, r1, r5
 8001b30:	eb62 0206 	sbc.w	r2, r2, r6
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f04f 0400 	mov.w	r4, #0
 8001b3c:	0194      	lsls	r4, r2, #6
 8001b3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b42:	018b      	lsls	r3, r1, #6
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	eb64 0402 	sbc.w	r4, r4, r2
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	00e2      	lsls	r2, r4, #3
 8001b54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b58:	00d9      	lsls	r1, r3, #3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	195b      	adds	r3, r3, r5
 8001b60:	eb44 0406 	adc.w	r4, r4, r6
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	02a2      	lsls	r2, r4, #10
 8001b6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b72:	0299      	lsls	r1, r3, #10
 8001b74:	460b      	mov	r3, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	461a      	mov	r2, r3
 8001b84:	4623      	mov	r3, r4
 8001b86:	f7fe fb23 	bl	80001d0 <__aeabi_uldivmod>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	60bb      	str	r3, [r7, #8]
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bae:	60bb      	str	r3, [r7, #8]
      break;
 8001bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	00f42400 	.word	0x00f42400

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be4:	4601      	mov	r1, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	080060dc 	.word	0x080060dc

08001c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220f      	movs	r2, #15
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCC_GetClockConfig+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e056      	b.n	8001d28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7fe ff15 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	ea42 0103 	orr.w	r1, r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	f003 0104 	and.w	r1, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_SPI_TransmitReceive+0x26>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e18a      	b.n	800206c <HAL_SPI_TransmitReceive+0x33c>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d5e:	f7ff f849 	bl	8000df4 <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d00f      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x70>
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d86:	d107      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d103      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x68>
 8001d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d003      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d9e:	e15b      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_SPI_TransmitReceive+0x82>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_SPI_TransmitReceive+0x82>
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001db8:	e14e      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d003      	beq.n	8001dce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2205      	movs	r2, #5
 8001dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d007      	beq.n	8001e22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e2a:	d178      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_SPI_TransmitReceive+0x10a>
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d166      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	881a      	ldrh	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	1c9a      	adds	r2, r3, #2
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5e:	e053      	b.n	8001f08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x176>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_SPI_TransmitReceive+0x176>
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d113      	bne.n	8001ea6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	881a      	ldrh	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	1c9a      	adds	r2, r3, #2
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d119      	bne.n	8001ee8 <HAL_SPI_TransmitReceive+0x1b8>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	1c9a      	adds	r2, r3, #2
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ee8:	f7fe ff84 	bl	8000df4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d807      	bhi.n	8001f08 <HAL_SPI_TransmitReceive+0x1d8>
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d003      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f06:	e0a7      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1a6      	bne.n	8001e60 <HAL_SPI_TransmitReceive+0x130>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1a1      	bne.n	8001e60 <HAL_SPI_TransmitReceive+0x130>
 8001f1c:	e07c      	b.n	8002018 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x1fc>
 8001f26:	8b7b      	ldrh	r3, [r7, #26]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d16b      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f52:	e057      	b.n	8002004 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d11c      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x26c>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d017      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x26c>
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d114      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d119      	bne.n	8001fde <HAL_SPI_TransmitReceive+0x2ae>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d014      	beq.n	8001fde <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fde:	f7fe ff09 	bl	8000df4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d803      	bhi.n	8001ff6 <HAL_SPI_TransmitReceive+0x2c6>
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d102      	bne.n	8001ffc <HAL_SPI_TransmitReceive+0x2cc>
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002002:	e029      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1a2      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x224>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d19d      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f893 	bl	8002148 <SPI_EndRxTxTransaction>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002034:	e010      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	e000      	b.n	8002058 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800206c:	4618      	mov	r0, r3
 800206e:	3730      	adds	r7, #48	; 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002084:	e04c      	b.n	8002120 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d048      	beq.n	8002120 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800208e:	f7fe feb1 	bl	8000df4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d902      	bls.n	80020a4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d13d      	bne.n	8002120 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020bc:	d111      	bne.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c6:	d004      	beq.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d107      	bne.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ea:	d10f      	bne.n	800210c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e00f      	b.n	8002140 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	429a      	cmp	r2, r3
 800213c:	d1a3      	bne.n	8002086 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <SPI_EndRxTxTransaction+0x7c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <SPI_EndRxTxTransaction+0x80>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0d5b      	lsrs	r3, r3, #21
 8002160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002172:	d112      	bne.n	800219a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff ff78 	bl	8002074 <SPI_WaitFlagStateUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e00f      	b.n	80021ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d0f2      	beq.n	800219a <SPI_EndRxTxTransaction+0x52>
 80021b4:	e000      	b.n	80021b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80021b6:	bf00      	nop
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000
 80021c8:	165e9f81 	.word	0x165e9f81

080021cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e01d      	b.n	800221a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fcae 	bl	8000b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fba6 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d007      	beq.n	800225c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01d      	b.n	80022b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f815 	bl	80022c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f000 fb57 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	6839      	ldr	r1, [r7, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fe22 	bl	8002f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_TIM_PWM_Start+0x74>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_TIM_PWM_Start+0x2c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_TIM_PWM_Start+0x78>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_PWM_Start+0x30>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_TIM_PWM_Start+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d007      	beq.n	800233c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fde4 	bl	8002f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_TIM_PWM_Stop+0xa8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_PWM_Stop+0x2c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_TIM_PWM_Stop+0xac>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_TIM_PWM_Stop+0x30>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_TIM_PWM_Stop+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d017      	beq.n	80023b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_TIM_PWM_Stop+0x66>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	f240 4344 	movw	r3, #1092	; 0x444
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_TIM_PWM_Stop+0x66>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_TIM_PWM_Stop+0x96>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	f240 4344 	movw	r3, #1092	; 0x444
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_PWM_Stop+0x96>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0202 	mvn.w	r2, #2
 800242c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa6b 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa5d 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fa6e 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0204 	mvn.w	r2, #4
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa41 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa33 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa44 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0208 	mvn.w	r2, #8
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa17 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa09 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa1a 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0210 	mvn.w	r2, #16
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2208      	movs	r2, #8
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9ed 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f9df 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f9f0 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0201 	mvn.w	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fa5a 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fd6c 	bl	8003088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9b5 	bl	8002946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0220 	mvn.w	r2, #32
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fd36 	bl	8003074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002626:	2302      	movs	r3, #2
 8002628:	e0b4      	b.n	8002794 <HAL_TIM_PWM_ConfigChannel+0x184>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	f200 809f 	bhi.w	8002780 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800267d 	.word	0x0800267d
 800264c:	08002781 	.word	0x08002781
 8002650:	08002781 	.word	0x08002781
 8002654:	08002781 	.word	0x08002781
 8002658:	080026bd 	.word	0x080026bd
 800265c:	08002781 	.word	0x08002781
 8002660:	08002781 	.word	0x08002781
 8002664:	08002781 	.word	0x08002781
 8002668:	080026ff 	.word	0x080026ff
 800266c:	08002781 	.word	0x08002781
 8002670:	08002781 	.word	0x08002781
 8002674:	08002781 	.word	0x08002781
 8002678:	0800273f 	.word	0x0800273f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fa0a 	bl	8002a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0208 	orr.w	r2, r2, #8
 8002696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	619a      	str	r2, [r3, #24]
      break;
 80026ba:	e062      	b.n	8002782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fa5a 	bl	8002b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6999      	ldr	r1, [r3, #24]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	021a      	lsls	r2, r3, #8
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	619a      	str	r2, [r3, #24]
      break;
 80026fc:	e041      	b.n	8002782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 faaf 	bl	8002c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0208 	orr.w	r2, r2, #8
 8002718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0204 	bic.w	r2, r2, #4
 8002728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	61da      	str	r2, [r3, #28]
      break;
 800273c:	e021      	b.n	8002782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fb03 	bl	8002d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69d9      	ldr	r1, [r3, #28]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	61da      	str	r2, [r3, #28]
      break;
 800277e:	e000      	b.n	8002782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002780:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_ConfigClockSource+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0a6      	b.n	8002902 <HAL_TIM_ConfigClockSource+0x166>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d067      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0x120>
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d80b      	bhi.n	8002808 <HAL_TIM_ConfigClockSource+0x6c>
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d073      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x140>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d802      	bhi.n	80027fe <HAL_TIM_ConfigClockSource+0x62>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d06f      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80027fc:	e078      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d06c      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x140>
 8002802:	2b30      	cmp	r3, #48	; 0x30
 8002804:	d06a      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002806:	e073      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d00d      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0x8c>
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d804      	bhi.n	800281a <HAL_TIM_ConfigClockSource+0x7e>
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d033      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xe0>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d041      	beq.n	800289c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002818:	e06a      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d066      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x152>
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d017      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002826:	e063      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f000 fb5a 	bl	8002ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800284a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	609a      	str	r2, [r3, #8]
      break;
 8002854:	e04c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6899      	ldr	r1, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f000 fb43 	bl	8002ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002878:	609a      	str	r2, [r3, #8]
      break;
 800287a:	e039      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	461a      	mov	r2, r3
 800288a:	f000 fab7 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2150      	movs	r1, #80	; 0x50
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fb10 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 800289a:	e029      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fad6 	bl	8002e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2160      	movs	r1, #96	; 0x60
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fb00 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80028ba:	e019      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f000 fa97 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 faf0 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80028da:	e009      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fae7 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80028ec:	e000      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d00f      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3d      	ldr	r2, [pc, #244]	; (8002a74 <TIM_Base_SetConfig+0x118>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <TIM_Base_SetConfig+0x11c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <TIM_Base_SetConfig+0x120>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2f      	ldr	r2, [pc, #188]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d027      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <TIM_Base_SetConfig+0x118>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d023      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <TIM_Base_SetConfig+0x11c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <TIM_Base_SetConfig+0x120>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d017      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <TIM_Base_SetConfig+0x128>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <TIM_Base_SetConfig+0x12c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00f      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <TIM_Base_SetConfig+0x130>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <TIM_Base_SetConfig+0x134>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <TIM_Base_SetConfig+0x138>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <TIM_Base_SetConfig+0x13c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <TIM_Base_SetConfig+0x114>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <TIM_Base_SetConfig+0x124>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40010400 	.word	0x40010400
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800
 8002a90:	40001800 	.word	0x40001800
 8002a94:	40001c00 	.word	0x40001c00
 8002a98:	40002000 	.word	0x40002000

08002a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0201 	bic.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0302 	bic.w	r3, r3, #2
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <TIM_OC1_SetConfig+0xd8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_OC1_SetConfig+0x64>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <TIM_OC1_SetConfig+0xdc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0308 	bic.w	r3, r3, #8
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <TIM_OC1_SetConfig+0xd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_OC1_SetConfig+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <TIM_OC1_SetConfig+0xdc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	621a      	str	r2, [r3, #32]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40010400 	.word	0x40010400

08002b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0210 	bic.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0320 	bic.w	r3, r3, #32
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <TIM_OC2_SetConfig+0xe4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_OC2_SetConfig+0x68>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <TIM_OC2_SetConfig+0xe8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10d      	bne.n	8002c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <TIM_OC2_SetConfig+0xe4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC2_SetConfig+0x94>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <TIM_OC2_SetConfig+0xe8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d113      	bne.n	8002c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <TIM_OC3_SetConfig+0xe0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC3_SetConfig+0x66>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <TIM_OC3_SetConfig+0xe4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <TIM_OC3_SetConfig+0xe0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_OC3_SetConfig+0x92>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <TIM_OC3_SetConfig+0xe4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d113      	bne.n	8002d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	621a      	str	r2, [r3, #32]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010400 	.word	0x40010400

08002d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <TIM_OC4_SetConfig+0xa4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_OC4_SetConfig+0x68>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <TIM_OC4_SetConfig+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d109      	bne.n	8002dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010400 	.word	0x40010400

08002dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 030a 	bic.w	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0210 	bic.w	r2, r3, #16
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	031b      	lsls	r3, r3, #12
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	621a      	str	r2, [r3, #32]
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f043 0307 	orr.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e05a      	b.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d01d      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a15      	ldr	r2, [pc, #84]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40001800 	.word	0x40001800

08003074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030b2:	f3ef 8305 	mrs	r3, IPSR
 80030b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	607b      	str	r3, [r7, #4]
  return(result);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ca:	f3ef 8311 	mrs	r3, BASEPRI
 80030ce:	603b      	str	r3, [r7, #0]
  return(result);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <osKernelInitialize+0x3a>
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <osKernelInitialize+0x64>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d103      	bne.n	80030e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030de:	f06f 0305 	mvn.w	r3, #5
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e00c      	b.n	8003100 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <osKernelInitialize+0x64>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <osKernelInitialize+0x64>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e002      	b.n	8003100 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000034 	.word	0x20000034

08003114 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800311a:	f3ef 8305 	mrs	r3, IPSR
 800311e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003120:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003126:	f3ef 8310 	mrs	r3, PRIMASK
 800312a:	607b      	str	r3, [r7, #4]
  return(result);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003132:	f3ef 8311 	mrs	r3, BASEPRI
 8003136:	603b      	str	r3, [r7, #0]
  return(result);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <osKernelStart+0x3a>
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <osKernelStart+0x68>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d103      	bne.n	800314e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003146:	f06f 0305 	mvn.w	r3, #5
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e010      	b.n	8003170 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <osKernelStart+0x68>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d109      	bne.n	800316a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003156:	f7ff ffa1 	bl	800309c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <osKernelStart+0x68>)
 800315c:	2202      	movs	r2, #2
 800315e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003160:	f001 fa9a 	bl	8004698 <vTaskStartScheduler>
      stat = osOK;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e002      	b.n	8003170 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003170:	68fb      	ldr	r3, [r7, #12]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000034 	.word	0x20000034

08003180 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b090      	sub	sp, #64	; 0x40
 8003184:	af04      	add	r7, sp, #16
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003190:	f3ef 8305 	mrs	r3, IPSR
 8003194:	61fb      	str	r3, [r7, #28]
  return(result);
 8003196:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 808f 	bne.w	80032bc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031aa:	f3ef 8311 	mrs	r3, BASEPRI
 80031ae:	617b      	str	r3, [r7, #20]
  return(result);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <osThreadNew+0x3e>
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <osThreadNew+0x148>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d07e      	beq.n	80032bc <osThreadNew+0x13c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d07b      	beq.n	80032bc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80031c8:	2318      	movs	r3, #24
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d045      	beq.n	8003268 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <osThreadNew+0x6a>
        name = attr->name;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <osThreadNew+0x90>
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b38      	cmp	r3, #56	; 0x38
 8003202:	d805      	bhi.n	8003210 <osThreadNew+0x90>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <osThreadNew+0x94>
        return (NULL);
 8003210:	2300      	movs	r3, #0
 8003212:	e054      	b.n	80032be <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <osThreadNew+0xca>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b5b      	cmp	r3, #91	; 0x5b
 8003232:	d90a      	bls.n	800324a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <osThreadNew+0xca>
        mem = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	623b      	str	r3, [r7, #32]
 8003248:	e010      	b.n	800326c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <osThreadNew+0xec>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <osThreadNew+0xec>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <osThreadNew+0xec>
          mem = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	e001      	b.n	800326c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d110      	bne.n	8003294 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800327a:	9202      	str	r2, [sp, #8]
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f001 f833 	bl	80042f4 <xTaskCreateStatic>
 800328e:	4603      	mov	r3, r0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e013      	b.n	80032bc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d110      	bne.n	80032bc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	b29a      	uxth	r2, r3
 800329e:	f107 0310 	add.w	r3, r7, #16
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f001 f87b 	bl	80043a8 <xTaskCreate>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <osThreadNew+0x13c>
          hTask = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032bc:	693b      	ldr	r3, [r7, #16]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3730      	adds	r7, #48	; 0x30
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000034 	.word	0x20000034

080032cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d4:	f3ef 8305 	mrs	r3, IPSR
 80032d8:	613b      	str	r3, [r7, #16]
  return(result);
 80032da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e0:	f3ef 8310 	mrs	r3, PRIMASK
 80032e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032ec:	f3ef 8311 	mrs	r3, BASEPRI
 80032f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <osDelay+0x3c>
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <osDelay+0x58>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d103      	bne.n	8003308 <osDelay+0x3c>
    stat = osErrorISR;
 8003300:	f06f 0305 	mvn.w	r3, #5
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e007      	b.n	8003318 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f001 f98c 	bl	8004630 <vTaskDelay>
    }
  }

  return (stat);
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000034 	.word	0x20000034

08003328 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003338:	f3ef 8305 	mrs	r3, IPSR
 800333c:	61bb      	str	r3, [r7, #24]
  return(result);
 800333e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003340:	2b00      	cmp	r3, #0
 8003342:	d170      	bne.n	8003426 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	617b      	str	r3, [r7, #20]
  return(result);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003350:	f3ef 8311 	mrs	r3, BASEPRI
 8003354:	613b      	str	r3, [r7, #16]
  return(result);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <osMessageQueueNew+0x3c>
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <osMessageQueueNew+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d060      	beq.n	8003426 <osMessageQueueNew+0xfe>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d05d      	beq.n	8003426 <osMessageQueueNew+0xfe>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05a      	beq.n	8003426 <osMessageQueueNew+0xfe>
    mem = -1;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d029      	beq.n	80033d0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <osMessageQueueNew+0x82>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b4f      	cmp	r3, #79	; 0x4f
 800338a:	d90e      	bls.n	80033aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d302      	bcc.n	80033aa <osMessageQueueNew+0x82>
        mem = 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	e014      	b.n	80033d4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d110      	bne.n	80033d4 <osMessageQueueNew+0xac>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d108      	bne.n	80033d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <osMessageQueueNew+0xac>
          mem = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
 80033ce:	e001      	b.n	80033d4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10c      	bne.n	80033f4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	460b      	mov	r3, r1
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa58 	bl	80038a0 <xQueueGenericCreateStatic>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24
 80033f2:	e008      	b.n	8003406 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80033fa:	2200      	movs	r2, #0
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fac1 	bl	8003986 <xQueueGenericCreate>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <osMessageQueueNew+0xf2>
        name = attr->name;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	e001      	b.n	800341e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800341e:	69f9      	ldr	r1, [r7, #28]
 8003420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003422:	f000 ff0b 	bl	800423c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000034 	.word	0x20000034

08003434 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800344c:	f3ef 8305 	mrs	r3, IPSR
 8003450:	61fb      	str	r3, [r7, #28]
  return(result);
 8003452:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10f      	bne.n	8003478 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	61bb      	str	r3, [r7, #24]
  return(result);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003464:	f3ef 8311 	mrs	r3, BASEPRI
 8003468:	617b      	str	r3, [r7, #20]
  return(result);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02c      	beq.n	80034ca <osMessageQueuePut+0x96>
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <osMessageQueuePut+0xe0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d128      	bne.n	80034ca <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <osMessageQueuePut+0x56>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <osMessageQueuePut+0x56>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800348a:	f06f 0303 	mvn.w	r3, #3
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003490:	e039      	b.n	8003506 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003496:	f107 0210 	add.w	r2, r7, #16
 800349a:	2300      	movs	r3, #0
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	6a38      	ldr	r0, [r7, #32]
 80034a0:	f000 fbce 	bl	8003c40 <xQueueGenericSendFromISR>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d003      	beq.n	80034b2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80034aa:	f06f 0302 	mvn.w	r3, #2
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034b0:	e029      	b.n	8003506 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d026      	beq.n	8003506 <osMessageQueuePut+0xd2>
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <osMessageQueuePut+0xe4>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034c8:	e01d      	b.n	8003506 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <osMessageQueuePut+0xa2>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80034d6:	f06f 0303 	mvn.w	r3, #3
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e014      	b.n	8003508 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80034de:	2300      	movs	r3, #0
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	6a38      	ldr	r0, [r7, #32]
 80034e6:	f000 fab1 	bl	8003a4c <xQueueGenericSend>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d00b      	beq.n	8003508 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80034f6:	f06f 0301 	mvn.w	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	e004      	b.n	8003508 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80034fe:	f06f 0302 	mvn.w	r3, #2
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e000      	b.n	8003508 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003506:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800350a:	4618      	mov	r0, r3
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000034 	.word	0x20000034
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003532:	f3ef 8305 	mrs	r3, IPSR
 8003536:	61fb      	str	r3, [r7, #28]
  return(result);
 8003538:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	61bb      	str	r3, [r7, #24]
  return(result);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800354a:	f3ef 8311 	mrs	r3, BASEPRI
 800354e:	617b      	str	r3, [r7, #20]
  return(result);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02c      	beq.n	80035b0 <osMessageQueueGet+0x94>
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <osMessageQueueGet+0xdc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d128      	bne.n	80035b0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <osMessageQueueGet+0x54>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <osMessageQueueGet+0x54>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003570:	f06f 0303 	mvn.w	r3, #3
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003576:	e038      	b.n	80035ea <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	461a      	mov	r2, r3
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f000 fccb 	bl	8003f20 <xQueueReceiveFromISR>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d003      	beq.n	8003598 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003590:	f06f 0302 	mvn.w	r3, #2
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003596:	e028      	b.n	80035ea <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d025      	beq.n	80035ea <osMessageQueueGet+0xce>
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <osMessageQueueGet+0xe0>)
 80035a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035ae:	e01c      	b.n	80035ea <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <osMessageQueueGet+0xa0>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80035bc:	f06f 0303 	mvn.w	r3, #3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e013      	b.n	80035ec <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	6a38      	ldr	r0, [r7, #32]
 80035ca:	f000 fbcd 	bl	8003d68 <xQueueReceive>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d00b      	beq.n	80035ec <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80035da:	f06f 0301 	mvn.w	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	e004      	b.n	80035ec <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80035e2:	f06f 0302 	mvn.w	r3, #2
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e000      	b.n	80035ec <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035ea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3728      	adds	r7, #40	; 0x28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000034 	.word	0x20000034
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <vApplicationGetIdleTaskMemory+0x2c>)
 8003610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <vApplicationGetIdleTaskMemory+0x30>)
 8003616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000038 	.word	0x20000038
 8003630:	20000094 	.word	0x20000094

08003634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <vApplicationGetTimerTaskMemory+0x2c>)
 8003644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <vApplicationGetTimerTaskMemory+0x30>)
 800364a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	20000294 	.word	0x20000294
 8003664:	200002f0 	.word	0x200002f0

08003668 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f103 0208 	add.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f103 0208 	add.w	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0208 	add.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d103      	bne.n	800372a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e00c      	b.n	8003744 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3308      	adds	r3, #8
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e002      	b.n	8003738 <vListInsert+0x2e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d2f6      	bcs.n	8003732 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d103      	bne.n	80037b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037f8:	f002 f8d0 	bl	800599c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	3b01      	subs	r3, #1
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	22ff      	movs	r2, #255	; 0xff
 8003844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d114      	bne.n	8003878 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01a      	beq.n	800388c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3310      	adds	r3, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f99c 	bl	8004b98 <xTaskRemoveFromEventList>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <xQueueGenericReset+0xcc>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	e009      	b.n	800388c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3310      	adds	r3, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fef3 	bl	8003668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff feee 	bl	8003668 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800388c:	f002 f8b4 	bl	80059f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <xQueueGenericCreateStatic+0x28>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	e7fe      	b.n	80038c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <xQueueGenericCreateStatic+0x42>
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	e7fe      	b.n	80038e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <xQueueGenericCreateStatic+0x4e>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <xQueueGenericCreateStatic+0x52>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericCreateStatic+0x54>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <xQueueGenericCreateStatic+0x6c>
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	e7fe      	b.n	800390a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <xQueueGenericCreateStatic+0x78>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <xQueueGenericCreateStatic+0x7c>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <xQueueGenericCreateStatic+0x7e>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <xQueueGenericCreateStatic+0x96>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e7fe      	b.n	8003934 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003936:	2350      	movs	r3, #80	; 0x50
 8003938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d009      	beq.n	8003954 <xQueueGenericCreateStatic+0xb4>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e7fe      	b.n	8003952 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003954:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003968:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f844 	bl	8003a04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800397e:	4618      	mov	r0, r3
 8003980:	3730      	adds	r7, #48	; 0x30
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08a      	sub	sp, #40	; 0x28
 800398a:	af02      	add	r7, sp, #8
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	4613      	mov	r3, r2
 8003992:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <xQueueGenericCreate+0x28>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e004      	b.n	80039c4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3350      	adds	r3, #80	; 0x50
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f901 	bl	8005bd0 <pvPortMalloc>
 80039ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d011      	beq.n	80039fa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3350      	adds	r3, #80	; 0x50
 80039de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f805 	bl	8003a04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039fa:	69bb      	ldr	r3, [r7, #24]
	}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a32:	2101      	movs	r1, #1
 8003a34:	69b8      	ldr	r0, [r7, #24]
 8003a36:	f7ff fecb 	bl	80037d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	; 0x38
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <xQueueGenericSend+0x30>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	e7fe      	b.n	8003a7a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <xQueueGenericSend+0x3e>
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <xQueueGenericSend+0x42>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <xQueueGenericSend+0x44>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <xQueueGenericSend+0x5c>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d103      	bne.n	8003ab6 <xQueueGenericSend+0x6a>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <xQueueGenericSend+0x6e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <xQueueGenericSend+0x70>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <xQueueGenericSend+0x88>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad4:	f001 fa16 	bl	8004f04 <xTaskGetSchedulerState>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <xQueueGenericSend+0x98>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <xQueueGenericSend+0x9c>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <xQueueGenericSend+0x9e>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <xQueueGenericSend+0xb6>
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b02:	f001 ff4b 	bl	800599c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <xQueueGenericSend+0xcc>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d129      	bne.n	8003b6c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1e:	f000 fa7c 	bl	800401a <prvCopyDataToQueue>
 8003b22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	3324      	adds	r3, #36	; 0x24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 f831 	bl	8004b98 <xTaskRemoveFromEventList>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <xQueueGenericSend+0x1f0>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	e00a      	b.n	8003b64 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <xQueueGenericSend+0x1f0>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b64:	f001 ff48 	bl	80059f8 <vPortExitCritical>
				return pdPASS;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e063      	b.n	8003c34 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b72:	f001 ff41 	bl	80059f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e05c      	b.n	8003c34 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 f869 	bl	8004c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b8e:	f001 ff33 	bl	80059f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b92:	f000 fde5 	bl	8004760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b96:	f001 ff01 	bl	800599c <vPortEnterCritical>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d103      	bne.n	8003bb0 <xQueueGenericSend+0x164>
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d103      	bne.n	8003bc6 <xQueueGenericSend+0x17a>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc6:	f001 ff17 	bl	80059f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bca:	1d3a      	adds	r2, r7, #4
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 f858 	bl	8004c88 <xTaskCheckForTimeOut>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d124      	bne.n	8003c28 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be0:	f000 fb13 	bl	800420a <prvIsQueueFull>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	3310      	adds	r3, #16
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ff82 	bl	8004afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfa:	f000 fa9e 	bl	800413a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bfe:	f000 fdbd 	bl	800477c <xTaskResumeAll>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f47f af7c 	bne.w	8003b02 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <xQueueGenericSend+0x1f0>)
 8003c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	e772      	b.n	8003b02 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1e:	f000 fa8c 	bl	800413a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c22:	f000 fdab 	bl	800477c <xTaskResumeAll>
 8003c26:	e76c      	b.n	8003b02 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2a:	f000 fa86 	bl	800413a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c2e:	f000 fda5 	bl	800477c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3738      	adds	r7, #56	; 0x38
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	; 0x38
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <xQueueGenericSendFromISR+0x2c>
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e7fe      	b.n	8003c6a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <xQueueGenericSendFromISR+0x3a>
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <xQueueGenericSendFromISR+0x3e>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueGenericSendFromISR+0x40>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <xQueueGenericSendFromISR+0x58>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	e7fe      	b.n	8003c96 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d103      	bne.n	8003ca6 <xQueueGenericSendFromISR+0x66>
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <xQueueGenericSendFromISR+0x6a>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueGenericSendFromISR+0x6c>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <xQueueGenericSendFromISR+0x84>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cc4:	f001 ff46 	bl	8005b54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cc8:	f3ef 8211 	mrs	r2, BASEPRI
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61ba      	str	r2, [r7, #24]
 8003cde:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <xQueueGenericSendFromISR+0xb6>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d12c      	bne.n	8003d50 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d06:	f000 f988 	bl	800401a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d112      	bne.n	8003d3a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff39 	bl	8004b98 <xTaskRemoveFromEventList>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e007      	b.n	8003d4a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	b25a      	sxtb	r2, r3
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d4e:	e001      	b.n	8003d54 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3738      	adds	r7, #56	; 0x38
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <xQueueReceive+0x2e>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	e7fe      	b.n	8003d94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <xQueueReceive+0x3c>
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <xQueueReceive+0x40>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <xQueueReceive+0x42>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <xQueueReceive+0x5a>
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc2:	f001 f89f 	bl	8004f04 <xTaskGetSchedulerState>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <xQueueReceive+0x6a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <xQueueReceive+0x6e>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueReceive+0x70>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <xQueueReceive+0x88>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	e7fe      	b.n	8003dee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df0:	f001 fdd4 	bl	800599c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01f      	beq.n	8003e40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e04:	f000 f973 	bl	80040ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00f      	beq.n	8003e38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 febb 	bl	8004b98 <xTaskRemoveFromEventList>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e28:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <xQueueReceive+0x1b4>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e38:	f001 fdde 	bl	80059f8 <vPortExitCritical>
				return pdPASS;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e069      	b.n	8003f14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e46:	f001 fdd7 	bl	80059f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e062      	b.n	8003f14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 feff 	bl	8004c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e62:	f001 fdc9 	bl	80059f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e66:	f000 fc7b 	bl	8004760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e6a:	f001 fd97 	bl	800599c <vPortEnterCritical>
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d103      	bne.n	8003e84 <xQueueReceive+0x11c>
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d103      	bne.n	8003e9a <xQueueReceive+0x132>
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9a:	f001 fdad 	bl	80059f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e9e:	1d3a      	adds	r2, r7, #4
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 feee 	bl	8004c88 <xTaskCheckForTimeOut>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d123      	bne.n	8003efa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb4:	f000 f993 	bl	80041de <prvIsQueueEmpty>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fe18 	bl	8004afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ece:	f000 f934 	bl	800413a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed2:	f000 fc53 	bl	800477c <xTaskResumeAll>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d189      	bne.n	8003df0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <xQueueReceive+0x1b4>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	e780      	b.n	8003df0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef0:	f000 f923 	bl	800413a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef4:	f000 fc42 	bl	800477c <xTaskResumeAll>
 8003ef8:	e77a      	b.n	8003df0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efc:	f000 f91d 	bl	800413a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f00:	f000 fc3c 	bl	800477c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f06:	f000 f96a 	bl	80041de <prvIsQueueEmpty>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f43f af6f 	beq.w	8003df0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3730      	adds	r7, #48	; 0x30
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <xQueueReceiveFromISR+0x2a>
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	e7fe      	b.n	8003f48 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <xQueueReceiveFromISR+0x38>
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <xQueueReceiveFromISR+0x3c>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <xQueueReceiveFromISR+0x3e>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <xQueueReceiveFromISR+0x56>
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e7fe      	b.n	8003f74 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f76:	f001 fded 	bl	8005b54 <vPortValidateInterruptPriority>
	__asm volatile
 8003f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	61ba      	str	r2, [r7, #24]
 8003f90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02f      	beq.n	8004002 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb0:	f000 f89d 	bl	80040ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d112      	bne.n	8003fec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fde0 	bl	8004b98 <xTaskRemoveFromEventList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e007      	b.n	8003ffc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	b25a      	sxtb	r2, r3
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8004000:	e001      	b.n	8004006 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	613b      	str	r3, [r7, #16]
	__asm volatile
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	; 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10d      	bne.n	8004054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d14d      	bne.n	80040dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ff7b 	bl	8004f40 <xTaskPriorityDisinherit>
 800404a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e043      	b.n	80040dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d119      	bne.n	800408e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6858      	ldr	r0, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	461a      	mov	r2, r3
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	f001 ffad 	bl	8005fc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	441a      	add	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d32b      	bcc.n	80040dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	e026      	b.n	80040dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68d8      	ldr	r0, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	461a      	mov	r2, r3
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	f001 ff93 	bl	8005fc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	425b      	negs	r3, r3
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d207      	bcs.n	80040ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	425b      	negs	r3, r3
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d105      	bne.n	80040dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3b01      	subs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040e4:	697b      	ldr	r3, [r7, #20]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d018      	beq.n	8004132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d303      	bcc.n	8004122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68d9      	ldr	r1, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	461a      	mov	r2, r3
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f001 ff49 	bl	8005fc4 <memcpy>
	}
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004142:	f001 fc2b 	bl	800599c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800414e:	e011      	b.n	8004174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd1b 	bl	8004b98 <xTaskRemoveFromEventList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004168:	f000 fdee 	bl	8004d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3b01      	subs	r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	dce9      	bgt.n	8004150 <prvUnlockQueue+0x16>
 800417c:	e000      	b.n	8004180 <prvUnlockQueue+0x46>
					break;
 800417e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004188:	f001 fc36 	bl	80059f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800418c:	f001 fc06 	bl	800599c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004198:	e011      	b.n	80041be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3310      	adds	r3, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fcf6 	bl	8004b98 <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041b2:	f000 fdc9 	bl	8004d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b6:	7bbb      	ldrb	r3, [r7, #14]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	dce9      	bgt.n	800419a <prvUnlockQueue+0x60>
 80041c6:	e000      	b.n	80041ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041d2:	f001 fc11 	bl	80059f8 <vPortExitCritical>
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e6:	f001 fbd9 	bl	800599c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e001      	b.n	80041fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fc:	f001 fbfc 	bl	80059f8 <vPortExitCritical>

	return xReturn;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004212:	f001 fbc3 	bl	800599c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	429a      	cmp	r2, r3
 8004220:	d102      	bne.n	8004228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e001      	b.n	800422c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422c:	f001 fbe4 	bl	80059f8 <vPortExitCritical>

	return xReturn;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e014      	b.n	8004276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <vQueueAddToRegistry+0x4c>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004258:	490b      	ldr	r1, [pc, #44]	; (8004288 <vQueueAddToRegistry+0x4c>)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <vQueueAddToRegistry+0x4c>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800426e:	e005      	b.n	800427c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b07      	cmp	r3, #7
 800427a:	d9e7      	bls.n	800424c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20004a6c 	.word	0x20004a6c

0800428c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800429c:	f001 fb7e 	bl	800599c <vPortEnterCritical>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d103      	bne.n	80042b6 <vQueueWaitForMessageRestricted+0x2a>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <vQueueWaitForMessageRestricted+0x40>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042cc:	f001 fb94 	bl	80059f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fc2f 	bl	8004b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042e6:	6978      	ldr	r0, [r7, #20]
 80042e8:	f7ff ff27 	bl	800413a <prvUnlockQueue>
	}
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	; 0x38
 80042f8:	af04      	add	r7, sp, #16
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xTaskCreateStatic+0x28>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e7fe      	b.n	800431a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <xTaskCreateStatic+0x42>
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e7fe      	b.n	8004334 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004336:	235c      	movs	r3, #92	; 0x5c
 8004338:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b5c      	cmp	r3, #92	; 0x5c
 800433e:	d009      	beq.n	8004354 <xTaskCreateStatic+0x60>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e7fe      	b.n	8004352 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004354:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01e      	beq.n	800439a <xTaskCreateStatic+0xa6>
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01b      	beq.n	800439a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004374:	2300      	movs	r3, #0
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f850 	bl	8004432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004394:	f000 f8dc 	bl	8004550 <prvAddNewTaskToReadyList>
 8004398:	e001      	b.n	800439e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800439e:	697b      	ldr	r3, [r7, #20]
	}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af04      	add	r7, sp, #16
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fc07 	bl	8005bd0 <pvPortMalloc>
 80043c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043ca:	205c      	movs	r0, #92	; 0x5c
 80043cc:	f001 fc00 	bl	8005bd0 <pvPortMalloc>
 80043d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
 80043de:	e005      	b.n	80043ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043e0:	6978      	ldr	r0, [r7, #20]
 80043e2:	f001 fcb7 	bl	8005d54 <vPortFree>
 80043e6:	e001      	b.n	80043ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	2300      	movs	r3, #0
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9302      	str	r3, [sp, #8]
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f80e 	bl	8004432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004416:	69f8      	ldr	r0, [r7, #28]
 8004418:	f000 f89a 	bl	8004550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800441c:	2301      	movs	r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e002      	b.n	8004428 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004428:	69bb      	ldr	r3, [r7, #24]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	461a      	mov	r2, r3
 800444a:	21a5      	movs	r1, #165	; 0xa5
 800444c:	f001 fdc5 	bl	8005fda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800445a:	3b01      	subs	r3, #1
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f023 0307 	bic.w	r3, r3, #7
 8004468:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <prvInitialiseNewTask+0x56>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e7fe      	b.n	8004486 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01f      	beq.n	80044ce <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e012      	b.n	80044ba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	7819      	ldrb	r1, [r3, #0]
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	3334      	adds	r3, #52	; 0x34
 80044a4:	460a      	mov	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d006      	beq.n	80044c2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d9e9      	bls.n	8004494 <prvInitialiseNewTask+0x62>
 80044c0:	e000      	b.n	80044c4 <prvInitialiseNewTask+0x92>
			{
				break;
 80044c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044cc:	e003      	b.n	80044d6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	2b37      	cmp	r3, #55	; 0x37
 80044da:	d901      	bls.n	80044e0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044dc:	2337      	movs	r3, #55	; 0x37
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2200      	movs	r2, #0
 80044f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f8d6 	bl	80036a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3318      	adds	r3, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f8d1 	bl	80036a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	69b8      	ldr	r0, [r7, #24]
 8004530:	f001 f90c 	bl	800574c <pxPortInitialiseStack>
 8004534:	4602      	mov	r2, r0
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004546:	bf00      	nop
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004558:	f001 fa20 	bl	800599c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800457c:	f000 fc08 	bl	8004d90 <prvInitialiseTaskLists>
 8004580:	e00d      	b.n	800459e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d802      	bhi.n	800459e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <prvAddNewTaskToReadyList+0x74>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <prvAddNewTaskToReadyList+0xd8>)
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f871 	bl	80036c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 fa0a 	bl	80059f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <prvAddNewTaskToReadyList+0xc8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d207      	bcs.n	800460a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <prvAddNewTaskToReadyList+0xdc>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000bc4 	.word	0x20000bc4
 8004618:	200006f0 	.word	0x200006f0
 800461c:	20000bd0 	.word	0x20000bd0
 8004620:	20000be0 	.word	0x20000be0
 8004624:	20000bcc 	.word	0x20000bcc
 8004628:	200006f4 	.word	0x200006f4
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <vTaskDelay+0x60>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <vTaskDelay+0x2e>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	e7fe      	b.n	800465c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800465e:	f000 f87f 	bl	8004760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004662:	2100      	movs	r1, #0
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fcd7 	bl	8005018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466a:	f000 f887 	bl	800477c <xTaskResumeAll>
 800466e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <vTaskDelay+0x64>)
 8004678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000bec 	.word	0x20000bec
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a6:	463a      	mov	r2, r7
 80046a8:	1d39      	adds	r1, r7, #4
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe ffa6 	bl	8003600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	9202      	str	r2, [sp, #8]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	460a      	mov	r2, r1
 80046c6:	4920      	ldr	r1, [pc, #128]	; (8004748 <vTaskStartScheduler+0xb0>)
 80046c8:	4820      	ldr	r0, [pc, #128]	; (800474c <vTaskStartScheduler+0xb4>)
 80046ca:	f7ff fe13 	bl	80042f4 <xTaskCreateStatic>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <vTaskStartScheduler+0xb8>)
 80046d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d4:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <vTaskStartScheduler+0xb8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e001      	b.n	80046e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046ec:	f000 fce8 	bl	80050c0 <xTimerCreateTimerTask>
 80046f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d115      	bne.n	8004724 <vTaskStartScheduler+0x8c>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <vTaskStartScheduler+0xbc>)
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <vTaskStartScheduler+0xc0>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <vTaskStartScheduler+0xc4>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800471e:	f001 f89f 	bl	8005860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004722:	e00d      	b.n	8004740 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d109      	bne.n	8004740 <vTaskStartScheduler+0xa8>
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e7fe      	b.n	800473e <vTaskStartScheduler+0xa6>
}
 8004740:	bf00      	nop
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08006030 	.word	0x08006030
 800474c:	08004d61 	.word	0x08004d61
 8004750:	20000be8 	.word	0x20000be8
 8004754:	20000be4 	.word	0x20000be4
 8004758:	20000bd0 	.word	0x20000bd0
 800475c:	20000bc8 	.word	0x20000bc8

08004760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <vTaskSuspendAll+0x18>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	4a03      	ldr	r2, [pc, #12]	; (8004778 <vTaskSuspendAll+0x18>)
 800476c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000bec 	.word	0x20000bec

0800477c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <xTaskResumeAll+0x114>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <xTaskResumeAll+0x2a>
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	e7fe      	b.n	80047a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047a6:	f001 f8f9 	bl	800599c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047aa:	4b39      	ldr	r3, [pc, #228]	; (8004890 <xTaskResumeAll+0x114>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	4a37      	ldr	r2, [pc, #220]	; (8004890 <xTaskResumeAll+0x114>)
 80047b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b4:	4b36      	ldr	r3, [pc, #216]	; (8004890 <xTaskResumeAll+0x114>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d162      	bne.n	8004882 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <xTaskResumeAll+0x118>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d05e      	beq.n	8004882 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c4:	e02f      	b.n	8004826 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c6:	4b34      	ldr	r3, [pc, #208]	; (8004898 <xTaskResumeAll+0x11c>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3318      	adds	r3, #24
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe ffd2 	bl	800377c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3304      	adds	r3, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe ffcd 	bl	800377c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4b2d      	ldr	r3, [pc, #180]	; (800489c <xTaskResumeAll+0x120>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <xTaskResumeAll+0x7a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	4a2a      	ldr	r2, [pc, #168]	; (800489c <xTaskResumeAll+0x120>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <xTaskResumeAll+0x124>)
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7fe ff58 	bl	80036c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <xTaskResumeAll+0x128>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004820:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <xTaskResumeAll+0x12c>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004826:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <xTaskResumeAll+0x11c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1cb      	bne.n	80047c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004834:	f000 fb46 	bl	8004ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <xTaskResumeAll+0x130>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004844:	f000 f846 	bl	80048d4 <xTaskIncrementTick>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <xTaskResumeAll+0x12c>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f1      	bne.n	8004844 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <xTaskResumeAll+0x130>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <xTaskResumeAll+0x12c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <xTaskResumeAll+0x134>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004882:	f001 f8b9 	bl	80059f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004886:	68bb      	ldr	r3, [r7, #8]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000bec 	.word	0x20000bec
 8004894:	20000bc4 	.word	0x20000bc4
 8004898:	20000b84 	.word	0x20000b84
 800489c:	20000bcc 	.word	0x20000bcc
 80048a0:	200006f4 	.word	0x200006f4
 80048a4:	200006f0 	.word	0x200006f0
 80048a8:	20000bd8 	.word	0x20000bd8
 80048ac:	20000bd4 	.word	0x20000bd4
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <xTaskGetTickCount+0x1c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048c0:	687b      	ldr	r3, [r7, #4]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000bc8 	.word	0x20000bc8

080048d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048de:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <xTaskIncrementTick+0x144>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 8088 	bne.w	80049f8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048e8:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <xTaskIncrementTick+0x148>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <xTaskIncrementTick+0x148>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11f      	bne.n	800493c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80048fc:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <xTaskIncrementTick+0x14c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <xTaskIncrementTick+0x46>
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	e7fe      	b.n	8004918 <xTaskIncrementTick+0x44>
 800491a:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <xTaskIncrementTick+0x14c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3e      	ldr	r2, [pc, #248]	; (8004a20 <xTaskIncrementTick+0x14c>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4a3e      	ldr	r2, [pc, #248]	; (8004a24 <xTaskIncrementTick+0x150>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <xTaskIncrementTick+0x154>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <xTaskIncrementTick+0x154>)
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	f000 fac4 	bl	8004ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <xTaskIncrementTick+0x158>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d349      	bcc.n	80049da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004946:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <xTaskIncrementTick+0x14c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004950:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <xTaskIncrementTick+0x158>)
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	601a      	str	r2, [r3, #0]
					break;
 8004958:	e03f      	b.n	80049da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495a:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <xTaskIncrementTick+0x14c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d203      	bcs.n	800497a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <xTaskIncrementTick+0x158>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004978:	e02f      	b.n	80049da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fefc 	bl	800377c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	3318      	adds	r3, #24
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fef3 	bl	800377c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <xTaskIncrementTick+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d903      	bls.n	80049aa <xTaskIncrementTick+0xd6>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <xTaskIncrementTick+0x15c>)
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <xTaskIncrementTick+0x160>)
 80049b8:	441a      	add	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7fe fe7e 	bl	80036c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <xTaskIncrementTick+0x164>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3b8      	bcc.n	8004946 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d8:	e7b5      	b.n	8004946 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <xTaskIncrementTick+0x164>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	4914      	ldr	r1, [pc, #80]	; (8004a34 <xTaskIncrementTick+0x160>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d907      	bls.n	8004a02 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e004      	b.n	8004a02 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <xTaskIncrementTick+0x168>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <xTaskIncrementTick+0x168>)
 8004a00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <xTaskIncrementTick+0x16c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a0e:	697b      	ldr	r3, [r7, #20]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000bec 	.word	0x20000bec
 8004a1c:	20000bc8 	.word	0x20000bc8
 8004a20:	20000b7c 	.word	0x20000b7c
 8004a24:	20000b80 	.word	0x20000b80
 8004a28:	20000bdc 	.word	0x20000bdc
 8004a2c:	20000be4 	.word	0x20000be4
 8004a30:	20000bcc 	.word	0x20000bcc
 8004a34:	200006f4 	.word	0x200006f4
 8004a38:	200006f0 	.word	0x200006f0
 8004a3c:	20000bd4 	.word	0x20000bd4
 8004a40:	20000bd8 	.word	0x20000bd8

08004a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <vTaskSwitchContext+0xa4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <vTaskSwitchContext+0xa8>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a58:	e040      	b.n	8004adc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <vTaskSwitchContext+0xa8>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a60:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <vTaskSwitchContext+0xac>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e00f      	b.n	8004a88 <vTaskSwitchContext+0x44>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <vTaskSwitchContext+0x3e>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	e7fe      	b.n	8004a80 <vTaskSwitchContext+0x3c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	491a      	ldr	r1, [pc, #104]	; (8004af4 <vTaskSwitchContext+0xb0>)
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0e5      	beq.n	8004a68 <vTaskSwitchContext+0x24>
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <vTaskSwitchContext+0xb0>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3308      	adds	r3, #8
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d104      	bne.n	8004acc <vTaskSwitchContext+0x88>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <vTaskSwitchContext+0xb4>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <vTaskSwitchContext+0xac>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	20000bec 	.word	0x20000bec
 8004aec:	20000bd8 	.word	0x20000bd8
 8004af0:	20000bcc 	.word	0x20000bcc
 8004af4:	200006f4 	.word	0x200006f4
 8004af8:	200006f0 	.word	0x200006f0

08004afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <vTaskPlaceOnEventList+0x24>
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e7fe      	b.n	8004b1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <vTaskPlaceOnEventList+0x44>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3318      	adds	r3, #24
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fe fdee 	bl	800370a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b2e:	2101      	movs	r1, #1
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f000 fa71 	bl	8005018 <prvAddCurrentTaskToDelayedList>
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200006f0 	.word	0x200006f0

08004b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <vTaskPlaceOnEventListRestricted+0x26>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e7fe      	b.n	8004b68 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vTaskPlaceOnEventListRestricted+0x50>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3318      	adds	r3, #24
 8004b70:	4619      	mov	r1, r3
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7fe fda5 	bl	80036c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	68b8      	ldr	r0, [r7, #8]
 8004b88:	f000 fa46 	bl	8005018 <prvAddCurrentTaskToDelayedList>
	}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	200006f0 	.word	0x200006f0

08004b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <xTaskRemoveFromEventList+0x2a>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fdd8 	bl	800377c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <xTaskRemoveFromEventList+0xac>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11d      	bne.n	8004c10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fdcf 	bl	800377c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <xTaskRemoveFromEventList+0xb0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d903      	bls.n	8004bf2 <xTaskRemoveFromEventList+0x5a>
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <xTaskRemoveFromEventList+0xb0>)
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <xTaskRemoveFromEventList+0xb4>)
 8004c00:	441a      	add	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe fd5a 	bl	80036c2 <vListInsertEnd>
 8004c0e:	e005      	b.n	8004c1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	3318      	adds	r3, #24
 8004c14:	4619      	mov	r1, r3
 8004c16:	480e      	ldr	r0, [pc, #56]	; (8004c50 <xTaskRemoveFromEventList+0xb8>)
 8004c18:	f7fe fd53 	bl	80036c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <xTaskRemoveFromEventList+0xbc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d905      	bls.n	8004c36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <xTaskRemoveFromEventList+0xc0>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e001      	b.n	8004c3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c3a:	697b      	ldr	r3, [r7, #20]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000bec 	.word	0x20000bec
 8004c48:	20000bcc 	.word	0x20000bcc
 8004c4c:	200006f4 	.word	0x200006f4
 8004c50:	20000b84 	.word	0x20000b84
 8004c54:	200006f0 	.word	0x200006f0
 8004c58:	20000bd8 	.word	0x20000bd8

08004c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <vTaskInternalSetTimeOutState+0x24>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <vTaskInternalSetTimeOutState+0x28>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	605a      	str	r2, [r3, #4]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000bdc 	.word	0x20000bdc
 8004c84:	20000bc8 	.word	0x20000bc8

08004c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <xTaskCheckForTimeOut+0x24>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e7fe      	b.n	8004caa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <xTaskCheckForTimeOut+0x3e>
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e7fe      	b.n	8004cc4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004cc6:	f000 fe69 	bl	800599c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <xTaskCheckForTimeOut+0xb8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d102      	bne.n	8004cea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	e023      	b.n	8004d32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <xTaskCheckForTimeOut+0xbc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d007      	beq.n	8004d06 <xTaskCheckForTimeOut+0x7e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d302      	bcc.n	8004d06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e015      	b.n	8004d32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d20b      	bcs.n	8004d28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff9d 	bl	8004c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e004      	b.n	8004d32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d32:	f000 fe61 	bl	80059f8 <vPortExitCritical>

	return xReturn;
 8004d36:	69fb      	ldr	r3, [r7, #28]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000bc8 	.word	0x20000bc8
 8004d44:	20000bdc 	.word	0x20000bdc

08004d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <vTaskMissedYield+0x14>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000bd8 	.word	0x20000bd8

08004d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d68:	f000 f852 	bl	8004e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <prvIdleTask+0x28>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d9f9      	bls.n	8004d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <prvIdleTask+0x2c>)
 8004d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d84:	e7f0      	b.n	8004d68 <prvIdleTask+0x8>
 8004d86:	bf00      	nop
 8004d88:	200006f4 	.word	0x200006f4
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	e00c      	b.n	8004db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <prvInitialiseTaskLists+0x60>)
 8004da8:	4413      	add	r3, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fc5c 	bl	8003668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3301      	adds	r3, #1
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b37      	cmp	r3, #55	; 0x37
 8004dba:	d9ef      	bls.n	8004d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dbc:	480d      	ldr	r0, [pc, #52]	; (8004df4 <prvInitialiseTaskLists+0x64>)
 8004dbe:	f7fe fc53 	bl	8003668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dc2:	480d      	ldr	r0, [pc, #52]	; (8004df8 <prvInitialiseTaskLists+0x68>)
 8004dc4:	f7fe fc50 	bl	8003668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dc8:	480c      	ldr	r0, [pc, #48]	; (8004dfc <prvInitialiseTaskLists+0x6c>)
 8004dca:	f7fe fc4d 	bl	8003668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dce:	480c      	ldr	r0, [pc, #48]	; (8004e00 <prvInitialiseTaskLists+0x70>)
 8004dd0:	f7fe fc4a 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dd4:	480b      	ldr	r0, [pc, #44]	; (8004e04 <prvInitialiseTaskLists+0x74>)
 8004dd6:	f7fe fc47 	bl	8003668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <prvInitialiseTaskLists+0x78>)
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <prvInitialiseTaskLists+0x64>)
 8004dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <prvInitialiseTaskLists+0x7c>)
 8004de2:	4a05      	ldr	r2, [pc, #20]	; (8004df8 <prvInitialiseTaskLists+0x68>)
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	200006f4 	.word	0x200006f4
 8004df4:	20000b54 	.word	0x20000b54
 8004df8:	20000b68 	.word	0x20000b68
 8004dfc:	20000b84 	.word	0x20000b84
 8004e00:	20000b98 	.word	0x20000b98
 8004e04:	20000bb0 	.word	0x20000bb0
 8004e08:	20000b7c 	.word	0x20000b7c
 8004e0c:	20000b80 	.word	0x20000b80

08004e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e16:	e019      	b.n	8004e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e18:	f000 fdc0 	bl	800599c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <prvCheckTasksWaitingTermination+0x4c>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fca7 	bl	800377c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <prvCheckTasksWaitingTermination+0x50>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <prvCheckTasksWaitingTermination+0x50>)
 8004e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <prvCheckTasksWaitingTermination+0x54>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <prvCheckTasksWaitingTermination+0x54>)
 8004e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e42:	f000 fdd9 	bl	80059f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f80e 	bl	8004e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <prvCheckTasksWaitingTermination+0x54>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e1      	bne.n	8004e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000b98 	.word	0x20000b98
 8004e60:	20000bc4 	.word	0x20000bc4
 8004e64:	20000bac 	.word	0x20000bac

08004e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ff68 	bl	8005d54 <vPortFree>
				vPortFree( pxTCB );
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 ff65 	bl	8005d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e8a:	e017      	b.n	8004ebc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d103      	bne.n	8004e9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 ff5c 	bl	8005d54 <vPortFree>
	}
 8004e9c:	e00e      	b.n	8004ebc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d009      	beq.n	8004ebc <prvDeleteTCB+0x54>
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e7fe      	b.n	8004eba <prvDeleteTCB+0x52>
	}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004edc:	e008      	b.n	8004ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	20000b7c 	.word	0x20000b7c
 8004f00:	20000be4 	.word	0x20000be4

08004f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <xTaskGetSchedulerState+0x34>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f12:	2301      	movs	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e008      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <xTaskGetSchedulerState+0x38>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f20:	2302      	movs	r3, #2
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e001      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f2a:	687b      	ldr	r3, [r7, #4]
	}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000bd0 	.word	0x20000bd0
 8004f3c:	20000bec 	.word	0x20000bec

08004f40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d054      	beq.n	8005000 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <xTaskPriorityDisinherit+0xcc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d009      	beq.n	8004f74 <xTaskPriorityDisinherit+0x34>
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e7fe      	b.n	8004f72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <xTaskPriorityDisinherit+0x50>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	e7fe      	b.n	8004f8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d02c      	beq.n	8005000 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d128      	bne.n	8005000 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fbe2 	bl	800377c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <xTaskPriorityDisinherit+0xd0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d903      	bls.n	8004fe0 <xTaskPriorityDisinherit+0xa0>
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <xTaskPriorityDisinherit+0xd0>)
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <xTaskPriorityDisinherit+0xd4>)
 8004fee:	441a      	add	r2, r3
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe fb63 	bl	80036c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005000:	697b      	ldr	r3, [r7, #20]
	}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	200006f0 	.word	0x200006f0
 8005010:	20000bcc 	.word	0x20000bcc
 8005014:	200006f4 	.word	0x200006f4

08005018 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005022:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005028:	4b20      	ldr	r3, [pc, #128]	; (80050ac <prvAddCurrentTaskToDelayedList+0x94>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fba4 	bl	800377c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d10a      	bne.n	8005052 <prvAddCurrentTaskToDelayedList+0x3a>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4819      	ldr	r0, [pc, #100]	; (80050b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800504c:	f7fe fb39 	bl	80036c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005050:	e026      	b.n	80050a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <prvAddCurrentTaskToDelayedList+0x94>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	429a      	cmp	r2, r3
 8005068:	d209      	bcs.n	800507e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe fb47 	bl	800370a <vListInsert>
}
 800507c:	e010      	b.n	80050a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fe fb3d 	bl	800370a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	d202      	bcs.n	80050a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800509a:	4a08      	ldr	r2, [pc, #32]	; (80050bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000bc8 	.word	0x20000bc8
 80050ac:	200006f0 	.word	0x200006f0
 80050b0:	20000bb0 	.word	0x20000bb0
 80050b4:	20000b80 	.word	0x20000b80
 80050b8:	20000b7c 	.word	0x20000b7c
 80050bc:	20000be4 	.word	0x20000be4

080050c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ca:	f000 faff 	bl	80056cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <xTimerCreateTimerTask+0x80>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d021      	beq.n	800511a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050de:	1d3a      	adds	r2, r7, #4
 80050e0:	f107 0108 	add.w	r1, r7, #8
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe faa3 	bl	8003634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	9202      	str	r2, [sp, #8]
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	2302      	movs	r3, #2
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	460a      	mov	r2, r1
 8005100:	4910      	ldr	r1, [pc, #64]	; (8005144 <xTimerCreateTimerTask+0x84>)
 8005102:	4811      	ldr	r0, [pc, #68]	; (8005148 <xTimerCreateTimerTask+0x88>)
 8005104:	f7ff f8f6 	bl	80042f4 <xTaskCreateStatic>
 8005108:	4602      	mov	r2, r0
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <xTimerCreateTimerTask+0x8c>)
 800510c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <xTimerCreateTimerTask+0x8c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <xTimerCreateTimerTask+0x74>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e7fe      	b.n	8005132 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000c20 	.word	0x20000c20
 8005144:	08006038 	.word	0x08006038
 8005148:	08005281 	.word	0x08005281
 800514c:	20000c24 	.word	0x20000c24

08005150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <xTimerGenericCommand+0x2c>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e7fe      	b.n	800517a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800517c:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <xTimerGenericCommand+0x94>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d02a      	beq.n	80051da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b05      	cmp	r3, #5
 8005194:	dc18      	bgt.n	80051c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005196:	f7ff feb5 	bl	8004f04 <xTaskGetSchedulerState>
 800519a:	4603      	mov	r3, r0
 800519c:	2b02      	cmp	r3, #2
 800519e:	d109      	bne.n	80051b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <xTimerGenericCommand+0x94>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	f107 0110 	add.w	r1, r7, #16
 80051a8:	2300      	movs	r3, #0
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	f7fe fc4e 	bl	8003a4c <xQueueGenericSend>
 80051b0:	6278      	str	r0, [r7, #36]	; 0x24
 80051b2:	e012      	b.n	80051da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <xTimerGenericCommand+0x94>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	f107 0110 	add.w	r1, r7, #16
 80051bc:	2300      	movs	r3, #0
 80051be:	2200      	movs	r2, #0
 80051c0:	f7fe fc44 	bl	8003a4c <xQueueGenericSend>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24
 80051c6:	e008      	b.n	80051da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <xTimerGenericCommand+0x94>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	f107 0110 	add.w	r1, r7, #16
 80051d0:	2300      	movs	r3, #0
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	f7fe fd34 	bl	8003c40 <xQueueGenericSendFromISR>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3728      	adds	r7, #40	; 0x28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000c20 	.word	0x20000c20

080051e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <prvProcessExpiredTimer+0x94>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fabb 	bl	800377c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d021      	beq.n	8005258 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	18d1      	adds	r1, r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	6978      	ldr	r0, [r7, #20]
 8005222:	f000 f8d1 	bl	80053c8 <prvInsertTimerInActiveList>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01e      	beq.n	800526a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	2100      	movs	r1, #0
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7ff ff8a 	bl	8005150 <xTimerGenericCommand>
 800523c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d112      	bne.n	800526a <prvProcessExpiredTimer+0x82>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e7fe      	b.n	8005256 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	6978      	ldr	r0, [r7, #20]
 8005270:	4798      	blx	r3
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000c18 	.word	0x20000c18

08005280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005288:	f107 0308 	add.w	r3, r7, #8
 800528c:	4618      	mov	r0, r3
 800528e:	f000 f857 	bl	8005340 <prvGetNextExpireTime>
 8005292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f803 	bl	80052a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800529e:	f000 f8d5 	bl	800544c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052a2:	e7f1      	b.n	8005288 <prvTimerTask+0x8>

080052a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ae:	f7ff fa57 	bl	8004760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f866 	bl	8005388 <prvSampleTimeNow>
 80052bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d130      	bne.n	8005326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <prvProcessTimerOrBlockTask+0x3c>
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d806      	bhi.n	80052e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052d2:	f7ff fa53 	bl	800477c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ff85 	bl	80051e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052de:	e024      	b.n	800532a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052e6:	4b13      	ldr	r3, [pc, #76]	; (8005334 <prvProcessTimerOrBlockTask+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <prvProcessTimerOrBlockTask+0x50>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <prvProcessTimerOrBlockTask+0x52>
 80052f4:	2300      	movs	r3, #0
 80052f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052f8:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <prvProcessTimerOrBlockTask+0x94>)
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	f7fe ffc1 	bl	800428c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800530a:	f7ff fa37 	bl	800477c <xTaskResumeAll>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <prvProcessTimerOrBlockTask+0x98>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
}
 8005324:	e001      	b.n	800532a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005326:	f7ff fa29 	bl	800477c <xTaskResumeAll>
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000c1c 	.word	0x20000c1c
 8005338:	20000c20 	.word	0x20000c20
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <prvGetNextExpireTime+0x44>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <prvGetNextExpireTime+0x16>
 8005352:	2201      	movs	r2, #1
 8005354:	e000      	b.n	8005358 <prvGetNextExpireTime+0x18>
 8005356:	2200      	movs	r2, #0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <prvGetNextExpireTime+0x44>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e001      	b.n	8005374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000c18 	.word	0x20000c18

08005388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005390:	f7ff fa90 	bl	80048b4 <xTaskGetTickCount>
 8005394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <prvSampleTimeNow+0x3c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d205      	bcs.n	80053ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053a0:	f000 f930 	bl	8005604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053b2:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <prvSampleTimeNow+0x3c>)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000c28 	.word	0x20000c28

080053c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d812      	bhi.n	8005414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053fc:	2301      	movs	r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e01b      	b.n	800543a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <prvInsertTimerInActiveList+0x7c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f7fe f97c 	bl	800370a <vListInsert>
 8005412:	e012      	b.n	800543a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d206      	bcs.n	800542a <prvInsertTimerInActiveList+0x62>
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e007      	b.n	800543a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <prvInsertTimerInActiveList+0x80>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7fe f968 	bl	800370a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800543a:	697b      	ldr	r3, [r7, #20]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000c1c 	.word	0x20000c1c
 8005448:	20000c18 	.word	0x20000c18

0800544c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08e      	sub	sp, #56	; 0x38
 8005450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005452:	e0c6      	b.n	80055e2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	da17      	bge.n	800548a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	3304      	adds	r3, #4
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvProcessReceivedCommands+0x2e>
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e7fe      	b.n	8005478 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005480:	6850      	ldr	r0, [r2, #4]
 8005482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	4611      	mov	r1, r2
 8005488:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f2c0 80a7 	blt.w	80055e0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe f96a 	bl	800377c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054a8:	463b      	mov	r3, r7
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff6c 	bl	8005388 <prvSampleTimeNow>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	f200 8094 	bhi.w	80055e2 <prvProcessReceivedCommands+0x196>
 80054ba:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <prvProcessReceivedCommands+0x74>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054e9 	.word	0x080054e9
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800556f 	.word	0x0800556f
 80054d4:	080055b7 	.word	0x080055b7
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054e9 	.word	0x080054e9
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	0800556f 	.word	0x0800556f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	18d1      	adds	r1, r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005508:	f7ff ff5e 	bl	80053c8 <prvInsertTimerInActiveList>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d067      	beq.n	80055e2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005518:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	441a      	add	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	2100      	movs	r1, #0
 8005538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553a:	f7ff fe09 	bl	8005150 <xTimerGenericCommand>
 800553e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d14d      	bne.n	80055e2 <prvProcessReceivedCommands+0x196>
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	e7fe      	b.n	8005558 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800556c:	e039      	b.n	80055e2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	b2da      	uxtb	r2, r3
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <prvProcessReceivedCommands+0x156>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e7fe      	b.n	80055a0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	18d1      	adds	r1, r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b0:	f7ff ff0a 	bl	80053c8 <prvInsertTimerInActiveList>
					break;
 80055b4:	e015      	b.n	80055e2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80055c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c6:	f000 fbc5 	bl	8005d54 <vPortFree>
 80055ca:	e00a      	b.n	80055e2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055de:	e000      	b.n	80055e2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <prvProcessReceivedCommands+0x1b4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1d39      	adds	r1, r7, #4
 80055e8:	2200      	movs	r2, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fbbc 	bl	8003d68 <xQueueReceive>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f47f af2e 	bne.w	8005454 <prvProcessReceivedCommands+0x8>
	}
}
 80055f8:	bf00      	nop
 80055fa:	3730      	adds	r7, #48	; 0x30
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000c20 	.word	0x20000c20

08005604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800560a:	e047      	b.n	800569c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800560c:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3304      	adds	r3, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe f8a9 	bl	800377c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02d      	beq.n	800569c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	429a      	cmp	r2, r3
 8005650:	d90e      	bls.n	8005670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fe f84e 	bl	800370a <vListInsert>
 800566e:	e015      	b.n	800569c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005670:	2300      	movs	r3, #0
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	2100      	movs	r1, #0
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fd68 	bl	8005150 <xTimerGenericCommand>
 8005680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <prvSwitchTimerLists+0x98>
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	e7fe      	b.n	800569a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1b2      	bne.n	800560c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <prvSwitchTimerLists+0xc4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <prvSwitchTimerLists+0xc0>)
 80056b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <prvSwitchTimerLists+0xc4>)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6013      	str	r3, [r2, #0]
}
 80056ba:	bf00      	nop
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000c18 	.word	0x20000c18
 80056c8:	20000c1c 	.word	0x20000c1c

080056cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056d2:	f000 f963 	bl	800599c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <prvCheckForValidListAndQueue+0x60>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d120      	bne.n	8005720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056de:	4814      	ldr	r0, [pc, #80]	; (8005730 <prvCheckForValidListAndQueue+0x64>)
 80056e0:	f7fd ffc2 	bl	8003668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056e4:	4813      	ldr	r0, [pc, #76]	; (8005734 <prvCheckForValidListAndQueue+0x68>)
 80056e6:	f7fd ffbf 	bl	8003668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <prvCheckForValidListAndQueue+0x6c>)
 80056ec:	4a10      	ldr	r2, [pc, #64]	; (8005730 <prvCheckForValidListAndQueue+0x64>)
 80056ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <prvCheckForValidListAndQueue+0x70>)
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <prvCheckForValidListAndQueue+0x68>)
 80056f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <prvCheckForValidListAndQueue+0x74>)
 80056fc:	4a11      	ldr	r2, [pc, #68]	; (8005744 <prvCheckForValidListAndQueue+0x78>)
 80056fe:	2110      	movs	r1, #16
 8005700:	200a      	movs	r0, #10
 8005702:	f7fe f8cd 	bl	80038a0 <xQueueGenericCreateStatic>
 8005706:	4602      	mov	r2, r0
 8005708:	4b08      	ldr	r3, [pc, #32]	; (800572c <prvCheckForValidListAndQueue+0x60>)
 800570a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <prvCheckForValidListAndQueue+0x60>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <prvCheckForValidListAndQueue+0x60>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	490b      	ldr	r1, [pc, #44]	; (8005748 <prvCheckForValidListAndQueue+0x7c>)
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fd8e 	bl	800423c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005720:	f000 f96a 	bl	80059f8 <vPortExitCritical>
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000c20 	.word	0x20000c20
 8005730:	20000bf0 	.word	0x20000bf0
 8005734:	20000c04 	.word	0x20000c04
 8005738:	20000c18 	.word	0x20000c18
 800573c:	20000c1c 	.word	0x20000c1c
 8005740:	20000ccc 	.word	0x20000ccc
 8005744:	20000c2c 	.word	0x20000c2c
 8005748:	08006040 	.word	0x08006040

0800574c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b04      	subs	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b04      	subs	r3, #4
 800576a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b04      	subs	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <pxPortInitialiseStack+0x64>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b14      	subs	r3, #20
 8005786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b04      	subs	r3, #4
 8005792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f06f 0202 	mvn.w	r2, #2
 800579a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b20      	subs	r3, #32
 80057a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057a2:	68fb      	ldr	r3, [r7, #12]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	080057b5 	.word	0x080057b5

080057b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <prvTaskExitError+0x50>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d009      	beq.n	80057dc <prvTaskExitError+0x28>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e7fe      	b.n	80057da <prvTaskExitError+0x26>
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057ee:	bf00      	nop
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0fc      	beq.n	80057f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
	...

08005810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <pxCurrentTCBConst2>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	f380 8809 	msr	PSP, r0
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	4770      	bx	lr
 800582c:	f3af 8000 	nop.w

08005830 <pxCurrentTCBConst2>:
 8005830:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <prvPortStartFirstTask+0x24>)
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f380 8808 	msr	MSP, r0
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8814 	msr	CONTROL, r0
 800584a:	b662      	cpsie	i
 800584c:	b661      	cpsie	f
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	df00      	svc	0
 8005858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800585a:	bf00      	nop
 800585c:	e000ed08 	.word	0xe000ed08

08005860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005866:	4b44      	ldr	r3, [pc, #272]	; (8005978 <xPortStartScheduler+0x118>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a44      	ldr	r2, [pc, #272]	; (800597c <xPortStartScheduler+0x11c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <xPortStartScheduler+0x24>
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e7fe      	b.n	8005882 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005884:	4b3c      	ldr	r3, [pc, #240]	; (8005978 <xPortStartScheduler+0x118>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a3d      	ldr	r2, [pc, #244]	; (8005980 <xPortStartScheduler+0x120>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d109      	bne.n	80058a2 <xPortStartScheduler+0x42>
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e7fe      	b.n	80058a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058a2:	4b38      	ldr	r3, [pc, #224]	; (8005984 <xPortStartScheduler+0x124>)
 80058a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	22ff      	movs	r2, #255	; 0xff
 80058b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <xPortStartScheduler+0x128>)
 80058c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ca:	4b30      	ldr	r3, [pc, #192]	; (800598c <xPortStartScheduler+0x12c>)
 80058cc:	2207      	movs	r2, #7
 80058ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d0:	e009      	b.n	80058e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80058d2:	4b2e      	ldr	r3, [pc, #184]	; (800598c <xPortStartScheduler+0x12c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4a2c      	ldr	r2, [pc, #176]	; (800598c <xPortStartScheduler+0x12c>)
 80058da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d0ef      	beq.n	80058d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <xPortStartScheduler+0x12c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1c3 0307 	rsb	r3, r3, #7
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d009      	beq.n	8005912 <xPortStartScheduler+0xb2>
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	e7fe      	b.n	8005910 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <xPortStartScheduler+0x12c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	4a1c      	ldr	r2, [pc, #112]	; (800598c <xPortStartScheduler+0x12c>)
 800591a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <xPortStartScheduler+0x12c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <xPortStartScheduler+0x12c>)
 8005926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <xPortStartScheduler+0x130>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <xPortStartScheduler+0x130>)
 8005936:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800593a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800593c:	4b14      	ldr	r3, [pc, #80]	; (8005990 <xPortStartScheduler+0x130>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <xPortStartScheduler+0x130>)
 8005942:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005948:	f000 f8d6 	bl	8005af8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <xPortStartScheduler+0x134>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005952:	f000 f8f5 	bl	8005b40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <xPortStartScheduler+0x138>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a0f      	ldr	r2, [pc, #60]	; (8005998 <xPortStartScheduler+0x138>)
 800595c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005960:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005962:	f7ff ff69 	bl	8005838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005966:	f7ff f86d 	bl	8004a44 <vTaskSwitchContext>
	prvTaskExitError();
 800596a:	f7ff ff23 	bl	80057b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed00 	.word	0xe000ed00
 800597c:	410fc271 	.word	0x410fc271
 8005980:	410fc270 	.word	0x410fc270
 8005984:	e000e400 	.word	0xe000e400
 8005988:	20000d1c 	.word	0x20000d1c
 800598c:	20000d20 	.word	0x20000d20
 8005990:	e000ed20 	.word	0xe000ed20
 8005994:	2000000c 	.word	0x2000000c
 8005998:	e000ef34 	.word	0xe000ef34

0800599c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <vPortEnterCritical+0x54>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <vPortEnterCritical+0x54>)
 80059bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <vPortEnterCritical+0x54>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10e      	bne.n	80059e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <vPortEnterCritical+0x58>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <vPortEnterCritical+0x48>
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	e7fe      	b.n	80059e2 <vPortEnterCritical+0x46>
	}
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <vPortExitCritical+0x4c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <vPortExitCritical+0x22>
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	607b      	str	r3, [r7, #4]
 8005a18:	e7fe      	b.n	8005a18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <vPortExitCritical+0x4c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <vPortExitCritical+0x4c>)
 8005a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <vPortExitCritical+0x4c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <vPortExitCritical+0x3e>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c
	...

08005a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a50:	f3ef 8009 	mrs	r0, PSP
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <pxCurrentTCBConst>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	f01e 0f10 	tst.w	lr, #16
 8005a60:	bf08      	it	eq
 8005a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a74:	f380 8811 	msr	BASEPRI, r0
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f7fe ffe0 	bl	8004a44 <vTaskSwitchContext>
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f380 8811 	msr	BASEPRI, r0
 8005a8c:	bc09      	pop	{r0, r3}
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	6808      	ldr	r0, [r1, #0]
 8005a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a96:	f01e 0f10 	tst.w	lr, #16
 8005a9a:	bf08      	it	eq
 8005a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005aa0:	f380 8809 	msr	PSP, r0
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst>:
 8005ab0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ad0:	f7fe ff00 	bl	80048d4 <xTaskIncrementTick>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <SysTick_Handler+0x3c>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <vPortSetupTimerInterrupt+0x34>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <vPortSetupTimerInterrupt+0x38>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <vPortSetupTimerInterrupt+0x3c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <vPortSetupTimerInterrupt+0x40>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <vPortSetupTimerInterrupt+0x44>)
 8005b16:	3b01      	subs	r3, #1
 8005b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b1a:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <vPortSetupTimerInterrupt+0x34>)
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	601a      	str	r2, [r3, #0]
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	e000e010 	.word	0xe000e010
 8005b30:	e000e018 	.word	0xe000e018
 8005b34:	20000000 	.word	0x20000000
 8005b38:	10624dd3 	.word	0x10624dd3
 8005b3c:	e000e014 	.word	0xe000e014

08005b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b50 <vPortEnableVFP+0x10>
 8005b44:	6801      	ldr	r1, [r0, #0]
 8005b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b4a:	6001      	str	r1, [r0, #0]
 8005b4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b4e:	bf00      	nop
 8005b50:	e000ed88 	.word	0xe000ed88

08005b54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b5a:	f3ef 8305 	mrs	r3, IPSR
 8005b5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b0f      	cmp	r3, #15
 8005b64:	d913      	bls.n	8005b8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b66:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <vPortValidateInterruptPriority+0x6c>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <vPortValidateInterruptPriority+0x70>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	7afa      	ldrb	r2, [r7, #11]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d209      	bcs.n	8005b8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e7fe      	b.n	8005b8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <vPortValidateInterruptPriority+0x74>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <vPortValidateInterruptPriority+0x78>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d909      	bls.n	8005bb2 <vPortValidateInterruptPriority+0x5e>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	e7fe      	b.n	8005bb0 <vPortValidateInterruptPriority+0x5c>
	}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e3f0 	.word	0xe000e3f0
 8005bc4:	20000d1c 	.word	0x20000d1c
 8005bc8:	e000ed0c 	.word	0xe000ed0c
 8005bcc:	20000d20 	.word	0x20000d20

08005bd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bdc:	f7fe fdc0 	bl	8004760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005be0:	4b57      	ldr	r3, [pc, #348]	; (8005d40 <pvPortMalloc+0x170>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005be8:	f000 f90c 	bl	8005e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bec:	4b55      	ldr	r3, [pc, #340]	; (8005d44 <pvPortMalloc+0x174>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 808c 	bne.w	8005d12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01c      	beq.n	8005c3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c00:	2208      	movs	r2, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f023 0307 	bic.w	r3, r3, #7
 8005c18:	3308      	adds	r3, #8
 8005c1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <pvPortMalloc+0x6a>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e7fe      	b.n	8005c38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d068      	beq.n	8005d12 <pvPortMalloc+0x142>
 8005c40:	4b41      	ldr	r3, [pc, #260]	; (8005d48 <pvPortMalloc+0x178>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d863      	bhi.n	8005d12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c4a:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <pvPortMalloc+0x17c>)
 8005c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c4e:	4b3f      	ldr	r3, [pc, #252]	; (8005d4c <pvPortMalloc+0x17c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c54:	e004      	b.n	8005c60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d903      	bls.n	8005c72 <pvPortMalloc+0xa2>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f1      	bne.n	8005c56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <pvPortMalloc+0x170>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d04a      	beq.n	8005d12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2208      	movs	r2, #8
 8005c82:	4413      	add	r3, r2
 8005c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad2      	subs	r2, r2, r3
 8005c96:	2308      	movs	r3, #8
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d91e      	bls.n	8005cdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <pvPortMalloc+0xf4>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e7fe      	b.n	8005cc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cd6:	69b8      	ldr	r0, [r7, #24]
 8005cd8:	f000 f8f6 	bl	8005ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <pvPortMalloc+0x178>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <pvPortMalloc+0x178>)
 8005ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cea:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <pvPortMalloc+0x178>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <pvPortMalloc+0x180>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d203      	bcs.n	8005cfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <pvPortMalloc+0x178>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <pvPortMalloc+0x180>)
 8005cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <pvPortMalloc+0x174>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d12:	f7fe fd33 	bl	800477c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <pvPortMalloc+0x164>
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e7fe      	b.n	8005d32 <pvPortMalloc+0x162>
	return pvReturn;
 8005d34:	69fb      	ldr	r3, [r7, #28]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2000492c 	.word	0x2000492c
 8005d44:	20004938 	.word	0x20004938
 8005d48:	20004930 	.word	0x20004930
 8005d4c:	20004924 	.word	0x20004924
 8005d50:	20004934 	.word	0x20004934

08005d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d046      	beq.n	8005df4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d66:	2308      	movs	r3, #8
 8005d68:	425b      	negs	r3, r3
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <vPortFree+0xa8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <vPortFree+0x42>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e7fe      	b.n	8005d94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <vPortFree+0x5e>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	e7fe      	b.n	8005db0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <vPortFree+0xa8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d019      	beq.n	8005df4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d115      	bne.n	8005df4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <vPortFree+0xa8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dd8:	f7fe fcc2 	bl	8004760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <vPortFree+0xac>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4413      	add	r3, r2
 8005de6:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <vPortFree+0xac>)
 8005de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	f000 f86c 	bl	8005ec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005df0:	f7fe fcc4 	bl	800477c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20004938 	.word	0x20004938
 8005e00:	20004930 	.word	0x20004930

08005e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e10:	4b27      	ldr	r3, [pc, #156]	; (8005eb0 <prvHeapInit+0xac>)
 8005e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3307      	adds	r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0307 	bic.w	r3, r3, #7
 8005e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <prvHeapInit+0xac>)
 8005e34:	4413      	add	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <prvHeapInit+0xb0>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e42:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <prvHeapInit+0xb0>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e50:	2208      	movs	r2, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0307 	bic.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <prvHeapInit+0xb4>)
 8005e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <prvHeapInit+0xb4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <prvHeapInit+0xb4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <prvHeapInit+0xb4>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	; (8005ebc <prvHeapInit+0xb8>)
 8005e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <prvHeapInit+0xbc>)
 8005e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <prvHeapInit+0xc0>)
 8005e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000d24 	.word	0x20000d24
 8005eb4:	20004924 	.word	0x20004924
 8005eb8:	2000492c 	.word	0x2000492c
 8005ebc:	20004934 	.word	0x20004934
 8005ec0:	20004930 	.word	0x20004930
 8005ec4:	20004938 	.word	0x20004938

08005ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ed0:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <prvInsertBlockIntoFreeList+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e002      	b.n	8005edc <prvInsertBlockIntoFreeList+0x14>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d8f7      	bhi.n	8005ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d108      	bne.n	8005f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	441a      	add	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	441a      	add	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d118      	bne.n	8005f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <prvInsertBlockIntoFreeList+0xb0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d00d      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e008      	b.n	8005f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvInsertBlockIntoFreeList+0xb0>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e003      	b.n	8005f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d002      	beq.n	8005f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20004924 	.word	0x20004924
 8005f78:	2000492c 	.word	0x2000492c

08005f7c <__libc_init_array>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	4e0d      	ldr	r6, [pc, #52]	; (8005fb4 <__libc_init_array+0x38>)
 8005f80:	4c0d      	ldr	r4, [pc, #52]	; (8005fb8 <__libc_init_array+0x3c>)
 8005f82:	1ba4      	subs	r4, r4, r6
 8005f84:	10a4      	asrs	r4, r4, #2
 8005f86:	2500      	movs	r5, #0
 8005f88:	42a5      	cmp	r5, r4
 8005f8a:	d109      	bne.n	8005fa0 <__libc_init_array+0x24>
 8005f8c:	4e0b      	ldr	r6, [pc, #44]	; (8005fbc <__libc_init_array+0x40>)
 8005f8e:	4c0c      	ldr	r4, [pc, #48]	; (8005fc0 <__libc_init_array+0x44>)
 8005f90:	f000 f82c 	bl	8005fec <_init>
 8005f94:	1ba4      	subs	r4, r4, r6
 8005f96:	10a4      	asrs	r4, r4, #2
 8005f98:	2500      	movs	r5, #0
 8005f9a:	42a5      	cmp	r5, r4
 8005f9c:	d105      	bne.n	8005faa <__libc_init_array+0x2e>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fa4:	4798      	blx	r3
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	e7ee      	b.n	8005f88 <__libc_init_array+0xc>
 8005faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fae:	4798      	blx	r3
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7f2      	b.n	8005f9a <__libc_init_array+0x1e>
 8005fb4:	080060ec 	.word	0x080060ec
 8005fb8:	080060ec 	.word	0x080060ec
 8005fbc:	080060ec 	.word	0x080060ec
 8005fc0:	080060f0 	.word	0x080060f0

08005fc4 <memcpy>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	1e43      	subs	r3, r0, #1
 8005fc8:	440a      	add	r2, r1
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	d100      	bne.n	8005fd0 <memcpy+0xc>
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd8:	e7f7      	b.n	8005fca <memcpy+0x6>

08005fda <memset>:
 8005fda:	4402      	add	r2, r0
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d100      	bne.n	8005fe4 <memset+0xa>
 8005fe2:	4770      	bx	lr
 8005fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe8:	e7f9      	b.n	8005fde <memset+0x4>
	...

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr

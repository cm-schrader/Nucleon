
Nucleon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e98  08004e98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  20000010  08004eb0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a20  08004eb0  00024a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176fc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c25  00000000  00000000  0003773c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003a368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003792  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5bf  00000000  00000000  0003fed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8104  00000000  00000000  0004e491  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  00116610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dec 	.word	0x08004dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004dec 	.word	0x08004dec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 faaa 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f826 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b6 	bl	800064c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e0:	f000 f87e 	bl	80005e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f001 ff0a 	bl	80022fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <main+0x40>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x44>)
 80004ee:	f001 ff6f 	bl	80023d0 <osThreadNew>
 80004f2:	4602      	mov	r2, r0
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <main+0x48>)
 80004f6:	601a      	str	r2, [r3, #0]

  /* creation of flashDemo */
  flashDemoHandle = osThreadNew(StartFlashDemo, NULL, &flashDemo_attributes);
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x4c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x50>)
 80004fe:	f001 ff67 	bl	80023d0 <osThreadNew>
 8000502:	4602      	mov	r2, r0
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <main+0x54>)
 8000506:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f001 ff2c 	bl	8002364 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x3c>
 800050e:	bf00      	nop
 8000510:	08004e30 	.word	0x08004e30
 8000514:	0800071d 	.word	0x0800071d
 8000518:	20004994 	.word	0x20004994
 800051c:	08004e54 	.word	0x08004e54
 8000520:	0800073d 	.word	0x0800073d
 8000524:	20004998 	.word	0x20004998

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fc4f 	bl	8004dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xb0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xb0>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <SystemClock_Config+0xb0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SystemClock_Config+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <SystemClock_Config+0xb4>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <SystemClock_Config+0xb4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fd3a 	bl	8001010 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005a2:	f000 f90b 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff95 	bl	80014f0 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005cc:	f000 f8f6 	bl	80007bc <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_SPI1_Init+0x64>)
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_SPI1_Init+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_SPI1_Init+0x64>)
 80005ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_SPI1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_SPI1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_SPI1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_SPI1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_SPI1_Init+0x64>)
 800060c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_SPI1_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_SPI1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_SPI1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_SPI1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_SPI1_Init+0x64>)
 800062c:	220a      	movs	r2, #10
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_SPI1_Init+0x64>)
 8000632:	f001 f96b 	bl	800190c <HAL_SPI_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800063c:	f000 f8be 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000493c 	.word	0x2000493c
 8000648:	40013000 	.word	0x40013000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a29      	ldr	r2, [pc, #164]	; (8000710 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a22      	ldr	r2, [pc, #136]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006bc:	f000 fc74 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <MX_GPIO_Init+0xcc>)
 80006c8:	f000 fc6e 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006cc:	2310      	movs	r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006e4:	f000 fac6 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS1_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0xcc>)
 8000702:	f000 fab7 	bl	8000c74 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400

0800071c <StartBlink>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  {
//	  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_SET);
//	  osDelay(250);
//	  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_RESET);
//	  osDelay(1000);
	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <StartBlink+0x1c>)
 800072a:	f000 fc56 	bl	8000fda <HAL_GPIO_TogglePin>
	  osDelay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f001 fef3 	bl	800251c <osDelay>
	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000736:	e7f5      	b.n	8000724 <StartBlink+0x8>
 8000738:	40020400 	.word	0x40020400

0800073c <StartFlashDemo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashDemo */
void StartFlashDemo(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashDemo */
  cmd[0] = 0x9f;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <StartFlashDemo+0x4c>)
 8000746:	229f      	movs	r2, #159	; 0x9f
 8000748:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	480f      	ldr	r0, [pc, #60]	; (800078c <StartFlashDemo+0x50>)
 8000750:	f000 fc2a 	bl	8000fa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2110      	movs	r1, #16
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <StartFlashDemo+0x50>)
 800075a:	f000 fc25 	bl	8000fa8 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, cmd, data, 4, 0xff);
 800075e:	23ff      	movs	r3, #255	; 0xff
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2304      	movs	r3, #4
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <StartFlashDemo+0x54>)
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <StartFlashDemo+0x4c>)
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <StartFlashDemo+0x58>)
 800076a:	f001 f933 	bl	80019d4 <HAL_SPI_TransmitReceive>
	  osDelay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f001 fed4 	bl	800251c <osDelay>
//	  printf("JedecID: %02x-%02x%02x\n", data[1], data[2], data[3]);
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2110      	movs	r1, #16
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <StartFlashDemo+0x50>)
 800077a:	f000 fc15 	bl	8000fa8 <HAL_GPIO_WritePin>
	  osDelay(3000);
 800077e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000782:	f001 fecb 	bl	800251c <osDelay>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000786:	e7e0      	b.n	800074a <StartFlashDemo+0xe>
 8000788:	2000002c 	.word	0x2000002c
 800078c:	40020000 	.word	0x40020000
 8000790:	20000030 	.word	0x20000030
 8000794:	2000493c 	.word	0x2000493c

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f961 	bl	8000a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x54>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_MspInit+0x54>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x54>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x54>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fa05 	bl	8000c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_SPI_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_SPI_MspInit+0x88>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_SPI_MspInit+0x88>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_SPI_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SPI1_SDI_Pin|SPI1_SDO_Pin;
 800087e:	23e0      	movs	r3, #224	; 0xe0
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088e:	2305      	movs	r3, #5
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <HAL_SPI_MspInit+0x8c>)
 800089a:	f000 f9eb 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40013000 	.word	0x40013000
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000

080008b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	2036      	movs	r0, #54	; 0x36
 80008ca:	f000 f9a9 	bl	8000c20 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80008ce:	2036      	movs	r0, #54	; 0x36
 80008d0:	f000 f9c2 	bl	8000c58 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <HAL_InitTick+0xa0>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <HAL_InitTick+0xa0>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_InitTick+0xa0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f0:	f107 0210 	add.w	r2, r7, #16
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 ffd4 	bl	80018a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000900:	f000 ffbe 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8000904:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_InitTick+0xa4>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	3b01      	subs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_InitTick+0xa8>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <HAL_InitTick+0xac>)
 8000918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_InitTick+0xa8>)
 800091c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000920:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_InitTick+0xa8>)
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_InitTick+0xa8>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_InitTick+0xa8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_InitTick+0xa8>)
 8000936:	f001 fa9b 	bl	8001e70 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d104      	bne.n	800094a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <HAL_InitTick+0xa8>)
 8000942:	f001 faca 	bl	8001eda <HAL_TIM_Base_Start_IT>
 8000946:	4603      	mov	r3, r0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3730      	adds	r7, #48	; 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	431bde83 	.word	0x431bde83
 800095c:	2000499c 	.word	0x2000499c
 8000960:	40001000 	.word	0x40001000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f001 fac0 	bl	8001f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000499c 	.word	0x2000499c

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <SystemInit+0x28>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <SystemInit+0x28>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SystemInit+0x28>)
 80009c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c6:	609a      	str	r2, [r3, #8]
#endif
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009de:	e003      	b.n	80009e8 <LoopCopyDataInit>

080009e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009e6:	3104      	adds	r1, #4

080009e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009f0:	d3f6      	bcc.n	80009e0 <CopyDataInit>
  ldr  r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009f4:	e002      	b.n	80009fc <LoopFillZerobss>

080009f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009f8:	f842 3b04 	str.w	r3, [r2], #4

080009fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a00:	d3f9      	bcc.n	80009f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd3 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f004 f9b9 	bl	8004d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd61 	bl	80004d0 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a14:	08004ea0 	.word	0x08004ea0
  ldr  r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a1c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a20:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a24:	20004a20 	.word	0x20004a20

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f8d8 	bl	8000c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ff2a 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff feb4 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200049dc 	.word	0x200049dc

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200049dc 	.word	0x200049dc

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ff4c 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c32:	f7ff ff61 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	f7ff ffb1 	bl	8000ba4 <NVIC_EncodePriority>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff80 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff54 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e16b      	b.n	8000f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 815a 	bne.w	8000f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00b      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d007      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc2:	2b11      	cmp	r3, #17
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0xfc>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b12      	cmp	r3, #18
 8000d6e:	d123      	bne.n	8000db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	69b9      	ldr	r1, [r7, #24]
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0203 	and.w	r2, r3, #3
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80b4 	beq.w	8000f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e16:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_GPIO_Init+0x314>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x222>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x318>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x21e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_GPIO_Init+0x31c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x21a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4d      	ldr	r2, [pc, #308]	; (8000f94 <HAL_GPIO_Init+0x320>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x216>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <HAL_GPIO_Init+0x324>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x212>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4b      	ldr	r2, [pc, #300]	; (8000f9c <HAL_GPIO_Init+0x328>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x20e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <HAL_GPIO_Init+0x32c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x20a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00e      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e7e:	2308      	movs	r3, #8
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x228>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4934      	ldr	r1, [pc, #208]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae90 	bls.w	8000c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	3724      	adds	r7, #36	; 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40013c00 	.word	0x40013c00

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc4:	e003      	b.n	8000fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	401a      	ands	r2, r3
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d104      	bne.n	8000ffe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	041a      	lsls	r2, r3, #16
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e25b      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d075      	beq.n	800111a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102e:	4ba3      	ldr	r3, [pc, #652]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b04      	cmp	r3, #4
 8001038:	d00c      	beq.n	8001054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103a:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001042:	2b08      	cmp	r3, #8
 8001044:	d112      	bne.n	800106c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001046:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001052:	d10b      	bne.n	800106c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	4b99      	ldr	r3, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d05b      	beq.n	8001118 <HAL_RCC_OscConfig+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d157      	bne.n	8001118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e236      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x74>
 8001076:	4b91      	ldr	r3, [pc, #580]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a90      	ldr	r2, [pc, #576]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e01d      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a8a      	ldr	r2, [pc, #552]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a87      	ldr	r2, [pc, #540]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 80010a8:	4b84      	ldr	r3, [pc, #528]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a83      	ldr	r2, [pc, #524]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b81      	ldr	r3, [pc, #516]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a80      	ldr	r2, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fce6 	bl	8000a98 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fce2 	bl	8000a98 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e1fb      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0xc0>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcd2 	bl	8000a98 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcce 	bl	8000a98 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1e7      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0xe8>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d063      	beq.n	80011ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800113a:	2b08      	cmp	r3, #8
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d116      	bne.n	8001178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x152>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e1bb      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4952      	ldr	r1, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e03a      	b.n	80011ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_RCC_OscConfig+0x2b0>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fc87 	bl	8000a98 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc83 	bl	8000a98 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e19c      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4940      	ldr	r1, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e015      	b.n	80011ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_OscConfig+0x2b0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc66 	bl	8000a98 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc62 	bl	8000a98 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e17b      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d030      	beq.n	800125c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d016      	beq.n	8001230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_RCC_OscConfig+0x2b4>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001208:	f7ff fc46 	bl	8000a98 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fc42 	bl	8000a98 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e15b      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0x200>
 800122e:	e015      	b.n	800125c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_RCC_OscConfig+0x2b4>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fc2f 	bl	8000a98 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fc2b 	bl	8000a98 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e144      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a0 	beq.w	80013aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d121      	bne.n	80012ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fbf1 	bl	8000a98 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e011      	b.n	80012de <HAL_RCC_OscConfig+0x2ce>
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	42470000 	.word	0x42470000
 80012c4:	42470e80 	.word	0x42470e80
 80012c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012cc:	f7ff fbe4 	bl	8000a98 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0fd      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <HAL_RCC_OscConfig+0x4d4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x2f0>
 80012f2:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	4a7c      	ldr	r2, [pc, #496]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6713      	str	r3, [r2, #112]	; 0x70
 80012fe:	e01c      	b.n	800133a <HAL_RCC_OscConfig+0x32a>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d10c      	bne.n	8001322 <HAL_RCC_OscConfig+0x312>
 8001308:	4b77      	ldr	r3, [pc, #476]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	4a76      	ldr	r2, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6713      	str	r3, [r2, #112]	; 0x70
 8001314:	4b74      	ldr	r3, [pc, #464]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a73      	ldr	r2, [pc, #460]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e00b      	b.n	800133a <HAL_RCC_OscConfig+0x32a>
 8001322:	4b71      	ldr	r3, [pc, #452]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a70      	ldr	r2, [pc, #448]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001332:	4a6d      	ldr	r2, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d015      	beq.n	800136e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff fba9 	bl	8000a98 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff fba5 	bl	8000a98 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0bc      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ee      	beq.n	800134a <HAL_RCC_OscConfig+0x33a>
 800136c:	e014      	b.n	8001398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb93 	bl	8000a98 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fb8f 	bl	8000a98 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0a6      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1ee      	bne.n	8001376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8092 	beq.w	80014d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d05c      	beq.n	800147a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d141      	bne.n	800144c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <HAL_RCC_OscConfig+0x4dc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb63 	bl	8000a98 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fb5f 	bl	8000a98 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e078      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	3b01      	subs	r3, #1
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	061b      	lsls	r3, r3, #24
 8001418:	4933      	ldr	r1, [pc, #204]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x4dc>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb38 	bl	8000a98 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb34 	bl	8000a98 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e04d      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x41c>
 800144a:	e045      	b.n	80014d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x4dc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb21 	bl	8000a98 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb1d 	bl	8000a98 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e036      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x44a>
 8001478:	e02e      	b.n	80014d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e029      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_RCC_OscConfig+0x4d8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	429a      	cmp	r2, r3
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d115      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014ae:	4013      	ands	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d10d      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40007000 	.word	0x40007000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470060 	.word	0x42470060

080014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0cc      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d90c      	bls.n	800152c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800154e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d044      	beq.n	8001610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d119      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d003      	beq.n	80015ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e067      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 0203 	bic.w	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4934      	ldr	r1, [pc, #208]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e0:	f7ff fa5a 	bl	8000a98 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff fa56 	bl	8000a98 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e04f      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 020c 	and.w	r2, r3, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d1eb      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d20c      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4601      	mov	r1, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	fa21 f303 	lsr.w	r3, r1, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f90c 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00
 80016ac:	40023800 	.word	0x40023800
 80016b0:	08004e78 	.word	0x08004e78
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d007      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0x32>
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d008      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x38>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 80b4 	bne.w	8001850 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016ea:	60bb      	str	r3, [r7, #8]
       break;
 80016ec:	e0b3      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016f0:	60bb      	str	r3, [r7, #8]
      break;
 80016f2:	e0b0      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d04a      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	f04f 0400 	mov.w	r4, #0
 8001714:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	ea03 0501 	and.w	r5, r3, r1
 8001720:	ea04 0602 	and.w	r6, r4, r2
 8001724:	4629      	mov	r1, r5
 8001726:	4632      	mov	r2, r6
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f04f 0400 	mov.w	r4, #0
 8001730:	0154      	lsls	r4, r2, #5
 8001732:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001736:	014b      	lsls	r3, r1, #5
 8001738:	4619      	mov	r1, r3
 800173a:	4622      	mov	r2, r4
 800173c:	1b49      	subs	r1, r1, r5
 800173e:	eb62 0206 	sbc.w	r2, r2, r6
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	f04f 0400 	mov.w	r4, #0
 800174a:	0194      	lsls	r4, r2, #6
 800174c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001750:	018b      	lsls	r3, r1, #6
 8001752:	1a5b      	subs	r3, r3, r1
 8001754:	eb64 0402 	sbc.w	r4, r4, r2
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	00e2      	lsls	r2, r4, #3
 8001762:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001766:	00d9      	lsls	r1, r3, #3
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	195b      	adds	r3, r3, r5
 800176e:	eb44 0406 	adc.w	r4, r4, r6
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	02a2      	lsls	r2, r4, #10
 800177c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001780:	0299      	lsls	r1, r3, #10
 8001782:	460b      	mov	r3, r1
 8001784:	4614      	mov	r4, r2
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f04f 0400 	mov.w	r4, #0
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	f7fe fd1c 	bl	80001d0 <__aeabi_uldivmod>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e049      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	f04f 0400 	mov.w	r4, #0
 80017aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	ea03 0501 	and.w	r5, r3, r1
 80017b6:	ea04 0602 	and.w	r6, r4, r2
 80017ba:	4629      	mov	r1, r5
 80017bc:	4632      	mov	r2, r6
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f04f 0400 	mov.w	r4, #0
 80017c6:	0154      	lsls	r4, r2, #5
 80017c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017cc:	014b      	lsls	r3, r1, #5
 80017ce:	4619      	mov	r1, r3
 80017d0:	4622      	mov	r2, r4
 80017d2:	1b49      	subs	r1, r1, r5
 80017d4:	eb62 0206 	sbc.w	r2, r2, r6
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	0194      	lsls	r4, r2, #6
 80017e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	1a5b      	subs	r3, r3, r1
 80017ea:	eb64 0402 	sbc.w	r4, r4, r2
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	00e2      	lsls	r2, r4, #3
 80017f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017fc:	00d9      	lsls	r1, r3, #3
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	195b      	adds	r3, r3, r5
 8001804:	eb44 0406 	adc.w	r4, r4, r6
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	02a2      	lsls	r2, r4, #10
 8001812:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001816:	0299      	lsls	r1, r3, #10
 8001818:	460b      	mov	r3, r1
 800181a:	4614      	mov	r4, r2
 800181c:	4618      	mov	r0, r3
 800181e:	4621      	mov	r1, r4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f04f 0400 	mov.w	r4, #0
 8001826:	461a      	mov	r2, r3
 8001828:	4623      	mov	r3, r4
 800182a:	f7fe fcd1 	bl	80001d0 <__aeabi_uldivmod>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	3301      	adds	r3, #1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	60bb      	str	r3, [r7, #8]
      break;
 800184e:	e002      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001852:	60bb      	str	r3, [r7, #8]
      break;
 8001854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001856:	68bb      	ldr	r3, [r7, #8]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400

08001868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCC_GetHCLKFreq+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff0 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001888:	4601      	mov	r1, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08004e88 	.word	0x08004e88

080018a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	220f      	movs	r2, #15
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_RCC_GetClockConfig+0x5c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_RCC_GetClockConfig+0x60>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e056      	b.n	80019cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe ff73 	bl	8000824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001954:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	ea42 0103 	orr.w	r1, r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	f003 0104 	and.w	r1, r3, #4
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_TransmitReceive+0x26>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e18a      	b.n	8001d10 <HAL_SPI_TransmitReceive+0x33c>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a02:	f7ff f849 	bl	8000a98 <HAL_GetTick>
 8001a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d00f      	beq.n	8001a44 <HAL_SPI_TransmitReceive+0x70>
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a2a:	d107      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x68>
 8001a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d003      	beq.n	8001a44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a42:	e15b      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_SPI_TransmitReceive+0x82>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_SPI_TransmitReceive+0x82>
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d103      	bne.n	8001a5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a5c:	e14e      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d003      	beq.n	8001a72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	2b40      	cmp	r3, #64	; 0x40
 8001ab4:	d007      	beq.n	8001ac6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ace:	d178      	bne.n	8001bc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_SPI_TransmitReceive+0x10a>
 8001ad8:	8b7b      	ldrh	r3, [r7, #26]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d166      	bne.n	8001bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	1c9a      	adds	r2, r3, #2
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b02:	e053      	b.n	8001bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d11b      	bne.n	8001b4a <HAL_SPI_TransmitReceive+0x176>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d016      	beq.n	8001b4a <HAL_SPI_TransmitReceive+0x176>
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d113      	bne.n	8001b4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	1c9a      	adds	r2, r3, #2
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d119      	bne.n	8001b8c <HAL_SPI_TransmitReceive+0x1b8>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d014      	beq.n	8001b8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	1c9a      	adds	r2, r3, #2
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b8c:	f7fe ff84 	bl	8000a98 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d807      	bhi.n	8001bac <HAL_SPI_TransmitReceive+0x1d8>
 8001b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d003      	beq.n	8001bac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001baa:	e0a7      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1a6      	bne.n	8001b04 <HAL_SPI_TransmitReceive+0x130>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1a1      	bne.n	8001b04 <HAL_SPI_TransmitReceive+0x130>
 8001bc0:	e07c      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_SPI_TransmitReceive+0x1fc>
 8001bca:	8b7b      	ldrh	r3, [r7, #26]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d16b      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bf6:	e057      	b.n	8001ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d11c      	bne.n	8001c40 <HAL_SPI_TransmitReceive+0x26c>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d017      	beq.n	8001c40 <HAL_SPI_TransmitReceive+0x26c>
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d114      	bne.n	8001c40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	330c      	adds	r3, #12
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d119      	bne.n	8001c82 <HAL_SPI_TransmitReceive+0x2ae>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d014      	beq.n	8001c82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c82:	f7fe ff09 	bl	8000a98 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d803      	bhi.n	8001c9a <HAL_SPI_TransmitReceive+0x2c6>
 8001c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d102      	bne.n	8001ca0 <HAL_SPI_TransmitReceive+0x2cc>
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ca6:	e029      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1a2      	bne.n	8001bf8 <HAL_SPI_TransmitReceive+0x224>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d19d      	bne.n	8001bf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f893 	bl	8001dec <SPI_EndRxTxTransaction>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cd8:	e010      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10b      	bne.n	8001cfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	e000      	b.n	8001cfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d28:	e04c      	b.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d048      	beq.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d32:	f7fe feb1 	bl	8000a98 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d902      	bls.n	8001d48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13d      	bne.n	8001dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d60:	d111      	bne.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6a:	d004      	beq.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d107      	bne.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8e:	d10f      	bne.n	8001db0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e00f      	b.n	8001de4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d1a3      	bne.n	8001d2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <SPI_EndRxTxTransaction+0x7c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <SPI_EndRxTxTransaction+0x80>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0d5b      	lsrs	r3, r3, #21
 8001e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e16:	d112      	bne.n	8001e3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff ff78 	bl	8001d18 <SPI_WaitFlagStateUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f043 0220 	orr.w	r2, r3, #32
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e00f      	b.n	8001e5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d0f2      	beq.n	8001e3e <SPI_EndRxTxTransaction+0x52>
 8001e58:	e000      	b.n	8001e5c <SPI_EndRxTxTransaction+0x70>
        break;
 8001e5a:	bf00      	nop
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	165e9f81 	.word	0x165e9f81

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e01d      	b.n	8001ebe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f815 	bl	8001ec6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 f968 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d007      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d122      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f06f 0202 	mvn.w	r2, #2
 8001f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8ee 	bl	8002146 <HAL_TIM_IC_CaptureCallback>
 8001f6a:	e005      	b.n	8001f78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f8e0 	bl	8002132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8f1 	bl	800215a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d122      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d11b      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0204 	mvn.w	r2, #4
 8001fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8c4 	bl	8002146 <HAL_TIM_IC_CaptureCallback>
 8001fbe:	e005      	b.n	8001fcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8b6 	bl	8002132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8c7 	bl	800215a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d122      	bne.n	8002026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11b      	bne.n	8002026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0208 	mvn.w	r2, #8
 8001ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f89a 	bl	8002146 <HAL_TIM_IC_CaptureCallback>
 8002012:	e005      	b.n	8002020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f88c 	bl	8002132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f89d 	bl	800215a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b10      	cmp	r3, #16
 8002032:	d122      	bne.n	800207a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d11b      	bne.n	800207a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0210 	mvn.w	r2, #16
 800204a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2208      	movs	r2, #8
 8002050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f870 	bl	8002146 <HAL_TIM_IC_CaptureCallback>
 8002066:	e005      	b.n	8002074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f862 	bl	8002132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f873 	bl	800215a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0201 	mvn.w	r2, #1
 800209e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7fe fb79 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f903 	bl	80022d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d10e      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f838 	bl	800216e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d10e      	bne.n	800212a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d107      	bne.n	800212a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0220 	mvn.w	r2, #32
 8002122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8cd 	bl	80022c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a40      	ldr	r2, [pc, #256]	; (8002298 <TIM_Base_SetConfig+0x114>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d00f      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3d      	ldr	r2, [pc, #244]	; (800229c <TIM_Base_SetConfig+0x118>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00b      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <TIM_Base_SetConfig+0x11c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <TIM_Base_SetConfig+0x120>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <TIM_Base_SetConfig+0x124>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <TIM_Base_SetConfig+0x114>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d027      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	; (800229c <TIM_Base_SetConfig+0x118>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d023      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <TIM_Base_SetConfig+0x11c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <TIM_Base_SetConfig+0x120>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a29      	ldr	r2, [pc, #164]	; (80022a8 <TIM_Base_SetConfig+0x124>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d017      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a28      	ldr	r2, [pc, #160]	; (80022ac <TIM_Base_SetConfig+0x128>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <TIM_Base_SetConfig+0x12c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00f      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <TIM_Base_SetConfig+0x130>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <TIM_Base_SetConfig+0x134>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a24      	ldr	r2, [pc, #144]	; (80022bc <TIM_Base_SetConfig+0x138>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <TIM_Base_SetConfig+0x13c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <TIM_Base_SetConfig+0x114>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d003      	beq.n	800227c <TIM_Base_SetConfig+0xf8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <TIM_Base_SetConfig+0x124>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d103      	bne.n	8002284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	615a      	str	r2, [r3, #20]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40014000 	.word	0x40014000
 80022b0:	40014400 	.word	0x40014400
 80022b4:	40014800 	.word	0x40014800
 80022b8:	40001800 	.word	0x40001800
 80022bc:	40001c00 	.word	0x40001c00
 80022c0:	40002000 	.word	0x40002000

080022c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002302:	f3ef 8305 	mrs	r3, IPSR
 8002306:	60bb      	str	r3, [r7, #8]
  return(result);
 8002308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230e:	f3ef 8310 	mrs	r3, PRIMASK
 8002312:	607b      	str	r3, [r7, #4]
  return(result);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800231a:	f3ef 8311 	mrs	r3, BASEPRI
 800231e:	603b      	str	r3, [r7, #0]
  return(result);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <osKernelInitialize+0x3a>
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <osKernelInitialize+0x64>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d103      	bne.n	8002336 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800232e:	f06f 0305 	mvn.w	r3, #5
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00c      	b.n	8002350 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <osKernelInitialize+0x64>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <osKernelInitialize+0x64>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e002      	b.n	8002350 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000034 	.word	0x20000034

08002364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236a:	f3ef 8305 	mrs	r3, IPSR
 800236e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002370:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002376:	f3ef 8310 	mrs	r3, PRIMASK
 800237a:	607b      	str	r3, [r7, #4]
  return(result);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002382:	f3ef 8311 	mrs	r3, BASEPRI
 8002386:	603b      	str	r3, [r7, #0]
  return(result);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <osKernelStart+0x3a>
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <osKernelStart+0x68>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d103      	bne.n	800239e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002396:	f06f 0305 	mvn.w	r3, #5
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e010      	b.n	80023c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <osKernelStart+0x68>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d109      	bne.n	80023ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023a6:	f7ff ffa1 	bl	80022ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <osKernelStart+0x68>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023b0:	f001 f870 	bl	8003494 <vTaskStartScheduler>
      stat = osOK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e002      	b.n	80023c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023c0:	68fb      	ldr	r3, [r7, #12]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000034 	.word	0x20000034

080023d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b090      	sub	sp, #64	; 0x40
 80023d4:	af04      	add	r7, sp, #16
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023e0:	f3ef 8305 	mrs	r3, IPSR
 80023e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80023e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 808f 	bne.w	800250c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ee:	f3ef 8310 	mrs	r3, PRIMASK
 80023f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023fa:	f3ef 8311 	mrs	r3, BASEPRI
 80023fe:	617b      	str	r3, [r7, #20]
  return(result);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <osThreadNew+0x3e>
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <osThreadNew+0x148>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d07e      	beq.n	800250c <osThreadNew+0x13c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d07b      	beq.n	800250c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002418:	2318      	movs	r3, #24
 800241a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d045      	beq.n	80024b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <osThreadNew+0x6a>
        name = attr->name;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <osThreadNew+0x90>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	2b38      	cmp	r3, #56	; 0x38
 8002452:	d805      	bhi.n	8002460 <osThreadNew+0x90>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <osThreadNew+0x94>
        return (NULL);
 8002460:	2300      	movs	r3, #0
 8002462:	e054      	b.n	800250e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <osThreadNew+0xca>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b5b      	cmp	r3, #91	; 0x5b
 8002482:	d90a      	bls.n	800249a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <osThreadNew+0xca>
        mem = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	e010      	b.n	80024bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <osThreadNew+0xec>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <osThreadNew+0xec>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <osThreadNew+0xec>
          mem = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	e001      	b.n	80024bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d110      	bne.n	80024e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024ca:	9202      	str	r2, [sp, #8]
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fe09 	bl	80030f0 <xTaskCreateStatic>
 80024de:	4603      	mov	r3, r0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e013      	b.n	800250c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d110      	bne.n	800250c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fe51 	bl	80031a4 <xTaskCreate>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d001      	beq.n	800250c <osThreadNew+0x13c>
          hTask = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800250c:	693b      	ldr	r3, [r7, #16]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3730      	adds	r7, #48	; 0x30
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000034 	.word	0x20000034

0800251c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002524:	f3ef 8305 	mrs	r3, IPSR
 8002528:	613b      	str	r3, [r7, #16]
  return(result);
 800252a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10f      	bne.n	8002550 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002530:	f3ef 8310 	mrs	r3, PRIMASK
 8002534:	60fb      	str	r3, [r7, #12]
  return(result);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800253c:	f3ef 8311 	mrs	r3, BASEPRI
 8002540:	60bb      	str	r3, [r7, #8]
  return(result);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <osDelay+0x3c>
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <osDelay+0x58>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d103      	bne.n	8002558 <osDelay+0x3c>
    stat = osErrorISR;
 8002550:	f06f 0305 	mvn.w	r3, #5
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e007      	b.n	8002568 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 ff62 	bl	800342c <vTaskDelay>
    }
  }

  return (stat);
 8002568:	697b      	ldr	r3, [r7, #20]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000034 	.word	0x20000034

08002578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <vApplicationGetIdleTaskMemory+0x30>)
 800258e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000038 	.word	0x20000038
 80025a8:	20000094 	.word	0x20000094

080025ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80025bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4a06      	ldr	r2, [pc, #24]	; (80025dc <vApplicationGetTimerTaskMemory+0x30>)
 80025c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000294 	.word	0x20000294
 80025dc:	200002f0 	.word	0x200002f0

080025e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 0208 	add.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f103 0208 	add.w	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f103 0208 	add.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d103      	bne.n	80026a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e00c      	b.n	80026bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3308      	adds	r3, #8
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e002      	b.n	80026b0 <vListInsert+0x2e>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d2f6      	bcs.n	80026aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	601a      	str	r2, [r3, #0]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6852      	ldr	r2, [r2, #4]
 8002714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d103      	bne.n	8002728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	1e5a      	subs	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	e7fe      	b.n	800276e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002770:	f002 f814 	bl	800479c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	441a      	add	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	3b01      	subs	r3, #1
 80027a2:	68f9      	ldr	r1, [r7, #12]
 80027a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	441a      	add	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	22ff      	movs	r2, #255	; 0xff
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d114      	bne.n	80027f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01a      	beq.n	8002804 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3310      	adds	r3, #16
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 f8de 	bl	8003994 <xTaskRemoveFromEventList>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <xQueueGenericReset+0xcc>)
 80027e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	e009      	b.n	8002804 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3310      	adds	r3, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fef3 	bl	80025e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3324      	adds	r3, #36	; 0x24
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff feee 	bl	80025e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002804:	f001 fff8 	bl	80047f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <xQueueGenericCreateStatic+0x28>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
 800283e:	e7fe      	b.n	800283e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <xQueueGenericCreateStatic+0x42>
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	e7fe      	b.n	8002858 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <xQueueGenericCreateStatic+0x4e>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <xQueueGenericCreateStatic+0x52>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <xQueueGenericCreateStatic+0x54>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <xQueueGenericCreateStatic+0x6c>
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	e7fe      	b.n	8002882 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <xQueueGenericCreateStatic+0x78>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <xQueueGenericCreateStatic+0x7c>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <xQueueGenericCreateStatic+0x7e>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <xQueueGenericCreateStatic+0x96>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028ae:	2350      	movs	r3, #80	; 0x50
 80028b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b50      	cmp	r3, #80	; 0x50
 80028b6:	d009      	beq.n	80028cc <xQueueGenericCreateStatic+0xb4>
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e7fe      	b.n	80028ca <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f805 	bl	80028fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e002      	b.n	8002920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800292c:	2101      	movs	r1, #1
 800292e:	69b8      	ldr	r0, [r7, #24]
 8002930:	f7ff ff0a 	bl	8002748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <xQueueGenericSend+0x30>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	e7fe      	b.n	8002972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <xQueueGenericSend+0x3e>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <xQueueGenericSend+0x42>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <xQueueGenericSend+0x44>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <xQueueGenericSend+0x5c>
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e7fe      	b.n	800299e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d103      	bne.n	80029ae <xQueueGenericSend+0x6a>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <xQueueGenericSend+0x6e>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <xQueueGenericSend+0x70>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <xQueueGenericSend+0x88>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029cc:	f001 f998 	bl	8003d00 <xTaskGetSchedulerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <xQueueGenericSend+0x98>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <xQueueGenericSend+0x9c>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <xQueueGenericSend+0x9e>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <xQueueGenericSend+0xb6>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029fa:	f001 fecf 	bl	800479c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <xQueueGenericSend+0xcc>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d129      	bne.n	8002a64 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a16:	f000 f9ff 	bl	8002e18 <prvCopyDataToQueue>
 8002a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 ffb3 	bl	8003994 <xTaskRemoveFromEventList>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <xQueueGenericSend+0x1f0>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	e00a      	b.n	8002a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <xQueueGenericSend+0x1f0>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a5c:	f001 fecc 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e063      	b.n	8002b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a6a:	f001 fec5 	bl	80047f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e05c      	b.n	8002b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 ffeb 	bl	8003a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a86:	f001 feb7 	bl	80047f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a8a:	f000 fd67 	bl	800355c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a8e:	f001 fe85 	bl	800479c <vPortEnterCritical>
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d103      	bne.n	8002aa8 <xQueueGenericSend+0x164>
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d103      	bne.n	8002abe <xQueueGenericSend+0x17a>
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002abe:	f001 fe9b 	bl	80047f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac2:	1d3a      	adds	r2, r7, #4
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 ffda 	bl	8003a84 <xTaskCheckForTimeOut>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d124      	bne.n	8002b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad8:	f000 fa96 	bl	8003008 <prvIsQueueFull>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d018      	beq.n	8002b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 ff04 	bl	80038f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af2:	f000 fa21 	bl	8002f38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002af6:	f000 fd3f 	bl	8003578 <xTaskResumeAll>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af7c 	bne.w	80029fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xQueueGenericSend+0x1f0>)
 8002b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	e772      	b.n	80029fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b16:	f000 fa0f 	bl	8002f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b1a:	f000 fd2d 	bl	8003578 <xTaskResumeAll>
 8002b1e:	e76c      	b.n	80029fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b22:	f000 fa09 	bl	8002f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b26:	f000 fd27 	bl	8003578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3738      	adds	r7, #56	; 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <xQueueGenericSendFromISR+0x2c>
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	e7fe      	b.n	8002b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSendFromISR+0x3a>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSendFromISR+0x3e>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSendFromISR+0x40>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <xQueueGenericSendFromISR+0x58>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <xQueueGenericSendFromISR+0x66>
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x6a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSendFromISR+0x6c>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <xQueueGenericSendFromISR+0x84>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bbc:	f001 feca 	bl	8004954 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	61ba      	str	r2, [r7, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <xQueueGenericSendFromISR+0xb6>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d12c      	bne.n	8002c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfe:	f000 f90b 	bl	8002e18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d112      	bne.n	8002c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	3324      	adds	r3, #36	; 0x24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 febb 	bl	8003994 <xTaskRemoveFromEventList>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e007      	b.n	8002c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c42:	2301      	movs	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c46:	e001      	b.n	8002c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3738      	adds	r7, #56	; 0x38
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <xQueueReceive+0x2e>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	e7fe      	b.n	8002c8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueReceive+0x3c>
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueReceive+0x40>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueReceive+0x42>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <xQueueReceive+0x5a>
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cba:	f001 f821 	bl	8003d00 <xTaskGetSchedulerState>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <xQueueReceive+0x6a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <xQueueReceive+0x6e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueReceive+0x70>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <xQueueReceive+0x88>
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ce8:	f001 fd58 	bl	800479c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01f      	beq.n	8002d38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfc:	f000 f8f6 	bl	8002eec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00f      	beq.n	8002d30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	3310      	adds	r3, #16
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fe3d 	bl	8003994 <xTaskRemoveFromEventList>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <xQueueReceive+0x1b4>)
 8002d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d30:	f001 fd62 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e069      	b.n	8002e0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d3e:	f001 fd5b 	bl	80047f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e062      	b.n	8002e0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fe81 	bl	8003a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d5a:	f001 fd4d 	bl	80047f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d5e:	f000 fbfd 	bl	800355c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d62:	f001 fd1b 	bl	800479c <vPortEnterCritical>
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d103      	bne.n	8002d7c <xQueueReceive+0x11c>
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d103      	bne.n	8002d92 <xQueueReceive+0x132>
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d92:	f001 fd31 	bl	80047f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d96:	1d3a      	adds	r2, r7, #4
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fe70 	bl	8003a84 <xTaskCheckForTimeOut>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d123      	bne.n	8002df2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dac:	f000 f916 	bl	8002fdc <prvIsQueueEmpty>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fd9a 	bl	80038f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc6:	f000 f8b7 	bl	8002f38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dca:	f000 fbd5 	bl	8003578 <xTaskResumeAll>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d189      	bne.n	8002ce8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <xQueueReceive+0x1b4>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	e780      	b.n	8002ce8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de8:	f000 f8a6 	bl	8002f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dec:	f000 fbc4 	bl	8003578 <xTaskResumeAll>
 8002df0:	e77a      	b.n	8002ce8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df4:	f000 f8a0 	bl	8002f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df8:	f000 fbbe 	bl	8003578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 f8ed 	bl	8002fdc <prvIsQueueEmpty>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f43f af6f 	beq.w	8002ce8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d14d      	bne.n	8002eda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ff7a 	bl	8003d3c <xTaskPriorityDisinherit>
 8002e48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e043      	b.n	8002eda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d119      	bne.n	8002e8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6858      	ldr	r0, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	461a      	mov	r2, r3
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	f001 ffae 	bl	8004dc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d32b      	bcc.n	8002eda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e026      	b.n	8002eda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68d8      	ldr	r0, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	f001 ff94 	bl	8004dc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	425b      	negs	r3, r3
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d207      	bcs.n	8002ec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	441a      	add	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d105      	bne.n	8002eda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ee2:	697b      	ldr	r3, [r7, #20]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d018      	beq.n	8002f30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	441a      	add	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d303      	bcc.n	8002f20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68d9      	ldr	r1, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	f001 ff4a 	bl	8004dc4 <memcpy>
	}
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f40:	f001 fc2c 	bl	800479c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f4c:	e011      	b.n	8002f72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd1a 	bl	8003994 <xTaskRemoveFromEventList>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f66:	f000 fded 	bl	8003b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dce9      	bgt.n	8002f4e <prvUnlockQueue+0x16>
 8002f7a:	e000      	b.n	8002f7e <prvUnlockQueue+0x46>
					break;
 8002f7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f86:	f001 fc37 	bl	80047f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f8a:	f001 fc07 	bl	800479c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f96:	e011      	b.n	8002fbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fcf5 	bl	8003994 <xTaskRemoveFromEventList>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fb0:	f000 fdc8 	bl	8003b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fb4:	7bbb      	ldrb	r3, [r7, #14]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dce9      	bgt.n	8002f98 <prvUnlockQueue+0x60>
 8002fc4:	e000      	b.n	8002fc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fd0:	f001 fc12 	bl	80047f8 <vPortExitCritical>
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fe4:	f001 fbda 	bl	800479c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e001      	b.n	8002ffa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ffa:	f001 fbfd 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003010:	f001 fbc4 	bl	800479c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	429a      	cmp	r2, r3
 800301e:	d102      	bne.n	8003026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e001      	b.n	800302a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800302a:	f001 fbe5 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e014      	b.n	8003072 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <vQueueAddToRegistry+0x4c>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003054:	490b      	ldr	r1, [pc, #44]	; (8003084 <vQueueAddToRegistry+0x4c>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <vQueueAddToRegistry+0x4c>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800306a:	e005      	b.n	8003078 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b07      	cmp	r3, #7
 8003076:	d9e7      	bls.n	8003048 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	200049e0 	.word	0x200049e0

08003088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003098:	f001 fb80 	bl	800479c <vPortEnterCritical>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d103      	bne.n	80030b2 <vQueueWaitForMessageRestricted+0x2a>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d103      	bne.n	80030c8 <vQueueWaitForMessageRestricted+0x40>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	f001 fb96 	bl	80047f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fc2f 	bl	8003940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f7ff ff28 	bl	8002f38 <prvUnlockQueue>
	}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <xTaskCreateStatic+0x28>
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	e7fe      	b.n	8003116 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <xTaskCreateStatic+0x42>
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e7fe      	b.n	8003130 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003132:	235c      	movs	r3, #92	; 0x5c
 8003134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b5c      	cmp	r3, #92	; 0x5c
 800313a:	d009      	beq.n	8003150 <xTaskCreateStatic+0x60>
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e7fe      	b.n	800314e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003150:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01e      	beq.n	8003196 <xTaskCreateStatic+0xa6>
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01b      	beq.n	8003196 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003166:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003170:	2300      	movs	r3, #0
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9302      	str	r3, [sp, #8]
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f850 	bl	800322e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003190:	f000 f8dc 	bl	800334c <prvAddNewTaskToReadyList>
 8003194:	e001      	b.n	800319a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800319a:	697b      	ldr	r3, [r7, #20]
	}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 fc09 	bl	80049d0 <pvPortMalloc>
 80031be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031c6:	205c      	movs	r0, #92	; 0x5c
 80031c8:	f001 fc02 	bl	80049d0 <pvPortMalloc>
 80031cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
 80031da:	e005      	b.n	80031e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031dc:	6978      	ldr	r0, [r7, #20]
 80031de:	f001 fcb9 	bl	8004b54 <vPortFree>
 80031e2:	e001      	b.n	80031e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d017      	beq.n	800321e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	2300      	movs	r3, #0
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f80e 	bl	800322e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003212:	69f8      	ldr	r0, [r7, #28]
 8003214:	f000 f89a 	bl	800334c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	e002      	b.n	8003224 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003224:	69bb      	ldr	r3, [r7, #24]
	}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b088      	sub	sp, #32
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	461a      	mov	r2, r3
 8003246:	21a5      	movs	r1, #165	; 0xa5
 8003248:	f001 fdc7 	bl	8004dda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003256:	3b01      	subs	r3, #1
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f023 0307 	bic.w	r3, r3, #7
 8003264:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <prvInitialiseNewTask+0x56>
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e7fe      	b.n	8003282 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01f      	beq.n	80032ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e012      	b.n	80032b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	7819      	ldrb	r1, [r3, #0]
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	3334      	adds	r3, #52	; 0x34
 80032a0:	460a      	mov	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d9e9      	bls.n	8003290 <prvInitialiseNewTask+0x62>
 80032bc:	e000      	b.n	80032c0 <prvInitialiseNewTask+0x92>
			{
				break;
 80032be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c8:	e003      	b.n	80032d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2b37      	cmp	r3, #55	; 0x37
 80032d6:	d901      	bls.n	80032dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032d8:	2337      	movs	r3, #55	; 0x37
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	3304      	adds	r3, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f994 	bl	8002620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f98f 	bl	8002620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2200      	movs	r2, #0
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	69b8      	ldr	r0, [r7, #24]
 800332c:	f001 f90c 	bl	8004548 <pxPortInitialiseStack>
 8003330:	4602      	mov	r2, r0
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003342:	bf00      	nop
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003354:	f001 fa22 	bl	800479c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <prvAddNewTaskToReadyList+0xc4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <prvAddNewTaskToReadyList+0xc4>)
 8003360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800336a:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <prvAddNewTaskToReadyList+0xc8>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <prvAddNewTaskToReadyList+0xc4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d110      	bne.n	800339a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003378:	f000 fc08 	bl	8003b8c <prvInitialiseTaskLists>
 800337c:	e00d      	b.n	800339a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <prvAddNewTaskToReadyList+0xcc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d802      	bhi.n	800339a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <prvAddNewTaskToReadyList+0xc8>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <prvAddNewTaskToReadyList+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <prvAddNewTaskToReadyList+0xd0>)
 80033a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <prvAddNewTaskToReadyList+0xd0>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <prvAddNewTaskToReadyList+0xd4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d903      	bls.n	80033c0 <prvAddNewTaskToReadyList+0x74>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <prvAddNewTaskToReadyList+0xd4>)
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <prvAddNewTaskToReadyList+0xd8>)
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7ff f92f 	bl	800263a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033dc:	f001 fa0c 	bl	80047f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <prvAddNewTaskToReadyList+0xcc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvAddNewTaskToReadyList+0xc8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d207      	bcs.n	8003406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <prvAddNewTaskToReadyList+0xdc>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000bc4 	.word	0x20000bc4
 8003414:	200006f0 	.word	0x200006f0
 8003418:	20000bd0 	.word	0x20000bd0
 800341c:	20000be0 	.word	0x20000be0
 8003420:	20000bcc 	.word	0x20000bcc
 8003424:	200006f4 	.word	0x200006f4
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <vTaskDelay+0x60>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <vTaskDelay+0x2e>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	e7fe      	b.n	8003458 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800345a:	f000 f87f 	bl	800355c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800345e:	2100      	movs	r1, #0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fcd7 	bl	8003e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003466:	f000 f887 	bl	8003578 <xTaskResumeAll>
 800346a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <vTaskDelay+0x64>)
 8003474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000bec 	.word	0x20000bec
 8003490:	e000ed04 	.word	0xe000ed04

08003494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034a2:	463a      	mov	r2, r7
 80034a4:	1d39      	adds	r1, r7, #4
 80034a6:	f107 0308 	add.w	r3, r7, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff f864 	bl	8002578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2300      	movs	r3, #0
 80034c0:	460a      	mov	r2, r1
 80034c2:	4920      	ldr	r1, [pc, #128]	; (8003544 <vTaskStartScheduler+0xb0>)
 80034c4:	4820      	ldr	r0, [pc, #128]	; (8003548 <vTaskStartScheduler+0xb4>)
 80034c6:	f7ff fe13 	bl	80030f0 <xTaskCreateStatic>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <vTaskStartScheduler+0xb8>)
 80034ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <vTaskStartScheduler+0xb8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e001      	b.n	80034e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034e8:	f000 fce8 	bl	8003ebc <xTimerCreateTimerTask>
 80034ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d115      	bne.n	8003520 <vTaskStartScheduler+0x8c>
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <vTaskStartScheduler+0xbc>)
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <vTaskStartScheduler+0xc0>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <vTaskStartScheduler+0xc4>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800351a:	f001 f8a1 	bl	8004660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800351e:	e00d      	b.n	800353c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d109      	bne.n	800353c <vTaskStartScheduler+0xa8>
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e7fe      	b.n	800353a <vTaskStartScheduler+0xa6>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	08004e18 	.word	0x08004e18
 8003548:	08003b5d 	.word	0x08003b5d
 800354c:	20000be8 	.word	0x20000be8
 8003550:	20000be4 	.word	0x20000be4
 8003554:	20000bd0 	.word	0x20000bd0
 8003558:	20000bc8 	.word	0x20000bc8

0800355c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <vTaskSuspendAll+0x18>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a03      	ldr	r2, [pc, #12]	; (8003574 <vTaskSuspendAll+0x18>)
 8003568:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000bec 	.word	0x20000bec

08003578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <xTaskResumeAll+0x114>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <xTaskResumeAll+0x2a>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	e7fe      	b.n	80035a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035a2:	f001 f8fb 	bl	800479c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035a6:	4b39      	ldr	r3, [pc, #228]	; (800368c <xTaskResumeAll+0x114>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	4a37      	ldr	r2, [pc, #220]	; (800368c <xTaskResumeAll+0x114>)
 80035ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <xTaskResumeAll+0x114>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d162      	bne.n	800367e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <xTaskResumeAll+0x118>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05e      	beq.n	800367e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c0:	e02f      	b.n	8003622 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <xTaskResumeAll+0x11c>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3318      	adds	r3, #24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff f890 	bl	80026f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f88b 	bl	80026f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <xTaskResumeAll+0x120>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d903      	bls.n	80035f2 <xTaskResumeAll+0x7a>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <xTaskResumeAll+0x120>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <xTaskResumeAll+0x124>)
 8003600:	441a      	add	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7ff f816 	bl	800263a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <xTaskResumeAll+0x128>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <xTaskResumeAll+0x12c>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <xTaskResumeAll+0x11c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1cb      	bne.n	80035c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003630:	f000 fb46 	bl	8003cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <xTaskResumeAll+0x130>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003640:	f000 f846 	bl	80036d0 <xTaskIncrementTick>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <xTaskResumeAll+0x12c>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f1      	bne.n	8003640 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <xTaskResumeAll+0x130>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <xTaskResumeAll+0x12c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <xTaskResumeAll+0x134>)
 8003670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800367e:	f001 f8bb 	bl	80047f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000bec 	.word	0x20000bec
 8003690:	20000bc4 	.word	0x20000bc4
 8003694:	20000b84 	.word	0x20000b84
 8003698:	20000bcc 	.word	0x20000bcc
 800369c:	200006f4 	.word	0x200006f4
 80036a0:	200006f0 	.word	0x200006f0
 80036a4:	20000bd8 	.word	0x20000bd8
 80036a8:	20000bd4 	.word	0x20000bd4
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <xTaskGetTickCount+0x1c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036bc:	687b      	ldr	r3, [r7, #4]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000bc8 	.word	0x20000bc8

080036d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <xTaskIncrementTick+0x144>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f040 8088 	bne.w	80037f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <xTaskIncrementTick+0x148>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036ec:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <xTaskIncrementTick+0x148>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11f      	bne.n	8003738 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80036f8:	4b48      	ldr	r3, [pc, #288]	; (800381c <xTaskIncrementTick+0x14c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <xTaskIncrementTick+0x46>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	e7fe      	b.n	8003714 <xTaskIncrementTick+0x44>
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <xTaskIncrementTick+0x14c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <xTaskIncrementTick+0x150>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3e      	ldr	r2, [pc, #248]	; (800381c <xTaskIncrementTick+0x14c>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <xTaskIncrementTick+0x150>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <xTaskIncrementTick+0x154>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3301      	adds	r3, #1
 8003730:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <xTaskIncrementTick+0x154>)
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	f000 fac4 	bl	8003cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <xTaskIncrementTick+0x158>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	429a      	cmp	r2, r3
 8003740:	d349      	bcc.n	80037d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <xTaskIncrementTick+0x14c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <xTaskIncrementTick+0x158>)
 800374e:	f04f 32ff 	mov.w	r2, #4294967295
 8003752:	601a      	str	r2, [r3, #0]
					break;
 8003754:	e03f      	b.n	80037d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003756:	4b31      	ldr	r3, [pc, #196]	; (800381c <xTaskIncrementTick+0x14c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d203      	bcs.n	8003776 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800376e:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <xTaskIncrementTick+0x158>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003774:	e02f      	b.n	80037d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3304      	adds	r3, #4
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ffba 	bl	80026f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	3318      	adds	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe ffb1 	bl	80026f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <xTaskIncrementTick+0x15c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d903      	bls.n	80037a6 <xTaskIncrementTick+0xd6>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <xTaskIncrementTick+0x15c>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <xTaskIncrementTick+0x160>)
 80037b4:	441a      	add	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7fe ff3c 	bl	800263a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <xTaskIncrementTick+0x164>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3b8      	bcc.n	8003742 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d4:	e7b5      	b.n	8003742 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <xTaskIncrementTick+0x164>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4914      	ldr	r1, [pc, #80]	; (8003830 <xTaskIncrementTick+0x160>)
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d907      	bls.n	80037fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e004      	b.n	80037fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <xTaskIncrementTick+0x168>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <xTaskIncrementTick+0x168>)
 80037fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <xTaskIncrementTick+0x16c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800380a:	697b      	ldr	r3, [r7, #20]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000bec 	.word	0x20000bec
 8003818:	20000bc8 	.word	0x20000bc8
 800381c:	20000b7c 	.word	0x20000b7c
 8003820:	20000b80 	.word	0x20000b80
 8003824:	20000bdc 	.word	0x20000bdc
 8003828:	20000be4 	.word	0x20000be4
 800382c:	20000bcc 	.word	0x20000bcc
 8003830:	200006f4 	.word	0x200006f4
 8003834:	200006f0 	.word	0x200006f0
 8003838:	20000bd4 	.word	0x20000bd4
 800383c:	20000bd8 	.word	0x20000bd8

08003840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <vTaskSwitchContext+0xa4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <vTaskSwitchContext+0xa8>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003854:	e040      	b.n	80038d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <vTaskSwitchContext+0xa8>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <vTaskSwitchContext+0xac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e00f      	b.n	8003884 <vTaskSwitchContext+0x44>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <vTaskSwitchContext+0x3e>
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	e7fe      	b.n	800387c <vTaskSwitchContext+0x3c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b01      	subs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	491a      	ldr	r1, [pc, #104]	; (80038f0 <vTaskSwitchContext+0xb0>)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0e5      	beq.n	8003864 <vTaskSwitchContext+0x24>
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <vTaskSwitchContext+0xb0>)
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3308      	adds	r3, #8
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d104      	bne.n	80038c8 <vTaskSwitchContext+0x88>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <vTaskSwitchContext+0xb4>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4a06      	ldr	r2, [pc, #24]	; (80038ec <vTaskSwitchContext+0xac>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	20000bec 	.word	0x20000bec
 80038e8:	20000bd8 	.word	0x20000bd8
 80038ec:	20000bcc 	.word	0x20000bcc
 80038f0:	200006f4 	.word	0x200006f4
 80038f4:	200006f0 	.word	0x200006f0

080038f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <vTaskPlaceOnEventList+0x24>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e7fe      	b.n	800391a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <vTaskPlaceOnEventList+0x44>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3318      	adds	r3, #24
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fe feac 	bl	8002682 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800392a:	2101      	movs	r1, #1
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	f000 fa71 	bl	8003e14 <prvAddCurrentTaskToDelayedList>
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200006f0 	.word	0x200006f0

08003940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <vTaskPlaceOnEventListRestricted+0x26>
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e7fe      	b.n	8003964 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <vTaskPlaceOnEventListRestricted+0x50>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3318      	adds	r3, #24
 800396c:	4619      	mov	r1, r3
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7fe fe63 	bl	800263a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f000 fa46 	bl	8003e14 <prvAddCurrentTaskToDelayedList>
	}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200006f0 	.word	0x200006f0

08003994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <xTaskRemoveFromEventList+0x2a>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e7fe      	b.n	80039bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	3318      	adds	r3, #24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fe96 	bl	80026f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <xTaskRemoveFromEventList+0xac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11d      	bne.n	8003a0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fe8d 	bl	80026f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <xTaskRemoveFromEventList+0xb0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <xTaskRemoveFromEventList+0x5a>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <xTaskRemoveFromEventList+0xb0>)
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <xTaskRemoveFromEventList+0xb4>)
 80039fc:	441a      	add	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f7fe fe18 	bl	800263a <vListInsertEnd>
 8003a0a:	e005      	b.n	8003a18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4619      	mov	r1, r3
 8003a12:	480e      	ldr	r0, [pc, #56]	; (8003a4c <xTaskRemoveFromEventList+0xb8>)
 8003a14:	f7fe fe11 	bl	800263a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <xTaskRemoveFromEventList+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d905      	bls.n	8003a32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <xTaskRemoveFromEventList+0xc0>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e001      	b.n	8003a36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a36:	697b      	ldr	r3, [r7, #20]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000bec 	.word	0x20000bec
 8003a44:	20000bcc 	.word	0x20000bcc
 8003a48:	200006f4 	.word	0x200006f4
 8003a4c:	20000b84 	.word	0x20000b84
 8003a50:	200006f0 	.word	0x200006f0
 8003a54:	20000bd8 	.word	0x20000bd8

08003a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <vTaskInternalSetTimeOutState+0x24>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <vTaskInternalSetTimeOutState+0x28>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	605a      	str	r2, [r3, #4]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	20000bdc 	.word	0x20000bdc
 8003a80:	20000bc8 	.word	0x20000bc8

08003a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <xTaskCheckForTimeOut+0x24>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e7fe      	b.n	8003aa6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <xTaskCheckForTimeOut+0x3e>
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003ac2:	f000 fe6b 	bl	800479c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <xTaskCheckForTimeOut+0xb8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d102      	bne.n	8003ae6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	e023      	b.n	8003b2e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <xTaskCheckForTimeOut+0xbc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d007      	beq.n	8003b02 <xTaskCheckForTimeOut+0x7e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e015      	b.n	8003b2e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d20b      	bcs.n	8003b24 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff9d 	bl	8003a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e004      	b.n	8003b2e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f000 fe63 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 8003b32:	69fb      	ldr	r3, [r7, #28]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000bc8 	.word	0x20000bc8
 8003b40:	20000bdc 	.word	0x20000bdc

08003b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <vTaskMissedYield+0x14>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000bd8 	.word	0x20000bd8

08003b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b64:	f000 f852 	bl	8003c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <prvIdleTask+0x28>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d9f9      	bls.n	8003b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <prvIdleTask+0x2c>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b80:	e7f0      	b.n	8003b64 <prvIdleTask+0x8>
 8003b82:	bf00      	nop
 8003b84:	200006f4 	.word	0x200006f4
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e00c      	b.n	8003bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <prvInitialiseTaskLists+0x60>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fd1a 	bl	80025e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b37      	cmp	r3, #55	; 0x37
 8003bb6:	d9ef      	bls.n	8003b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bb8:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bba:	f7fe fd11 	bl	80025e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bbe:	480d      	ldr	r0, [pc, #52]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003bc0:	f7fe fd0e 	bl	80025e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003bc6:	f7fe fd0b 	bl	80025e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bcc:	f7fe fd08 	bl	80025e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <prvInitialiseTaskLists+0x74>)
 8003bd2:	f7fe fd05 	bl	80025e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <prvInitialiseTaskLists+0x78>)
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvInitialiseTaskLists+0x7c>)
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200006f4 	.word	0x200006f4
 8003bf0:	20000b54 	.word	0x20000b54
 8003bf4:	20000b68 	.word	0x20000b68
 8003bf8:	20000b84 	.word	0x20000b84
 8003bfc:	20000b98 	.word	0x20000b98
 8003c00:	20000bb0 	.word	0x20000bb0
 8003c04:	20000b7c 	.word	0x20000b7c
 8003c08:	20000b80 	.word	0x20000b80

08003c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c12:	e019      	b.n	8003c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c14:	f000 fdc2 	bl	800479c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <prvCheckTasksWaitingTermination+0x4c>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fd65 	bl	80026f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <prvCheckTasksWaitingTermination+0x50>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <prvCheckTasksWaitingTermination+0x50>)
 8003c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c3e:	f000 fddb 	bl	80047f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f80e 	bl	8003c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e1      	bne.n	8003c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000b98 	.word	0x20000b98
 8003c5c:	20000bc4 	.word	0x20000bc4
 8003c60:	20000bac 	.word	0x20000bac

08003c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 ff6a 	bl	8004b54 <vPortFree>
				vPortFree( pxTCB );
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 ff67 	bl	8004b54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c86:	e017      	b.n	8003cb8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d103      	bne.n	8003c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ff5e 	bl	8004b54 <vPortFree>
	}
 8003c98:	e00e      	b.n	8003cb8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d009      	beq.n	8003cb8 <prvDeleteTCB+0x54>
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e7fe      	b.n	8003cb6 <prvDeleteTCB+0x52>
	}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <prvResetNextTaskUnblockTime+0x38>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvResetNextTaskUnblockTime+0x3c>)
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd8:	e008      	b.n	8003cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <prvResetNextTaskUnblockTime+0x38>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <prvResetNextTaskUnblockTime+0x3c>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000b7c 	.word	0x20000b7c
 8003cfc:	20000be4 	.word	0x20000be4

08003d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <xTaskGetSchedulerState+0x34>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	607b      	str	r3, [r7, #4]
 8003d12:	e008      	b.n	8003d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <xTaskGetSchedulerState+0x38>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	e001      	b.n	8003d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d26:	687b      	ldr	r3, [r7, #4]
	}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000bd0 	.word	0x20000bd0
 8003d38:	20000bec 	.word	0x20000bec

08003d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d054      	beq.n	8003dfc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <xTaskPriorityDisinherit+0xcc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d009      	beq.n	8003d70 <xTaskPriorityDisinherit+0x34>
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e7fe      	b.n	8003d6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <xTaskPriorityDisinherit+0x50>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	e7fe      	b.n	8003d8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d02c      	beq.n	8003dfc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d128      	bne.n	8003dfc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fca0 	bl	80026f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <xTaskPriorityDisinherit+0xd0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d903      	bls.n	8003ddc <xTaskPriorityDisinherit+0xa0>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <xTaskPriorityDisinherit+0xd0>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <xTaskPriorityDisinherit+0xd4>)
 8003dea:	441a      	add	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f7fe fc21 	bl	800263a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dfc:	697b      	ldr	r3, [r7, #20]
	}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	200006f0 	.word	0x200006f0
 8003e0c:	20000bcc 	.word	0x20000bcc
 8003e10:	200006f4 	.word	0x200006f4

08003e14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fc62 	bl	80026f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d10a      	bne.n	8003e4e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4819      	ldr	r0, [pc, #100]	; (8003eac <prvAddCurrentTaskToDelayedList+0x98>)
 8003e48:	f7fe fbf7 	bl	800263a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e4c:	e026      	b.n	8003e9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d209      	bcs.n	8003e7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fe fc05 	bl	8002682 <vListInsert>
}
 8003e78:	e010      	b.n	8003e9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fe fbfb 	bl	8002682 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d202      	bcs.n	8003e9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e96:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000bc8 	.word	0x20000bc8
 8003ea8:	200006f0 	.word	0x200006f0
 8003eac:	20000bb0 	.word	0x20000bb0
 8003eb0:	20000b80 	.word	0x20000b80
 8003eb4:	20000b7c 	.word	0x20000b7c
 8003eb8:	20000be4 	.word	0x20000be4

08003ebc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ec6:	f000 faff 	bl	80044c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <xTimerCreateTimerTask+0x80>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d021      	beq.n	8003f16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eda:	1d3a      	adds	r2, r7, #4
 8003edc:	f107 0108 	add.w	r1, r7, #8
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fb61 	bl	80025ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	460a      	mov	r2, r1
 8003efc:	4910      	ldr	r1, [pc, #64]	; (8003f40 <xTimerCreateTimerTask+0x84>)
 8003efe:	4811      	ldr	r0, [pc, #68]	; (8003f44 <xTimerCreateTimerTask+0x88>)
 8003f00:	f7ff f8f6 	bl	80030f0 <xTaskCreateStatic>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <xTimerCreateTimerTask+0x8c>)
 8003f08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <xTimerCreateTimerTask+0x8c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f12:	2301      	movs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <xTimerCreateTimerTask+0x74>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	e7fe      	b.n	8003f2e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003f30:	697b      	ldr	r3, [r7, #20]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000c20 	.word	0x20000c20
 8003f40:	08004e20 	.word	0x08004e20
 8003f44:	0800407d 	.word	0x0800407d
 8003f48:	20000c24 	.word	0x20000c24

08003f4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <xTimerGenericCommand+0x2c>
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e7fe      	b.n	8003f76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <xTimerGenericCommand+0x94>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02a      	beq.n	8003fd6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	dc18      	bgt.n	8003fc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f92:	f7ff feb5 	bl	8003d00 <xTaskGetSchedulerState>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d109      	bne.n	8003fb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <xTimerGenericCommand+0x94>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	f107 0110 	add.w	r1, r7, #16
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa8:	f7fe fccc 	bl	8002944 <xQueueGenericSend>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24
 8003fae:	e012      	b.n	8003fd6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <xTimerGenericCommand+0x94>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	f107 0110 	add.w	r1, r7, #16
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f7fe fcc2 	bl	8002944 <xQueueGenericSend>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24
 8003fc2:	e008      	b.n	8003fd6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <xTimerGenericCommand+0x94>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f107 0110 	add.w	r1, r7, #16
 8003fcc:	2300      	movs	r3, #0
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	f7fe fdb2 	bl	8002b38 <xQueueGenericSendFromISR>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000c20 	.word	0x20000c20

08003fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <prvProcessExpiredTimer+0x94>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fb79 	bl	80026f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	18d1      	adds	r1, r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f000 f8d1 	bl	80041c4 <prvInsertTimerInActiveList>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01e      	beq.n	8004066 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	2100      	movs	r1, #0
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7ff ff8a 	bl	8003f4c <xTimerGenericCommand>
 8004038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d112      	bne.n	8004066 <prvProcessExpiredTimer+0x82>
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e7fe      	b.n	8004052 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	4798      	blx	r3
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000c18 	.word	0x20000c18

0800407c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004084:	f107 0308 	add.w	r3, r7, #8
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f857 	bl	800413c <prvGetNextExpireTime>
 800408e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f803 	bl	80040a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800409a:	f000 f8d5 	bl	8004248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800409e:	e7f1      	b.n	8004084 <prvTimerTask+0x8>

080040a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040aa:	f7ff fa57 	bl	800355c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f866 	bl	8004184 <prvSampleTimeNow>
 80040b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d130      	bne.n	8004122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <prvProcessTimerOrBlockTask+0x3c>
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d806      	bhi.n	80040dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040ce:	f7ff fa53 	bl	8003578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff85 	bl	8003fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040da:	e024      	b.n	8004126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <prvProcessTimerOrBlockTask+0x90>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <prvProcessTimerOrBlockTask+0x50>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <prvProcessTimerOrBlockTask+0x52>
 80040f0:	2300      	movs	r3, #0
 80040f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <prvProcessTimerOrBlockTask+0x94>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4619      	mov	r1, r3
 8004102:	f7fe ffc1 	bl	8003088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004106:	f7ff fa37 	bl	8003578 <xTaskResumeAll>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <prvProcessTimerOrBlockTask+0x98>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
}
 8004120:	e001      	b.n	8004126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004122:	f7ff fa29 	bl	8003578 <xTaskResumeAll>
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000c1c 	.word	0x20000c1c
 8004134:	20000c20 	.word	0x20000c20
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <prvGetNextExpireTime+0x44>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <prvGetNextExpireTime+0x16>
 800414e:	2201      	movs	r2, #1
 8004150:	e000      	b.n	8004154 <prvGetNextExpireTime+0x18>
 8004152:	2200      	movs	r2, #0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <prvGetNextExpireTime+0x44>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e001      	b.n	8004170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000c18 	.word	0x20000c18

08004184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800418c:	f7ff fa90 	bl	80036b0 <xTaskGetTickCount>
 8004190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <prvSampleTimeNow+0x3c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d205      	bcs.n	80041a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800419c:	f000 f930 	bl	8004400 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e002      	b.n	80041ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <prvSampleTimeNow+0x3c>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041b4:	68fb      	ldr	r3, [r7, #12]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000c28 	.word	0x20000c28

080041c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d812      	bhi.n	8004210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e01b      	b.n	8004236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <prvInsertTimerInActiveList+0x7c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe fa3a 	bl	8002682 <vListInsert>
 800420e:	e012      	b.n	8004236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d206      	bcs.n	8004226 <prvInsertTimerInActiveList+0x62>
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d302      	bcc.n	8004226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e007      	b.n	8004236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <prvInsertTimerInActiveList+0x80>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fe fa26 	bl	8002682 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004236:	697b      	ldr	r3, [r7, #20]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000c1c 	.word	0x20000c1c
 8004244:	20000c18 	.word	0x20000c18

08004248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	; 0x38
 800424c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800424e:	e0c6      	b.n	80043de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da17      	bge.n	8004286 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	3304      	adds	r3, #4
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <prvProcessReceivedCommands+0x2e>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e7fe      	b.n	8004274 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	6850      	ldr	r0, [r2, #4]
 800427e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	4611      	mov	r1, r2
 8004284:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f2c0 80a7 	blt.w	80043dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fa28 	bl	80026f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042a4:	463b      	mov	r3, r7
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff6c 	bl	8004184 <prvSampleTimeNow>
 80042ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	f200 8094 	bhi.w	80043de <prvProcessReceivedCommands+0x196>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <prvProcessReceivedCommands+0x74>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e5 	.word	0x080042e5
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042e5 	.word	0x080042e5
 80042c8:	08004357 	.word	0x08004357
 80042cc:	0800436b 	.word	0x0800436b
 80042d0:	080043b3 	.word	0x080043b3
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042e5 	.word	0x080042e5
 80042dc:	08004357 	.word	0x08004357
 80042e0:	0800436b 	.word	0x0800436b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	18d1      	adds	r1, r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004304:	f7ff ff5e 	bl	80041c4 <prvInsertTimerInActiveList>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d067      	beq.n	80043de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d05c      	beq.n	80043de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	441a      	add	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	2100      	movs	r1, #0
 8004334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004336:	f7ff fe09 	bl	8003f4c <xTimerGenericCommand>
 800433a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d14d      	bne.n	80043de <prvProcessReceivedCommands+0x196>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e7fe      	b.n	8004354 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004368:	e039      	b.n	80043de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <prvProcessReceivedCommands+0x156>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e7fe      	b.n	800439c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	18d1      	adds	r1, r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ac:	f7ff ff0a 	bl	80041c4 <prvInsertTimerInActiveList>
					break;
 80043b0:	e015      	b.n	80043de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80043c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c2:	f000 fbc7 	bl	8004b54 <vPortFree>
 80043c6:	e00a      	b.n	80043de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043da:	e000      	b.n	80043de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <prvProcessReceivedCommands+0x1b4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	1d39      	adds	r1, r7, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc3a 	bl	8002c60 <xQueueReceive>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af2e 	bne.w	8004250 <prvProcessReceivedCommands+0x8>
	}
}
 80043f4:	bf00      	nop
 80043f6:	3730      	adds	r7, #48	; 0x30
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000c20 	.word	0x20000c20

08004400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004406:	e047      	b.n	8004498 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe f967 	bl	80026f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02d      	beq.n	8004498 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90e      	bls.n	800446c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800445a:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe f90c 	bl	8002682 <vListInsert>
 800446a:	e015      	b.n	8004498 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	2100      	movs	r1, #0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fd68 	bl	8003f4c <xTimerGenericCommand>
 800447c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <prvSwitchTimerLists+0x98>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	e7fe      	b.n	8004496 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1b2      	bne.n	8004408 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <prvSwitchTimerLists+0xc4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 80044ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <prvSwitchTimerLists+0xc4>)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6013      	str	r3, [r2, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000c18 	.word	0x20000c18
 80044c4:	20000c1c 	.word	0x20000c1c

080044c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ce:	f000 f965 	bl	800479c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <prvCheckForValidListAndQueue+0x60>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d120      	bne.n	800451c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044da:	4814      	ldr	r0, [pc, #80]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 80044dc:	f7fe f880 	bl	80025e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044e0:	4813      	ldr	r0, [pc, #76]	; (8004530 <prvCheckForValidListAndQueue+0x68>)
 80044e2:	f7fe f87d 	bl	80025e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <prvCheckForValidListAndQueue+0x6c>)
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <prvCheckForValidListAndQueue+0x64>)
 80044ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <prvCheckForValidListAndQueue+0x70>)
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <prvCheckForValidListAndQueue+0x68>)
 80044f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <prvCheckForValidListAndQueue+0x74>)
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <prvCheckForValidListAndQueue+0x78>)
 80044fa:	2110      	movs	r1, #16
 80044fc:	200a      	movs	r0, #10
 80044fe:	f7fe f98b 	bl	8002818 <xQueueGenericCreateStatic>
 8004502:	4602      	mov	r2, r0
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <prvCheckForValidListAndQueue+0x60>)
 8004506:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <prvCheckForValidListAndQueue+0x60>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <prvCheckForValidListAndQueue+0x60>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	490b      	ldr	r1, [pc, #44]	; (8004544 <prvCheckForValidListAndQueue+0x7c>)
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fd8e 	bl	8003038 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800451c:	f000 f96c 	bl	80047f8 <vPortExitCritical>
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000c20 	.word	0x20000c20
 800452c:	20000bf0 	.word	0x20000bf0
 8004530:	20000c04 	.word	0x20000c04
 8004534:	20000c18 	.word	0x20000c18
 8004538:	20000c1c 	.word	0x20000c1c
 800453c:	20000ccc 	.word	0x20000ccc
 8004540:	20000c2c 	.word	0x20000c2c
 8004544:	08004e28 	.word	0x08004e28

08004548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b04      	subs	r3, #4
 8004558:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3b04      	subs	r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <pxPortInitialiseStack+0x64>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3b14      	subs	r3, #20
 8004582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3b04      	subs	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f06f 0202 	mvn.w	r2, #2
 8004596:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b20      	subs	r3, #32
 800459c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	080045b1 	.word	0x080045b1

080045b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <prvTaskExitError+0x50>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d009      	beq.n	80045d8 <prvTaskExitError+0x28>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e7fe      	b.n	80045d6 <prvTaskExitError+0x26>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045ea:	bf00      	nop
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0fc      	beq.n	80045ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
	...

08004610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004638:	4808      	ldr	r0, [pc, #32]	; (800465c <prvPortStartFirstTask+0x24>)
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f380 8808 	msr	MSP, r0
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8814 	msr	CONTROL, r0
 800464a:	b662      	cpsie	i
 800464c:	b661      	cpsie	f
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	df00      	svc	0
 8004658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800465a:	bf00      	nop
 800465c:	e000ed08 	.word	0xe000ed08

08004660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <xPortStartScheduler+0x118>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a44      	ldr	r2, [pc, #272]	; (800477c <xPortStartScheduler+0x11c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d109      	bne.n	8004684 <xPortStartScheduler+0x24>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e7fe      	b.n	8004682 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <xPortStartScheduler+0x118>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <xPortStartScheduler+0x120>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d109      	bne.n	80046a2 <xPortStartScheduler+0x42>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e7fe      	b.n	80046a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <xPortStartScheduler+0x124>)
 80046a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	22ff      	movs	r2, #255	; 0xff
 80046b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <xPortStartScheduler+0x128>)
 80046c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ca:	4b30      	ldr	r3, [pc, #192]	; (800478c <xPortStartScheduler+0x12c>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d0:	e009      	b.n	80046e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <xPortStartScheduler+0x12c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <xPortStartScheduler+0x12c>)
 80046da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d0ef      	beq.n	80046d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <xPortStartScheduler+0x12c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d009      	beq.n	8004712 <xPortStartScheduler+0xb2>
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	e7fe      	b.n	8004710 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004712:	4b1e      	ldr	r3, [pc, #120]	; (800478c <xPortStartScheduler+0x12c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <xPortStartScheduler+0x12c>)
 800471a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <xPortStartScheduler+0x12c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <xPortStartScheduler+0x12c>)
 8004726:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004730:	4b17      	ldr	r3, [pc, #92]	; (8004790 <xPortStartScheduler+0x130>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <xPortStartScheduler+0x130>)
 8004736:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800473a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <xPortStartScheduler+0x130>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <xPortStartScheduler+0x130>)
 8004742:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004746:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004748:	f000 f8d6 	bl	80048f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <xPortStartScheduler+0x134>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004752:	f000 f8f5 	bl	8004940 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <xPortStartScheduler+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <xPortStartScheduler+0x138>)
 800475c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004760:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004762:	f7ff ff69 	bl	8004638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004766:	f7ff f86b 	bl	8003840 <vTaskSwitchContext>
	prvTaskExitError();
 800476a:	f7ff ff21 	bl	80045b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	e000ed00 	.word	0xe000ed00
 800477c:	410fc271 	.word	0x410fc271
 8004780:	410fc270 	.word	0x410fc270
 8004784:	e000e400 	.word	0xe000e400
 8004788:	20000d1c 	.word	0x20000d1c
 800478c:	20000d20 	.word	0x20000d20
 8004790:	e000ed20 	.word	0xe000ed20
 8004794:	2000000c 	.word	0x2000000c
 8004798:	e000ef34 	.word	0xe000ef34

0800479c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <vPortEnterCritical+0x54>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a0d      	ldr	r2, [pc, #52]	; (80047f0 <vPortEnterCritical+0x54>)
 80047bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <vPortEnterCritical+0x54>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10e      	bne.n	80047e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <vPortEnterCritical+0x58>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <vPortEnterCritical+0x48>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	e7fe      	b.n	80047e2 <vPortEnterCritical+0x46>
	}
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	2000000c 	.word	0x2000000c
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <vPortExitCritical+0x4c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <vPortExitCritical+0x22>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e7fe      	b.n	8004818 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortExitCritical+0x4c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3b01      	subs	r3, #1
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <vPortExitCritical+0x4c>)
 8004822:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <vPortExitCritical+0x4c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <vPortExitCritical+0x3e>
 800482c:	2300      	movs	r3, #0
 800482e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
	...

08004850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004850:	f3ef 8009 	mrs	r0, PSP
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <pxCurrentTCBConst>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f01e 0f10 	tst.w	lr, #16
 8004860:	bf08      	it	eq
 8004862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004874:	f380 8811 	msr	BASEPRI, r0
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f7fe ffde 	bl	8003840 <vTaskSwitchContext>
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f380 8811 	msr	BASEPRI, r0
 800488c:	bc09      	pop	{r0, r3}
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	f01e 0f10 	tst.w	lr, #16
 800489a:	bf08      	it	eq
 800489c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048a0:	f380 8809 	msr	PSP, r0
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst>:
 80048b0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048d0:	f7fe fefe 	bl	80036d0 <xTaskIncrementTick>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <SysTick_Handler+0x3c>)
 80048dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <vPortSetupTimerInterrupt+0x34>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortSetupTimerInterrupt+0x38>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vPortSetupTimerInterrupt+0x3c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <vPortSetupTimerInterrupt+0x40>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <vPortSetupTimerInterrupt+0x44>)
 8004916:	3b01      	subs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <vPortSetupTimerInterrupt+0x34>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010
 8004930:	e000e018 	.word	0xe000e018
 8004934:	20000000 	.word	0x20000000
 8004938:	10624dd3 	.word	0x10624dd3
 800493c:	e000e014 	.word	0xe000e014

08004940 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004940:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004950 <vPortEnableVFP+0x10>
 8004944:	6801      	ldr	r1, [r0, #0]
 8004946:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494a:	6001      	str	r1, [r0, #0]
 800494c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800494e:	bf00      	nop
 8004950:	e000ed88 	.word	0xe000ed88

08004954 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800495a:	f3ef 8305 	mrs	r3, IPSR
 800495e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d913      	bls.n	800498e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004966:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <vPortValidateInterruptPriority+0x6c>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <vPortValidateInterruptPriority+0x70>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	7afa      	ldrb	r2, [r7, #11]
 8004976:	429a      	cmp	r2, r3
 8004978:	d209      	bcs.n	800498e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e7fe      	b.n	800498c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <vPortValidateInterruptPriority+0x74>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <vPortValidateInterruptPriority+0x78>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d909      	bls.n	80049b2 <vPortValidateInterruptPriority+0x5e>
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	e7fe      	b.n	80049b0 <vPortValidateInterruptPriority+0x5c>
	}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	e000e3f0 	.word	0xe000e3f0
 80049c4:	20000d1c 	.word	0x20000d1c
 80049c8:	e000ed0c 	.word	0xe000ed0c
 80049cc:	20000d20 	.word	0x20000d20

080049d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049dc:	f7fe fdbe 	bl	800355c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049e0:	4b57      	ldr	r3, [pc, #348]	; (8004b40 <pvPortMalloc+0x170>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049e8:	f000 f90c 	bl	8004c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049ec:	4b55      	ldr	r3, [pc, #340]	; (8004b44 <pvPortMalloc+0x174>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f040 808c 	bne.w	8004b12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01c      	beq.n	8004a3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004a00:	2208      	movs	r2, #8
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d013      	beq.n	8004a3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f023 0307 	bic.w	r3, r3, #7
 8004a18:	3308      	adds	r3, #8
 8004a1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <pvPortMalloc+0x6a>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e7fe      	b.n	8004a38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d068      	beq.n	8004b12 <pvPortMalloc+0x142>
 8004a40:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <pvPortMalloc+0x178>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d863      	bhi.n	8004b12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a4a:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <pvPortMalloc+0x17c>)
 8004a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <pvPortMalloc+0x17c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a54:	e004      	b.n	8004a60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d903      	bls.n	8004a72 <pvPortMalloc+0xa2>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f1      	bne.n	8004a56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <pvPortMalloc+0x170>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d04a      	beq.n	8004b12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	4413      	add	r3, r2
 8004a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1ad2      	subs	r2, r2, r3
 8004a96:	2308      	movs	r3, #8
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d91e      	bls.n	8004adc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <pvPortMalloc+0xf4>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ad6:	69b8      	ldr	r0, [r7, #24]
 8004ad8:	f000 f8f6 	bl	8004cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <pvPortMalloc+0x178>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <pvPortMalloc+0x178>)
 8004ae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <pvPortMalloc+0x178>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <pvPortMalloc+0x180>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d203      	bcs.n	8004afe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <pvPortMalloc+0x178>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <pvPortMalloc+0x180>)
 8004afc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <pvPortMalloc+0x174>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b12:	f7fe fd31 	bl	8003578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <pvPortMalloc+0x164>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0x162>
	return pvReturn;
 8004b34:	69fb      	ldr	r3, [r7, #28]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000492c 	.word	0x2000492c
 8004b44:	20004938 	.word	0x20004938
 8004b48:	20004930 	.word	0x20004930
 8004b4c:	20004924 	.word	0x20004924
 8004b50:	20004934 	.word	0x20004934

08004b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d046      	beq.n	8004bf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b66:	2308      	movs	r3, #8
 8004b68:	425b      	negs	r3, r3
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <vPortFree+0xa8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <vPortFree+0x42>
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e7fe      	b.n	8004b94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <vPortFree+0x5e>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	e7fe      	b.n	8004bb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <vPortFree+0xa8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d019      	beq.n	8004bf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d115      	bne.n	8004bf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <vPortFree+0xa8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bd8:	f7fe fcc0 	bl	800355c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <vPortFree+0xac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	4a06      	ldr	r2, [pc, #24]	; (8004c00 <vPortFree+0xac>)
 8004be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bea:	6938      	ldr	r0, [r7, #16]
 8004bec:	f000 f86c 	bl	8004cc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bf0:	f7fe fcc2 	bl	8003578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bf4:	bf00      	nop
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20004938 	.word	0x20004938
 8004c00:	20004930 	.word	0x20004930

08004c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <prvHeapInit+0xac>)
 8004c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3307      	adds	r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <prvHeapInit+0xac>)
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <prvHeapInit+0xb0>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <prvHeapInit+0xb0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c50:	2208      	movs	r2, #8
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0307 	bic.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <prvHeapInit+0xb4>)
 8004c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <prvHeapInit+0xb4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <prvHeapInit+0xb4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <prvHeapInit+0xb4>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <prvHeapInit+0xb8>)
 8004c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <prvHeapInit+0xbc>)
 8004c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <prvHeapInit+0xc0>)
 8004c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000d24 	.word	0x20000d24
 8004cb4:	20004924 	.word	0x20004924
 8004cb8:	2000492c 	.word	0x2000492c
 8004cbc:	20004934 	.word	0x20004934
 8004cc0:	20004930 	.word	0x20004930
 8004cc4:	20004938 	.word	0x20004938

08004cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <prvInsertBlockIntoFreeList+0xac>)
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e002      	b.n	8004cdc <prvInsertBlockIntoFreeList+0x14>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d8f7      	bhi.n	8004cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d108      	bne.n	8004d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	441a      	add	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d118      	bne.n	8004d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <prvInsertBlockIntoFreeList+0xb0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d00d      	beq.n	8004d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e008      	b.n	8004d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <prvInsertBlockIntoFreeList+0xb0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e003      	b.n	8004d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d002      	beq.n	8004d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20004924 	.word	0x20004924
 8004d78:	2000492c 	.word	0x2000492c

08004d7c <__libc_init_array>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4e0d      	ldr	r6, [pc, #52]	; (8004db4 <__libc_init_array+0x38>)
 8004d80:	4c0d      	ldr	r4, [pc, #52]	; (8004db8 <__libc_init_array+0x3c>)
 8004d82:	1ba4      	subs	r4, r4, r6
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	2500      	movs	r5, #0
 8004d88:	42a5      	cmp	r5, r4
 8004d8a:	d109      	bne.n	8004da0 <__libc_init_array+0x24>
 8004d8c:	4e0b      	ldr	r6, [pc, #44]	; (8004dbc <__libc_init_array+0x40>)
 8004d8e:	4c0c      	ldr	r4, [pc, #48]	; (8004dc0 <__libc_init_array+0x44>)
 8004d90:	f000 f82c 	bl	8004dec <_init>
 8004d94:	1ba4      	subs	r4, r4, r6
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	2500      	movs	r5, #0
 8004d9a:	42a5      	cmp	r5, r4
 8004d9c:	d105      	bne.n	8004daa <__libc_init_array+0x2e>
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004da4:	4798      	blx	r3
 8004da6:	3501      	adds	r5, #1
 8004da8:	e7ee      	b.n	8004d88 <__libc_init_array+0xc>
 8004daa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dae:	4798      	blx	r3
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7f2      	b.n	8004d9a <__libc_init_array+0x1e>
 8004db4:	08004e98 	.word	0x08004e98
 8004db8:	08004e98 	.word	0x08004e98
 8004dbc:	08004e98 	.word	0x08004e98
 8004dc0:	08004e9c 	.word	0x08004e9c

08004dc4 <memcpy>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	1e43      	subs	r3, r0, #1
 8004dc8:	440a      	add	r2, r1
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	d100      	bne.n	8004dd0 <memcpy+0xc>
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dd8:	e7f7      	b.n	8004dca <memcpy+0x6>

08004dda <memset>:
 8004dda:	4402      	add	r2, r0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d100      	bne.n	8004de4 <memset+0xa>
 8004de2:	4770      	bx	lr
 8004de4:	f803 1b01 	strb.w	r1, [r3], #1
 8004de8:	e7f9      	b.n	8004dde <memset+0x4>
	...

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

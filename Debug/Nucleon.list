
Nucleon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf0  08005bf0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf8  08005bf8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a94  20000010  08005c10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aa4  08005c10  00024aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182db  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e00  00000000  00000000  0003831b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  0003b120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  0003c400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d8b  00000000  00000000  0003d598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eee0  00000000  00000000  0005e323  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8215  00000000  00000000  0006d203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  00135494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b1c 	.word	0x08005b1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005b1c 	.word	0x08005b1c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <indicator_task>:
  */

#include "Human_Interface/indicator.h"

void indicator_task(TIM_HandleTypeDef timerHandle, uint32_t timerChannel)
{
 80004d0:	b084      	sub	sp, #16
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	f107 0c08 	add.w	ip, r7, #8
 80004da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	_piezo_config(440);
 80004de:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80004e2:	f000 f817 	bl	8000514 <_piezo_config>
	osDelay(250);
 80004e6:	20fa      	movs	r0, #250	; 0xfa
 80004e8:	f002 feb0 	bl	800324c <osDelay>
	_piezo_config(880);
 80004ec:	f44f 705c 	mov.w	r0, #880	; 0x370
 80004f0:	f000 f810 	bl	8000514 <_piezo_config>
	osDelay(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f8:	f002 fea8 	bl	800324c <osDelay>
	_piezo_halt();
 80004fc:	f000 f83a 	bl	8000574 <_piezo_halt>
	osDelay(1500);
 8000500:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000504:	f002 fea2 	bl	800324c <osDelay>
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000510:	b004      	add	sp, #16
 8000512:	4770      	bx	lr

08000514 <_piezo_config>:
/**
 * @brief Configures the piezo buzzer.
 * @param freq: Frequency in hz.
 */
void _piezo_config(uint32_t freq)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t t = (uint32_t) 1000000 / freq;
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <_piezo_config+0x58>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 8000526:	2108      	movs	r1, #8
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <_piezo_config+0x5c>)
 800052a:	f001 fed1 	bl	80022d0 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	piezo.Init.Period = t;//1000/(freq);
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <_piezo_config+0x5c>)
 8000530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000532:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Init(&piezo);
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <_piezo_config+0x5c>)
 8000536:	f001 fe58 	bl	80021ea <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053a:	2360      	movs	r3, #96	; 0x60
 800053c:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = piezo.Init.Period / 2;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <_piezo_config+0x5c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(&piezo, &sConfigOC, TIM_CHANNEL_3);
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	2208      	movs	r2, #8
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <_piezo_config+0x5c>)
 8000558:	f002 f81a 	bl	8002590 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&piezo, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <_piezo_config+0x5c>)
 8000560:	f001 fe78 	bl	8002254 <HAL_TIM_PWM_Start>
}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	000f4240 	.word	0x000f4240
 8000570:	2000493c 	.word	0x2000493c

08000574 <_piezo_halt>:

/**
 * @brief Turns off the piezo buzzer.
 */
void _piezo_halt()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&piezo, TIM_CHANNEL_3);
 8000578:	2108      	movs	r1, #8
 800057a:	4802      	ldr	r0, [pc, #8]	; (8000584 <_piezo_halt+0x10>)
 800057c:	f001 fea8 	bl	80022d0 <HAL_TIM_PWM_Stop>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000493c 	.word	0x2000493c

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fbbc 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f836 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f950 	bl	8000838 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000598:	f000 f890 	bl	80006bc <MX_SPI1_Init>
  MX_TIM3_Init();
 800059c:	f000 f8c4 	bl	8000728 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f002 fd44 	bl	800302c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <main+0x54>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x58>)
 80005aa:	f002 fda9 	bl	8003100 <osThreadNew>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <main+0x5c>)
 80005b2:	601a      	str	r2, [r3, #0]

  /* creation of flashDemo */
  flashDemoHandle = osThreadNew(StartFlashDemo, NULL, &flashDemo_attributes);
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <main+0x60>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x64>)
 80005ba:	f002 fda1 	bl	8003100 <osThreadNew>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <main+0x68>)
 80005c2:	601a      	str	r2, [r3, #0]

  /* creation of indicator */
  indicatorHandle = osThreadNew(StartIndicator, NULL, &indicator_attributes);
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <main+0x6c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <main+0x70>)
 80005ca:	f002 fd99 	bl	8003100 <osThreadNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x74>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f002 fd5e 	bl	8003094 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x50>
 80005da:	bf00      	nop
 80005dc:	08005b6c 	.word	0x08005b6c
 80005e0:	08000909 	.word	0x08000909
 80005e4:	20004a14 	.word	0x20004a14
 80005e8:	08005b90 	.word	0x08005b90
 80005ec:	08000929 	.word	0x08000929
 80005f0:	20004a18 	.word	0x20004a18
 80005f4:	08005bb4 	.word	0x08005bb4
 80005f8:	08000985 	.word	0x08000985
 80005fc:	20004a1c 	.word	0x20004a1c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fa7b 	bl	8005b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xb4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <SystemClock_Config+0xb8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000666:	2300      	movs	r3, #0
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe3c 	bl	80012ec <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800067a:	f000 f9af 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000682:	2301      	movs	r3, #1
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f896 	bl	80017cc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a6:	f000 f999 	bl	80009dc <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 fa6b 	bl	8001be8 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f960 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200049bc 	.word	0x200049bc
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_TIM3_Init+0x104>)
 800075a:	4a35      	ldr	r2, [pc, #212]	; (8000830 <MX_TIM3_Init+0x108>)
 800075c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <MX_TIM3_Init+0x104>)
 8000760:	2210      	movs	r2, #16
 8000762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_TIM3_Init+0x104>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_TIM3_Init+0x104>)
 800076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_TIM3_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_TIM3_Init+0x104>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077e:	482b      	ldr	r0, [pc, #172]	; (800082c <MX_TIM3_Init+0x104>)
 8000780:	f001 fce4 	bl	800214c <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800078a:	f000 f927 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000798:	4619      	mov	r1, r3
 800079a:	4824      	ldr	r0, [pc, #144]	; (800082c <MX_TIM3_Init+0x104>)
 800079c:	f001 ffbe 	bl	800271c <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007a6:	f000 f919 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <MX_TIM3_Init+0x104>)
 80007ac:	f001 fd1d 	bl	80021ea <HAL_TIM_PWM_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 f911 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4619      	mov	r1, r3
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <MX_TIM3_Init+0x104>)
 80007ca:	f002 fb97 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007d4:	f000 f902 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80007dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_TIM3_Init+0x104>)
 80007f2:	f001 fecd 	bl	8002590 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80007fc:	f000 f8ee 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  piezo = htim3;
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <MX_TIM3_Init+0x10c>)
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_TIM3_Init+0x104>)
 8000804:	4614      	mov	r4, r2
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM3_Init+0x104>)
 800081e:	f000 f97b 	bl	8000b18 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	; 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bdb0      	pop	{r4, r5, r7, pc}
 800082a:	bf00      	nop
 800082c:	2000497c 	.word	0x2000497c
 8000830:	40000400 	.word	0x40000400
 8000834:	2000493c 	.word	0x2000493c

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a29      	ldr	r2, [pc, #164]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_GPIO_Init+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_GPIO_Init+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_GPIO_Init+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	4816      	ldr	r0, [pc, #88]	; (8000900 <MX_GPIO_Init+0xc8>)
 80008a8:	f000 fcec 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <MX_GPIO_Init+0xcc>)
 80008b4:	f000 fce6 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fb3e 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0xcc>)
 80008ee:	f000 fb2f 	bl	8000f50 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400

08000908 <StartBlink>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <StartBlink+0x1c>)
 8000916:	f000 fcce 	bl	80012b6 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800091a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091e:	f002 fc95 	bl	800324c <osDelay>
	  HAL_GPIO_TogglePin(LED_STATUS1_GPIO_Port, LED_STATUS1_Pin);
 8000922:	e7f5      	b.n	8000910 <StartBlink+0x8>
 8000924:	40020400 	.word	0x40020400

08000928 <StartFlashDemo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashDemo */
void StartFlashDemo(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashDemo */
  cmd[0] = 0x9f;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <StartFlashDemo+0x4c>)
 8000932:	229f      	movs	r2, #159	; 0x9f
 8000934:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <StartFlashDemo+0x50>)
 800093c:	f000 fca2 	bl	8001284 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <StartFlashDemo+0x50>)
 8000946:	f000 fc9d 	bl	8001284 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, cmd, data, 4, 0xff);
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2304      	movs	r3, #4
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <StartFlashDemo+0x54>)
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <StartFlashDemo+0x4c>)
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <StartFlashDemo+0x58>)
 8000956:	f001 f9ab 	bl	8001cb0 <HAL_SPI_TransmitReceive>
	  osDelay(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f002 fc76 	bl	800324c <osDelay>
	  /* For some reason, printf seems to break threads */
	  /*printf("JedecID: %02x-%02x%02x\n", data[1], data[2], data[3]);*/
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2110      	movs	r1, #16
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <StartFlashDemo+0x50>)
 8000966:	f000 fc8d 	bl	8001284 <HAL_GPIO_WritePin>
	  osDelay(3000);
 800096a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800096e:	f002 fc6d 	bl	800324c <osDelay>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000972:	e7e0      	b.n	8000936 <StartFlashDemo+0xe>
 8000974:	2000002c 	.word	0x2000002c
 8000978:	40020000 	.word	0x40020000
 800097c:	20000030 	.word	0x20000030
 8000980:	200049bc 	.word	0x200049bc

08000984 <StartIndicator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIndicator */
void StartIndicator(void *argument)
{
 8000984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000986:	b091      	sub	sp, #68	; 0x44
 8000988:	af0e      	add	r7, sp, #56	; 0x38
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIndicator */
  /* Infinite loop */
  for(;;)
  {
    indicator_task(htim3, TIM_CHANNEL_3);
 800098c:	4e09      	ldr	r6, [pc, #36]	; (80009b4 <StartIndicator+0x30>)
 800098e:	2308      	movs	r3, #8
 8000990:	930c      	str	r3, [sp, #48]	; 0x30
 8000992:	466d      	mov	r5, sp
 8000994:	f106 0410 	add.w	r4, r6, #16
 8000998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009ac:	f7ff fd90 	bl	80004d0 <indicator_task>
 80009b0:	e7ec      	b.n	800098c <StartIndicator+0x8>
 80009b2:	bf00      	nop
 80009b4:	2000497c 	.word	0x2000497c

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f9bf 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <HAL_MspInit+0x54>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x54>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_MspInit+0x54>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x54>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	f06f 0001 	mvn.w	r0, #1
 8000a32:	f000 fa63 	bl	8000efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_SPI_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_SPI_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SPI1_SDI_Pin|SPI1_SDO_Pin;
 8000a9e:	23e0      	movs	r3, #224	; 0xe0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x8c>)
 8000aba:	f000 fa49 	bl	8000f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10d      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x40>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_TIM_Base_MspInit+0x40>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_TIM_Base_MspInit+0x40>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40000400 	.word	0x40000400
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_TIM_MspPostInit+0x68>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d11d      	bne.n	8000b76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_TIM_MspPostInit+0x6c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_TIM_MspPostInit+0x6c>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_TIM_MspPostInit+0x6c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PIEZO_Pin;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIEZO_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_TIM_MspPostInit+0x70>)
 8000b72:	f000 f9ed 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400

08000b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2036      	movs	r0, #54	; 0x36
 8000ba2:	f000 f9ab 	bl	8000efc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f000 f9c4 	bl	8000f34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_InitTick+0xa4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_InitTick+0xa4>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xa4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 0210 	add.w	r2, r7, #16
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 ffd6 	bl	8001b84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bd8:	f000 ffc0 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_InitTick+0xa8>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_InitTick+0xac>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_InitTick+0xb0>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_InitTick+0xac>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_InitTick+0xac>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_InitTick+0xac>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_InitTick+0xac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_InitTick+0xac>)
 8000c12:	f001 fa9b 	bl	800214c <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_InitTick+0xac>)
 8000c1e:	f001 fac0 	bl	80021a2 <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	20004a20 	.word	0x20004a20
 8000c3c:	40001000 	.word	0x40001000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM6_DAC_IRQHandler+0x10>)
 8000c7a:	f001 fb81 	bl	8002380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20004a20 	.word	0x20004a20

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <SystemInit+0x28>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <SystemInit+0x28>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x28>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cba:	e003      	b.n	8000cc4 <LoopCopyDataInit>

08000cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cc2:	3104      	adds	r1, #4

08000cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ccc:	d3f6      	bcc.n	8000cbc <CopyDataInit>
  ldr  r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cd0:	e002      	b.n	8000cd8 <LoopFillZerobss>

08000cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cd4:	f842 3b04 	str.w	r3, [r2], #4

08000cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cdc:	d3f9      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd3 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f004 fee3 	bl	8005aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc4f 	bl	8000588 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cf0:	08005c00 	.word	0x08005c00
  ldr  r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000cfc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d00:	20004aa4 	.word	0x20004aa4

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f8d8 	bl	8000ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff28 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fe56 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20004a60 	.word	0x20004a60

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20004a60 	.word	0x20004a60

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff4c 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0e:	f7ff ff61 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffb1 	bl	8000e80 <NVIC_EncodePriority>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff80 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff54 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e16b      	b.n	8001244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 815a 	bne.w	800123e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d00b      	beq.n	8000faa <HAL_GPIO_Init+0x5a>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9e:	2b11      	cmp	r3, #17
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b12      	cmp	r3, #18
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0xfc>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b12      	cmp	r3, #18
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80b4 	beq.w	800123e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x308>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <HAL_GPIO_Init+0x308>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <HAL_GPIO_Init+0x308>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a5a      	ldr	r2, [pc, #360]	; (800125c <HAL_GPIO_Init+0x30c>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_GPIO_Init+0x310>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x21a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x216>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x324>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x212>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x328>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x20e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x20a>
 8001156:	2307      	movs	r3, #7
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115a:	2308      	movs	r3, #8
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x228>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x228>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001188:	4934      	ldr	r1, [pc, #208]	; (800125c <HAL_GPIO_Init+0x30c>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <HAL_GPIO_Init+0x330>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_GPIO_Init+0x330>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x330>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_GPIO_Init+0x330>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <HAL_GPIO_Init+0x330>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae90 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	3724      	adds	r7, #36	; 0x24
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	401a      	ands	r2, r3
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d104      	bne.n	80012da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e25b      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d075      	beq.n	80013f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130a:	4ba3      	ldr	r3, [pc, #652]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d00c      	beq.n	8001330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4ba0      	ldr	r3, [pc, #640]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d112      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b9d      	ldr	r3, [pc, #628]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132e:	d10b      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4b99      	ldr	r3, [pc, #612]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d05b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d157      	bne.n	80013f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e236      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x74>
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a90      	ldr	r2, [pc, #576]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a8a      	ldr	r2, [pc, #552]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001384:	4b84      	ldr	r3, [pc, #528]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a83      	ldr	r2, [pc, #524]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fce6 	bl	8000d74 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fce2 	bl	8000d74 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1fb      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xc0>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fcd2 	bl	8000d74 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fcce 	bl	8000d74 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1e7      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b6c      	ldr	r3, [pc, #432]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0xe8>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1bb      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b56      	ldr	r3, [pc, #344]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4952      	ldr	r1, [pc, #328]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_RCC_OscConfig+0x2b0>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fc87 	bl	8000d74 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fc83 	bl	8000d74 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e19c      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b46      	ldr	r3, [pc, #280]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4940      	ldr	r1, [pc, #256]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x2b0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc66 	bl	8000d74 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc62 	bl	8000d74 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e17b      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d030      	beq.n	8001538 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_RCC_OscConfig+0x2b4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fc46 	bl	8000d74 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc42 	bl	8000d74 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e15b      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x200>
 800150a:	e015      	b.n	8001538 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x2b4>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fc2f 	bl	8000d74 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fc2b 	bl	8000d74 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e144      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a0 	beq.w	8001686 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10f      	bne.n	8001576 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001572:	2301      	movs	r3, #1
 8001574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	2b00      	cmp	r3, #0
 8001580:	d121      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCC_OscConfig+0x2b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_RCC_OscConfig+0x2b8>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff fbf1 	bl	8000d74 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	e011      	b.n	80015ba <HAL_RCC_OscConfig+0x2ce>
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
 80015a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a8:	f7ff fbe4 	bl	8000d74 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0fd      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x4d4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 80015ce:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a7c      	ldr	r2, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	e01c      	b.n	8001616 <HAL_RCC_OscConfig+0x32a>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_OscConfig+0x312>
 80015e4:	4b77      	ldr	r3, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a76      	ldr	r2, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a73      	ldr	r2, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e00b      	b.n	8001616 <HAL_RCC_OscConfig+0x32a>
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a70      	ldr	r2, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
 800160a:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a6d      	ldr	r2, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d015      	beq.n	800164a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fba9 	bl	8000d74 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fba5 	bl	8000d74 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0bc      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ee      	beq.n	8001626 <HAL_RCC_OscConfig+0x33a>
 8001648:	e014      	b.n	8001674 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb93 	bl	8000d74 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fb8f 	bl	8000d74 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0a6      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d105      	bne.n	8001686 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8092 	beq.w	80017b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d05c      	beq.n	8001756 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d141      	bne.n	8001728 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fb63 	bl	8000d74 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff fb5f 	bl	8000d74 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e078      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	019b      	lsls	r3, r3, #6
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	4933      	ldr	r1, [pc, #204]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCC_OscConfig+0x4dc>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb38 	bl	8000d74 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb34 	bl	8000d74 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e04d      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x41c>
 8001726:	e045      	b.n	80017b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x4dc>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fb21 	bl	8000d74 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fb1d 	bl	8000d74 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e036      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x44a>
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e029      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_RCC_OscConfig+0x4d8>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	429a      	cmp	r2, r3
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d115      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001790:	4293      	cmp	r3, r2
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40007000 	.word	0x40007000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470060 	.word	0x42470060

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0cc      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d90c      	bls.n	8001808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b65      	ldr	r3, [pc, #404]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0b8      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001820:	4b59      	ldr	r3, [pc, #356]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800182a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	494d      	ldr	r1, [pc, #308]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d044      	beq.n	80018ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d119      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d003      	beq.n	800188a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	2b03      	cmp	r3, #3
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e06f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e067      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4934      	ldr	r1, [pc, #208]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff fa5a 	bl	8000d74 <HAL_GetTick>
 80018c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff fa56 	bl	8000d74 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e04f      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d20c      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e032      	b.n	800197a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4916      	ldr	r1, [pc, #88]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	490e      	ldr	r1, [pc, #56]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001952:	f000 f821 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001956:	4601      	mov	r1, r0
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f90a 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00
 8001988:	40023800 	.word	0x40023800
 800198c:	08005bd8 	.word	0x08005bd8
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d007      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x32>
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d008      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x38>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 80b4 	bne.w	8001b2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4b5e      	ldr	r3, [pc, #376]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019c6:	60bb      	str	r3, [r7, #8]
       break;
 80019c8:	e0b3      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019cc:	60bb      	str	r3, [r7, #8]
      break;
 80019ce:	e0b0      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04a      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	ea03 0501 	and.w	r5, r3, r1
 80019fc:	ea04 0602 	and.w	r6, r4, r2
 8001a00:	4629      	mov	r1, r5
 8001a02:	4632      	mov	r2, r6
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f04f 0400 	mov.w	r4, #0
 8001a0c:	0154      	lsls	r4, r2, #5
 8001a0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	4619      	mov	r1, r3
 8001a16:	4622      	mov	r2, r4
 8001a18:	1b49      	subs	r1, r1, r5
 8001a1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	0194      	lsls	r4, r2, #6
 8001a28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a2c:	018b      	lsls	r3, r1, #6
 8001a2e:	1a5b      	subs	r3, r3, r1
 8001a30:	eb64 0402 	sbc.w	r4, r4, r2
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a42:	00d9      	lsls	r1, r3, #3
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	195b      	adds	r3, r3, r5
 8001a4a:	eb44 0406 	adc.w	r4, r4, r6
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	02a2      	lsls	r2, r4, #10
 8001a58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a5c:	0299      	lsls	r1, r3, #10
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	4621      	mov	r1, r4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f04f 0400 	mov.w	r4, #0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7fe fbae 	bl	80001d0 <__aeabi_uldivmod>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e049      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	f04f 0400 	mov.w	r4, #0
 8001a86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	ea03 0501 	and.w	r5, r3, r1
 8001a92:	ea04 0602 	and.w	r6, r4, r2
 8001a96:	4629      	mov	r1, r5
 8001a98:	4632      	mov	r2, r6
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f04f 0400 	mov.w	r4, #0
 8001aa2:	0154      	lsls	r4, r2, #5
 8001aa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aa8:	014b      	lsls	r3, r1, #5
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4622      	mov	r2, r4
 8001aae:	1b49      	subs	r1, r1, r5
 8001ab0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	f04f 0400 	mov.w	r4, #0
 8001abc:	0194      	lsls	r4, r2, #6
 8001abe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	1a5b      	subs	r3, r3, r1
 8001ac6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aca:	f04f 0100 	mov.w	r1, #0
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ad8:	00d9      	lsls	r1, r3, #3
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	195b      	adds	r3, r3, r5
 8001ae0:	eb44 0406 	adc.w	r4, r4, r6
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	02a2      	lsls	r2, r4, #10
 8001aee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001af2:	0299      	lsls	r1, r3, #10
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	4621      	mov	r1, r4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f04f 0400 	mov.w	r4, #0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	f7fe fb63 	bl	80001d0 <__aeabi_uldivmod>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	60bb      	str	r3, [r7, #8]
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b2e:	60bb      	str	r3, [r7, #8]
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	68bb      	ldr	r3, [r7, #8]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	00f42400 	.word	0x00f42400

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4601      	mov	r1, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08005be8 	.word	0x08005be8

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e056      	b.n	8001ca8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7fe ff15 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	ea42 0103 	orr.w	r1, r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	f003 0104 	and.w	r1, r3, #4
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_SPI_TransmitReceive+0x26>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e18a      	b.n	8001fec <HAL_SPI_TransmitReceive+0x33c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cde:	f7ff f849 	bl	8000d74 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d00f      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x70>
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d06:	d107      	bne.n	8001d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <HAL_SPI_TransmitReceive+0x68>
 8001d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d003      	beq.n	8001d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d1e:	e15b      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_SPI_TransmitReceive+0x82>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_TransmitReceive+0x82>
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d38:	e14e      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d003      	beq.n	8001d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	887a      	ldrh	r2, [r7, #2]
 8001d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d007      	beq.n	8001da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001daa:	d178      	bne.n	8001e9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_SPI_TransmitReceive+0x10a>
 8001db4:	8b7b      	ldrh	r3, [r7, #26]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d166      	bne.n	8001e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	1c9a      	adds	r2, r3, #2
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dde:	e053      	b.n	8001e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d11b      	bne.n	8001e26 <HAL_SPI_TransmitReceive+0x176>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d016      	beq.n	8001e26 <HAL_SPI_TransmitReceive+0x176>
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d113      	bne.n	8001e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d119      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x1b8>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d014      	beq.n	8001e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	1c9a      	adds	r2, r3, #2
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e64:	2301      	movs	r3, #1
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e68:	f7fe ff84 	bl	8000d74 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d807      	bhi.n	8001e88 <HAL_SPI_TransmitReceive+0x1d8>
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d003      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e86:	e0a7      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1a6      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x130>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1a1      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x130>
 8001e9c:	e07c      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_TransmitReceive+0x1fc>
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d16b      	bne.n	8001f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed2:	e057      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d11c      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x26c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <HAL_SPI_TransmitReceive+0x26c>
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d114      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	330c      	adds	r3, #12
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d119      	bne.n	8001f5e <HAL_SPI_TransmitReceive+0x2ae>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d014      	beq.n	8001f5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f5e:	f7fe ff09 	bl	8000d74 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d803      	bhi.n	8001f76 <HAL_SPI_TransmitReceive+0x2c6>
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d102      	bne.n	8001f7c <HAL_SPI_TransmitReceive+0x2cc>
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f82:	e029      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1a2      	bne.n	8001ed4 <HAL_SPI_TransmitReceive+0x224>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d19d      	bne.n	8001ed4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f893 	bl	80020c8 <SPI_EndRxTxTransaction>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001fb4:	e010      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	e000      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3730      	adds	r7, #48	; 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002004:	e04c      	b.n	80020a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d048      	beq.n	80020a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800200e:	f7fe feb1 	bl	8000d74 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d902      	bls.n	8002024 <SPI_WaitFlagStateUntilTimeout+0x30>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d13d      	bne.n	80020a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800203c:	d111      	bne.n	8002062 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002046:	d004      	beq.n	8002052 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d107      	bne.n	8002062 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206a:	d10f      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800208a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e00f      	b.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d1a3      	bne.n	8002006 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <SPI_EndRxTxTransaction+0x7c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <SPI_EndRxTxTransaction+0x80>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0d5b      	lsrs	r3, r3, #21
 80020e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f2:	d112      	bne.n	800211a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff ff78 	bl	8001ff4 <SPI_WaitFlagStateUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d016      	beq.n	8002138 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e00f      	b.n	800213a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3b01      	subs	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d0f2      	beq.n	800211a <SPI_EndRxTxTransaction+0x52>
 8002134:	e000      	b.n	8002138 <SPI_EndRxTxTransaction+0x70>
        break;
 8002136:	bf00      	nop
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000
 8002148:	165e9f81 	.word	0x165e9f81

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e01d      	b.n	800219a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fcae 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 fba6 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e01d      	b.n	8002238 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f815 	bl	8002240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f000 fb57 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fe22 	bl	8002eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <HAL_TIM_PWM_Start+0x74>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_TIM_PWM_Start+0x2c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_PWM_Start+0x78>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_TIM_PWM_Start+0x30>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_TIM_PWM_Start+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d007      	beq.n	80022bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fde4 	bl	8002eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_TIM_PWM_Stop+0xa8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_PWM_Stop+0x2c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a21      	ldr	r2, [pc, #132]	; (800237c <HAL_TIM_PWM_Stop+0xac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_TIM_PWM_Stop+0x30>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_TIM_PWM_Stop+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d017      	beq.n	8002336 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_TIM_PWM_Stop+0x66>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	f240 4344 	movw	r3, #1092	; 0x444
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_TIM_PWM_Stop+0x66>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <HAL_TIM_PWM_Stop+0x96>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	f240 4344 	movw	r3, #1092	; 0x444
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_TIM_PWM_Stop+0x96>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010000 	.word	0x40010000
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0202 	mvn.w	r2, #2
 80023ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa6b 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa5d 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa6e 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0204 	mvn.w	r2, #4
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa41 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa33 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa44 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0208 	mvn.w	r2, #8
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa17 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa09 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa1a 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b10      	cmp	r3, #16
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0210 	mvn.w	r2, #16
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2208      	movs	r2, #8
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9ed 	bl	800289e <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f9df 	bl	800288a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f9f0 	bl	80028b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0201 	mvn.w	r2, #1
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fa5a 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	d10e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d107      	bne.n	8002530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fd6c 	bl	8003008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d10e      	bne.n	800255c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d107      	bne.n	800255c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f9b5 	bl	80028c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b20      	cmp	r3, #32
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b20      	cmp	r3, #32
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0220 	mvn.w	r2, #32
 8002580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fd36 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0b4      	b.n	8002714 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	f200 809f 	bhi.w	8002700 <HAL_TIM_PWM_ConfigChannel+0x170>
 80025c2:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025fd 	.word	0x080025fd
 80025cc:	08002701 	.word	0x08002701
 80025d0:	08002701 	.word	0x08002701
 80025d4:	08002701 	.word	0x08002701
 80025d8:	0800263d 	.word	0x0800263d
 80025dc:	08002701 	.word	0x08002701
 80025e0:	08002701 	.word	0x08002701
 80025e4:	08002701 	.word	0x08002701
 80025e8:	0800267f 	.word	0x0800267f
 80025ec:	08002701 	.word	0x08002701
 80025f0:	08002701 	.word	0x08002701
 80025f4:	08002701 	.word	0x08002701
 80025f8:	080026bf 	.word	0x080026bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fa0a 	bl	8002a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0208 	orr.w	r2, r2, #8
 8002616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6999      	ldr	r1, [r3, #24]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	619a      	str	r2, [r3, #24]
      break;
 800263a:	e062      	b.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa5a 	bl	8002afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6999      	ldr	r1, [r3, #24]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	021a      	lsls	r2, r3, #8
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	619a      	str	r2, [r3, #24]
      break;
 800267c:	e041      	b.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 faaf 	bl	8002be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0208 	orr.w	r2, r2, #8
 8002698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0204 	bic.w	r2, r2, #4
 80026a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	61da      	str	r2, [r3, #28]
      break;
 80026bc:	e021      	b.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fb03 	bl	8002cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	61da      	str	r2, [r3, #28]
      break;
 80026fe:	e000      	b.n	8002702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002700:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIM_ConfigClockSource+0x18>
 8002730:	2302      	movs	r3, #2
 8002732:	e0a6      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x166>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d067      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x120>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d80b      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x6c>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d073      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x140>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d802      	bhi.n	800277e <HAL_TIM_ConfigClockSource+0x62>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06f      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800277c:	e078      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800277e:	2b20      	cmp	r3, #32
 8002780:	d06c      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x140>
 8002782:	2b30      	cmp	r3, #48	; 0x30
 8002784:	d06a      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002786:	e073      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d00d      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0x8c>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d804      	bhi.n	800279a <HAL_TIM_ConfigClockSource+0x7e>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d033      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xe0>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d041      	beq.n	800281c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002798:	e06a      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d066      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x152>
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a4:	d017      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027a6:	e063      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f000 fb5a 	bl	8002e70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e04c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f000 fb43 	bl	8002e70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e039      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f000 fab7 	bl	8002d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2150      	movs	r1, #80	; 0x50
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb10 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800281a:	e029      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 fad6 	bl	8002dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2160      	movs	r1, #96	; 0x60
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fb00 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800283a:	e019      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 fa97 	bl	8002d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	4618      	mov	r0, r3
 8002856:	f000 faf0 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800285a:	e009      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 fae7 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800286c:	e000      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800286e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d00f      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <TIM_Base_SetConfig+0x118>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00b      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <TIM_Base_SetConfig+0x11c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <TIM_Base_SetConfig+0x120>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d027      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <TIM_Base_SetConfig+0x118>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d023      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <TIM_Base_SetConfig+0x11c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <TIM_Base_SetConfig+0x120>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d017      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <TIM_Base_SetConfig+0x128>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <TIM_Base_SetConfig+0x12c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00f      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <TIM_Base_SetConfig+0x130>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <TIM_Base_SetConfig+0x134>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <TIM_Base_SetConfig+0x138>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <TIM_Base_SetConfig+0x13c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <TIM_Base_SetConfig+0x114>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0xf8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <TIM_Base_SetConfig+0x124>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40010400 	.word	0x40010400
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40014400 	.word	0x40014400
 8002a0c:	40014800 	.word	0x40014800
 8002a10:	40001800 	.word	0x40001800
 8002a14:	40001c00 	.word	0x40001c00
 8002a18:	40002000 	.word	0x40002000

08002a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	f023 0201 	bic.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0302 	bic.w	r3, r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <TIM_OC1_SetConfig+0xd8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <TIM_OC1_SetConfig+0x64>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <TIM_OC1_SetConfig+0xdc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10c      	bne.n	8002a9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0308 	bic.w	r3, r3, #8
 8002a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <TIM_OC1_SetConfig+0xd8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_OC1_SetConfig+0x8e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <TIM_OC1_SetConfig+0xdc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	621a      	str	r2, [r3, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40010400 	.word	0x40010400

08002afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0210 	bic.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0320 	bic.w	r3, r3, #32
 8002b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <TIM_OC2_SetConfig+0xe4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_OC2_SetConfig+0x68>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <TIM_OC2_SetConfig+0xe8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10d      	bne.n	8002b80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <TIM_OC2_SetConfig+0xe4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_OC2_SetConfig+0x94>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <TIM_OC2_SetConfig+0xe8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d113      	bne.n	8002bb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40010400 	.word	0x40010400

08002be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <TIM_OC3_SetConfig+0xe0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_OC3_SetConfig+0x66>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <TIM_OC3_SetConfig+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10d      	bne.n	8002c6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <TIM_OC3_SetConfig+0xe0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_OC3_SetConfig+0x92>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <TIM_OC3_SetConfig+0xe4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d113      	bne.n	8002ca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	031b      	lsls	r3, r3, #12
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <TIM_OC4_SetConfig+0xa4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_OC4_SetConfig+0x68>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <TIM_OC4_SetConfig+0xa8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d109      	bne.n	8002d4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40010400 	.word	0x40010400

08002d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0201 	bic.w	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f023 030a 	bic.w	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0210 	bic.w	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f043 0307 	orr.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e05a      	b.n	8002fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d01d      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40010400 	.word	0x40010400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40001800 	.word	0x40001800

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003032:	f3ef 8305 	mrs	r3, IPSR
 8003036:	60bb      	str	r3, [r7, #8]
  return(result);
 8003038:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303e:	f3ef 8310 	mrs	r3, PRIMASK
 8003042:	607b      	str	r3, [r7, #4]
  return(result);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800304a:	f3ef 8311 	mrs	r3, BASEPRI
 800304e:	603b      	str	r3, [r7, #0]
  return(result);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <osKernelInitialize+0x3a>
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <osKernelInitialize+0x64>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d103      	bne.n	8003066 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800305e:	f06f 0305 	mvn.w	r3, #5
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e00c      	b.n	8003080 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <osKernelInitialize+0x64>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <osKernelInitialize+0x64>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e002      	b.n	8003080 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000034 	.word	0x20000034

08003094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800309a:	f3ef 8305 	mrs	r3, IPSR
 800309e:	60bb      	str	r3, [r7, #8]
  return(result);
 80030a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	607b      	str	r3, [r7, #4]
  return(result);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030b2:	f3ef 8311 	mrs	r3, BASEPRI
 80030b6:	603b      	str	r3, [r7, #0]
  return(result);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <osKernelStart+0x3a>
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <osKernelStart+0x68>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d103      	bne.n	80030ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80030c6:	f06f 0305 	mvn.w	r3, #5
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e010      	b.n	80030f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <osKernelStart+0x68>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d109      	bne.n	80030ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030d6:	f7ff ffa1 	bl	800301c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <osKernelStart+0x68>)
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030e0:	f001 f870 	bl	80041c4 <vTaskStartScheduler>
      stat = osOK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e002      	b.n	80030f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030f0:	68fb      	ldr	r3, [r7, #12]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000034 	.word	0x20000034

08003100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b090      	sub	sp, #64	; 0x40
 8003104:	af04      	add	r7, sp, #16
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003110:	f3ef 8305 	mrs	r3, IPSR
 8003114:	61fb      	str	r3, [r7, #28]
  return(result);
 8003116:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 808f 	bne.w	800323c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311e:	f3ef 8310 	mrs	r3, PRIMASK
 8003122:	61bb      	str	r3, [r7, #24]
  return(result);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800312a:	f3ef 8311 	mrs	r3, BASEPRI
 800312e:	617b      	str	r3, [r7, #20]
  return(result);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <osThreadNew+0x3e>
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <osThreadNew+0x148>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d07e      	beq.n	800323c <osThreadNew+0x13c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d07b      	beq.n	800323c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003148:	2318      	movs	r3, #24
 800314a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
 8003154:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d045      	beq.n	80031e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <osThreadNew+0x6a>
        name = attr->name;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <osThreadNew+0x90>
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	2b38      	cmp	r3, #56	; 0x38
 8003182:	d805      	bhi.n	8003190 <osThreadNew+0x90>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <osThreadNew+0x94>
        return (NULL);
 8003190:	2300      	movs	r3, #0
 8003192:	e054      	b.n	800323e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <osThreadNew+0xca>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b5b      	cmp	r3, #91	; 0x5b
 80031b2:	d90a      	bls.n	80031ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <osThreadNew+0xca>
        mem = 1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	e010      	b.n	80031ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <osThreadNew+0xec>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <osThreadNew+0xec>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <osThreadNew+0xec>
          mem = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	e001      	b.n	80031ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d110      	bne.n	8003214 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031fa:	9202      	str	r2, [sp, #8]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fe09 	bl	8003e20 <xTaskCreateStatic>
 800320e:	4603      	mov	r3, r0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e013      	b.n	800323c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d110      	bne.n	800323c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	b29a      	uxth	r2, r3
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fe51 	bl	8003ed4 <xTaskCreate>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <osThreadNew+0x13c>
          hTask = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800323c:	693b      	ldr	r3, [r7, #16]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3730      	adds	r7, #48	; 0x30
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000034 	.word	0x20000034

0800324c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003254:	f3ef 8305 	mrs	r3, IPSR
 8003258:	613b      	str	r3, [r7, #16]
  return(result);
 800325a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10f      	bne.n	8003280 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003260:	f3ef 8310 	mrs	r3, PRIMASK
 8003264:	60fb      	str	r3, [r7, #12]
  return(result);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800326c:	f3ef 8311 	mrs	r3, BASEPRI
 8003270:	60bb      	str	r3, [r7, #8]
  return(result);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <osDelay+0x3c>
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <osDelay+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d103      	bne.n	8003288 <osDelay+0x3c>
    stat = osErrorISR;
 8003280:	f06f 0305 	mvn.w	r3, #5
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e007      	b.n	8003298 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 ff62 	bl	800415c <vTaskDelay>
    }
  }

  return (stat);
 8003298:	697b      	ldr	r3, [r7, #20]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000034 	.word	0x20000034

080032a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80032b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <vApplicationGetIdleTaskMemory+0x30>)
 80032be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	601a      	str	r2, [r3, #0]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000038 	.word	0x20000038
 80032d8:	20000094 	.word	0x20000094

080032dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <vApplicationGetTimerTaskMemory+0x2c>)
 80032ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4a06      	ldr	r2, [pc, #24]	; (800330c <vApplicationGetTimerTaskMemory+0x30>)
 80032f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	20000294 	.word	0x20000294
 800330c:	200002f0 	.word	0x200002f0

08003310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0208 	add.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f103 0208 	add.w	r2, r3, #8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f103 0208 	add.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e00c      	b.n	80033ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3308      	adds	r3, #8
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e002      	b.n	80033e0 <vListInsert+0x2e>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d2f6      	bcs.n	80033da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6852      	ldr	r2, [r2, #4]
 8003444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d103      	bne.n	8003458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	e7fe      	b.n	800349e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80034a0:	f002 f814 	bl	80054cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	441a      	add	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	3b01      	subs	r3, #1
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	441a      	add	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	22ff      	movs	r2, #255	; 0xff
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d114      	bne.n	8003520 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01a      	beq.n	8003534 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3310      	adds	r3, #16
 8003502:	4618      	mov	r0, r3
 8003504:	f001 f8de 	bl	80046c4 <xTaskRemoveFromEventList>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <xQueueGenericReset+0xcc>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	e009      	b.n	8003534 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3310      	adds	r3, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fef3 	bl	8003310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3324      	adds	r3, #36	; 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff feee 	bl	8003310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003534:	f001 fff8 	bl	8005528 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003538:	2301      	movs	r3, #1
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	; 0x38
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <xQueueGenericCreateStatic+0x28>
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	e7fe      	b.n	800356e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <xQueueGenericCreateStatic+0x42>
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	e7fe      	b.n	8003588 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <xQueueGenericCreateStatic+0x4e>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <xQueueGenericCreateStatic+0x52>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericCreateStatic+0x54>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <xQueueGenericCreateStatic+0x6c>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	e7fe      	b.n	80035b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <xQueueGenericCreateStatic+0x78>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <xQueueGenericCreateStatic+0x7c>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <xQueueGenericCreateStatic+0x7e>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <xQueueGenericCreateStatic+0x96>
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e7fe      	b.n	80035dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035de:	2350      	movs	r3, #80	; 0x50
 80035e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b50      	cmp	r3, #80	; 0x50
 80035e6:	d009      	beq.n	80035fc <xQueueGenericCreateStatic+0xb4>
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e7fe      	b.n	80035fa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003610:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f805 	bl	800362e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003626:	4618      	mov	r0, r3
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e002      	b.n	8003650 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800365c:	2101      	movs	r1, #1
 800365e:	69b8      	ldr	r0, [r7, #24]
 8003660:	f7ff ff0a 	bl	8003478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	; 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <xQueueGenericSend+0x30>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	e7fe      	b.n	80036a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <xQueueGenericSend+0x3e>
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSend+0x42>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSend+0x44>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <xQueueGenericSend+0x5c>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e7fe      	b.n	80036ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d103      	bne.n	80036de <xQueueGenericSend+0x6a>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <xQueueGenericSend+0x6e>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <xQueueGenericSend+0x70>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <xQueueGenericSend+0x88>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	e7fe      	b.n	80036fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036fc:	f001 f998 	bl	8004a30 <xTaskGetSchedulerState>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <xQueueGenericSend+0x98>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <xQueueGenericSend+0x9c>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <xQueueGenericSend+0x9e>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <xQueueGenericSend+0xb6>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e7fe      	b.n	8003728 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800372a:	f001 fecf 	bl	80054cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <xQueueGenericSend+0xcc>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d129      	bne.n	8003794 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003746:	f000 f9ff 	bl	8003b48 <prvCopyDataToQueue>
 800374a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d010      	beq.n	8003776 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f000 ffb3 	bl	80046c4 <xTaskRemoveFromEventList>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003764:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <xQueueGenericSend+0x1f0>)
 8003766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	e00a      	b.n	800378c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <xQueueGenericSend+0x1f0>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800378c:	f001 fecc 	bl	8005528 <vPortExitCritical>
				return pdPASS;
 8003790:	2301      	movs	r3, #1
 8003792:	e063      	b.n	800385c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800379a:	f001 fec5 	bl	8005528 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	e05c      	b.n	800385c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ffeb 	bl	8004788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037b6:	f001 feb7 	bl	8005528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ba:	f000 fd67 	bl	800428c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037be:	f001 fe85 	bl	80054cc <vPortEnterCritical>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d103      	bne.n	80037d8 <xQueueGenericSend+0x164>
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d103      	bne.n	80037ee <xQueueGenericSend+0x17a>
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ee:	f001 fe9b 	bl	8005528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037f2:	1d3a      	adds	r2, r7, #4
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 ffda 	bl	80047b4 <xTaskCheckForTimeOut>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d124      	bne.n	8003850 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003808:	f000 fa96 	bl	8003d38 <prvIsQueueFull>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d018      	beq.n	8003844 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	3310      	adds	r3, #16
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f000 ff04 	bl	8004628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 fa21 	bl	8003c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003826:	f000 fd3f 	bl	80042a8 <xTaskResumeAll>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af7c 	bne.w	800372a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <xQueueGenericSend+0x1f0>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	e772      	b.n	800372a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003846:	f000 fa0f 	bl	8003c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800384a:	f000 fd2d 	bl	80042a8 <xTaskResumeAll>
 800384e:	e76c      	b.n	800372a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003852:	f000 fa09 	bl	8003c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003856:	f000 fd27 	bl	80042a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800385a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800385c:	4618      	mov	r0, r3
 800385e:	3738      	adds	r7, #56	; 0x38
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <xQueueGenericSendFromISR+0x2c>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e7fe      	b.n	8003892 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <xQueueGenericSendFromISR+0x3a>
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <xQueueGenericSendFromISR+0x3e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <xQueueGenericSendFromISR+0x40>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <xQueueGenericSendFromISR+0x58>
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	e7fe      	b.n	80038be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d103      	bne.n	80038ce <xQueueGenericSendFromISR+0x66>
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <xQueueGenericSendFromISR+0x6a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <xQueueGenericSendFromISR+0x6c>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <xQueueGenericSendFromISR+0x84>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e7fe      	b.n	80038ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ec:	f001 feca 	bl	8005684 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038f0:	f3ef 8211 	mrs	r2, BASEPRI
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	61ba      	str	r2, [r7, #24]
 8003906:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003908:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <xQueueGenericSendFromISR+0xb6>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d12c      	bne.n	8003978 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800392e:	f000 f90b 	bl	8003b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003932:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d112      	bne.n	8003962 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	4618      	mov	r0, r3
 800394a:	f000 febb 	bl	80046c4 <xTaskRemoveFromEventList>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003962:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003966:	3301      	adds	r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b25a      	sxtb	r2, r3
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003972:	2301      	movs	r3, #1
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003976:	e001      	b.n	800397c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003978:	2300      	movs	r3, #0
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003988:	4618      	mov	r0, r3
 800398a:	3738      	adds	r7, #56	; 0x38
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	; 0x30
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <xQueueReceive+0x2e>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	e7fe      	b.n	80039bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <xQueueReceive+0x3c>
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <xQueueReceive+0x40>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <xQueueReceive+0x42>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <xQueueReceive+0x5a>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e7fe      	b.n	80039e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ea:	f001 f821 	bl	8004a30 <xTaskGetSchedulerState>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <xQueueReceive+0x6a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueReceive+0x6e>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueReceive+0x70>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <xQueueReceive+0x88>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e7fe      	b.n	8003a16 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a18:	f001 fd58 	bl	80054cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01f      	beq.n	8003a68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a2c:	f000 f8f6 	bl	8003c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	1e5a      	subs	r2, r3, #1
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00f      	beq.n	8003a60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	3310      	adds	r3, #16
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fe3d 	bl	80046c4 <xTaskRemoveFromEventList>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a50:	4b3c      	ldr	r3, [pc, #240]	; (8003b44 <xQueueReceive+0x1b4>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a60:	f001 fd62 	bl	8005528 <vPortExitCritical>
				return pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e069      	b.n	8003b3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a6e:	f001 fd5b 	bl	8005528 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e062      	b.n	8003b3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a7c:	f107 0310 	add.w	r3, r7, #16
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe81 	bl	8004788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a8a:	f001 fd4d 	bl	8005528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a8e:	f000 fbfd 	bl	800428c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a92:	f001 fd1b 	bl	80054cc <vPortEnterCritical>
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a9c:	b25b      	sxtb	r3, r3
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d103      	bne.n	8003aac <xQueueReceive+0x11c>
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <xQueueReceive+0x132>
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac2:	f001 fd31 	bl	8005528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac6:	1d3a      	adds	r2, r7, #4
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fe70 	bl	80047b4 <xTaskCheckForTimeOut>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d123      	bne.n	8003b22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003adc:	f000 f916 	bl	8003d0c <prvIsQueueEmpty>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	3324      	adds	r3, #36	; 0x24
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fd9a 	bl	8004628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af6:	f000 f8b7 	bl	8003c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003afa:	f000 fbd5 	bl	80042a8 <xTaskResumeAll>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d189      	bne.n	8003a18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <xQueueReceive+0x1b4>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	e780      	b.n	8003a18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b18:	f000 f8a6 	bl	8003c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b1c:	f000 fbc4 	bl	80042a8 <xTaskResumeAll>
 8003b20:	e77a      	b.n	8003a18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	f000 f8a0 	bl	8003c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b28:	f000 fbbe 	bl	80042a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b2e:	f000 f8ed 	bl	8003d0c <prvIsQueueEmpty>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f43f af6f 	beq.w	8003a18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d14d      	bne.n	8003c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff7a 	bl	8004a6c <xTaskPriorityDisinherit>
 8003b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	e043      	b.n	8003c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d119      	bne.n	8003bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6858      	ldr	r0, [r3, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	461a      	mov	r2, r3
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	f001 ffae 	bl	8005af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d32b      	bcc.n	8003c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	e026      	b.n	8003c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68d8      	ldr	r0, [r3, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	f001 ff94 	bl	8005af4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	425b      	negs	r3, r3
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d207      	bcs.n	8003bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d105      	bne.n	8003c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c12:	697b      	ldr	r3, [r7, #20]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	441a      	add	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d303      	bcc.n	8003c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68d9      	ldr	r1, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6838      	ldr	r0, [r7, #0]
 8003c5c:	f001 ff4a 	bl	8005af4 <memcpy>
	}
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c70:	f001 fc2c 	bl	80054cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c7c:	e011      	b.n	8003ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3324      	adds	r3, #36	; 0x24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fd1a 	bl	80046c4 <xTaskRemoveFromEventList>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c96:	f000 fded 	bl	8004874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dce9      	bgt.n	8003c7e <prvUnlockQueue+0x16>
 8003caa:	e000      	b.n	8003cae <prvUnlockQueue+0x46>
					break;
 8003cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cb6:	f001 fc37 	bl	8005528 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cba:	f001 fc07 	bl	80054cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cc6:	e011      	b.n	8003cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fcf5 	bl	80046c4 <xTaskRemoveFromEventList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ce0:	f000 fdc8 	bl	8004874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dce9      	bgt.n	8003cc8 <prvUnlockQueue+0x60>
 8003cf4:	e000      	b.n	8003cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	22ff      	movs	r2, #255	; 0xff
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d00:	f001 fc12 	bl	8005528 <vPortExitCritical>
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d14:	f001 fbda 	bl	80054cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e001      	b.n	8003d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d2a:	f001 fbfd 	bl	8005528 <vPortExitCritical>

	return xReturn;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d40:	f001 fbc4 	bl	80054cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d102      	bne.n	8003d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e001      	b.n	8003d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d5a:	f001 fbe5 	bl	8005528 <vPortExitCritical>

	return xReturn;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e014      	b.n	8003da2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <vQueueAddToRegistry+0x4c>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d84:	490b      	ldr	r1, [pc, #44]	; (8003db4 <vQueueAddToRegistry+0x4c>)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <vQueueAddToRegistry+0x4c>)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d9a:	e005      	b.n	8003da8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b07      	cmp	r3, #7
 8003da6:	d9e7      	bls.n	8003d78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20004a64 	.word	0x20004a64

08003db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dc8:	f001 fb80 	bl	80054cc <vPortEnterCritical>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vQueueWaitForMessageRestricted+0x2a>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d103      	bne.n	8003df8 <vQueueWaitForMessageRestricted+0x40>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df8:	f001 fb96 	bl	8005528 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc2f 	bl	8004670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff28 	bl	8003c68 <prvUnlockQueue>
	}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08e      	sub	sp, #56	; 0x38
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <xTaskCreateStatic+0x28>
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	e7fe      	b.n	8003e46 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <xTaskCreateStatic+0x42>
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e7fe      	b.n	8003e60 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e62:	235c      	movs	r3, #92	; 0x5c
 8003e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b5c      	cmp	r3, #92	; 0x5c
 8003e6a:	d009      	beq.n	8003e80 <xTaskCreateStatic+0x60>
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e7fe      	b.n	8003e7e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01e      	beq.n	8003ec6 <xTaskCreateStatic+0xa6>
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01b      	beq.n	8003ec6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9303      	str	r3, [sp, #12]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	9302      	str	r3, [sp, #8]
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f850 	bl	8003f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec0:	f000 f8dc 	bl	800407c <prvAddNewTaskToReadyList>
 8003ec4:	e001      	b.n	8003eca <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eca:	697b      	ldr	r3, [r7, #20]
	}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3728      	adds	r7, #40	; 0x28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af04      	add	r7, sp, #16
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 fc09 	bl	8005700 <pvPortMalloc>
 8003eee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ef6:	205c      	movs	r0, #92	; 0x5c
 8003ef8:	f001 fc02 	bl	8005700 <pvPortMalloc>
 8003efc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0a:	e005      	b.n	8003f18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f0c:	6978      	ldr	r0, [r7, #20]
 8003f0e:	f001 fcb9 	bl	8005884 <vPortFree>
 8003f12:	e001      	b.n	8003f18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f80e 	bl	8003f5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f42:	69f8      	ldr	r0, [r7, #28]
 8003f44:	f000 f89a 	bl	800407c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	e002      	b.n	8003f54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f54:	69bb      	ldr	r3, [r7, #24]
	}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	21a5      	movs	r1, #165	; 0xa5
 8003f78:	f001 fdc7 	bl	8005b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f86:	3b01      	subs	r3, #1
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f023 0307 	bic.w	r3, r3, #7
 8003f94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <prvInitialiseNewTask+0x56>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e7fe      	b.n	8003fb2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e012      	b.n	8003fe6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	7819      	ldrb	r1, [r3, #0]
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3334      	adds	r3, #52	; 0x34
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	d9e9      	bls.n	8003fc0 <prvInitialiseNewTask+0x62>
 8003fec:	e000      	b.n	8003ff0 <prvInitialiseNewTask+0x92>
			{
				break;
 8003fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	e003      	b.n	8004002 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b37      	cmp	r3, #55	; 0x37
 8004006:	d901      	bls.n	800400c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004008:	2337      	movs	r3, #55	; 0x37
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004016:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3304      	adds	r3, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f994 	bl	8003350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f98f 	bl	8003350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	2200      	movs	r2, #0
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	69b8      	ldr	r0, [r7, #24]
 800405c:	f001 f90c 	bl	8005278 <pxPortInitialiseStack>
 8004060:	4602      	mov	r2, r0
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004072:	bf00      	nop
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004084:	f001 fa22 	bl	80054cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004088:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <prvAddNewTaskToReadyList+0xc4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <prvAddNewTaskToReadyList+0xc4>)
 8004090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004092:	4b2c      	ldr	r3, [pc, #176]	; (8004144 <prvAddNewTaskToReadyList+0xc8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800409a:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <prvAddNewTaskToReadyList+0xc8>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <prvAddNewTaskToReadyList+0xc4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d110      	bne.n	80040ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040a8:	f000 fc08 	bl	80048bc <prvInitialiseTaskLists>
 80040ac:	e00d      	b.n	80040ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <prvAddNewTaskToReadyList+0xcc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <prvAddNewTaskToReadyList+0xc8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d802      	bhi.n	80040ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <prvAddNewTaskToReadyList+0xc8>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <prvAddNewTaskToReadyList+0xd0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a1e      	ldr	r2, [pc, #120]	; (800414c <prvAddNewTaskToReadyList+0xd0>)
 80040d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <prvAddNewTaskToReadyList+0xd0>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <prvAddNewTaskToReadyList+0xd4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d903      	bls.n	80040f0 <prvAddNewTaskToReadyList+0x74>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a18      	ldr	r2, [pc, #96]	; (8004150 <prvAddNewTaskToReadyList+0xd4>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a15      	ldr	r2, [pc, #84]	; (8004154 <prvAddNewTaskToReadyList+0xd8>)
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7ff f92f 	bl	800336a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800410c:	f001 fa0c 	bl	8005528 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <prvAddNewTaskToReadyList+0xcc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <prvAddNewTaskToReadyList+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	429a      	cmp	r2, r3
 8004124:	d207      	bcs.n	8004136 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <prvAddNewTaskToReadyList+0xdc>)
 8004128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000bc4 	.word	0x20000bc4
 8004144:	200006f0 	.word	0x200006f0
 8004148:	20000bd0 	.word	0x20000bd0
 800414c:	20000be0 	.word	0x20000be0
 8004150:	20000bcc 	.word	0x20000bcc
 8004154:	200006f4 	.word	0x200006f4
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <vTaskDelay+0x60>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <vTaskDelay+0x2e>
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	e7fe      	b.n	8004188 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800418a:	f000 f87f 	bl	800428c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800418e:	2100      	movs	r1, #0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fcd7 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004196:	f000 f887 	bl	80042a8 <xTaskResumeAll>
 800419a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <vTaskDelay+0x64>)
 80041a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000bec 	.word	0x20000bec
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041d2:	463a      	mov	r2, r7
 80041d4:	1d39      	adds	r1, r7, #4
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff f864 	bl	80032a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	9202      	str	r2, [sp, #8]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2300      	movs	r3, #0
 80041f0:	460a      	mov	r2, r1
 80041f2:	4920      	ldr	r1, [pc, #128]	; (8004274 <vTaskStartScheduler+0xb0>)
 80041f4:	4820      	ldr	r0, [pc, #128]	; (8004278 <vTaskStartScheduler+0xb4>)
 80041f6:	f7ff fe13 	bl	8003e20 <xTaskCreateStatic>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <vTaskStartScheduler+0xb8>)
 80041fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <vTaskStartScheduler+0xb8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004208:	2301      	movs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e001      	b.n	8004212 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d102      	bne.n	800421e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004218:	f000 fce8 	bl	8004bec <xTimerCreateTimerTask>
 800421c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d115      	bne.n	8004250 <vTaskStartScheduler+0x8c>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <vTaskStartScheduler+0xbc>)
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <vTaskStartScheduler+0xc0>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <vTaskStartScheduler+0xc4>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800424a:	f001 f8a1 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800424e:	e00d      	b.n	800426c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d109      	bne.n	800426c <vTaskStartScheduler+0xa8>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e7fe      	b.n	800426a <vTaskStartScheduler+0xa6>
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	08005b54 	.word	0x08005b54
 8004278:	0800488d 	.word	0x0800488d
 800427c:	20000be8 	.word	0x20000be8
 8004280:	20000be4 	.word	0x20000be4
 8004284:	20000bd0 	.word	0x20000bd0
 8004288:	20000bc8 	.word	0x20000bc8

0800428c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <vTaskSuspendAll+0x18>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <vTaskSuspendAll+0x18>)
 8004298:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000bec 	.word	0x20000bec

080042a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042b6:	4b41      	ldr	r3, [pc, #260]	; (80043bc <xTaskResumeAll+0x114>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <xTaskResumeAll+0x2a>
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	e7fe      	b.n	80042d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042d2:	f001 f8fb 	bl	80054cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <xTaskResumeAll+0x114>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	4a37      	ldr	r2, [pc, #220]	; (80043bc <xTaskResumeAll+0x114>)
 80042de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <xTaskResumeAll+0x114>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d162      	bne.n	80043ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <xTaskResumeAll+0x118>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d05e      	beq.n	80043ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042f0:	e02f      	b.n	8004352 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <xTaskResumeAll+0x11c>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3318      	adds	r3, #24
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f890 	bl	8003424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff f88b 	bl	8003424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <xTaskResumeAll+0x120>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d903      	bls.n	8004322 <xTaskResumeAll+0x7a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <xTaskResumeAll+0x120>)
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a27      	ldr	r2, [pc, #156]	; (80043cc <xTaskResumeAll+0x124>)
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7ff f816 	bl	800336a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <xTaskResumeAll+0x128>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <xTaskResumeAll+0x12c>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <xTaskResumeAll+0x11c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1cb      	bne.n	80042f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004360:	f000 fb46 	bl	80049f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <xTaskResumeAll+0x130>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004370:	f000 f846 	bl	8004400 <xTaskIncrementTick>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <xTaskResumeAll+0x12c>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f1      	bne.n	8004370 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <xTaskResumeAll+0x130>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <xTaskResumeAll+0x12c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800439a:	2301      	movs	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800439e:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <xTaskResumeAll+0x134>)
 80043a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ae:	f001 f8bb 	bl	8005528 <vPortExitCritical>

	return xAlreadyYielded;
 80043b2:	68bb      	ldr	r3, [r7, #8]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000bec 	.word	0x20000bec
 80043c0:	20000bc4 	.word	0x20000bc4
 80043c4:	20000b84 	.word	0x20000b84
 80043c8:	20000bcc 	.word	0x20000bcc
 80043cc:	200006f4 	.word	0x200006f4
 80043d0:	200006f0 	.word	0x200006f0
 80043d4:	20000bd8 	.word	0x20000bd8
 80043d8:	20000bd4 	.word	0x20000bd4
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <xTaskGetTickCount+0x1c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000bc8 	.word	0x20000bc8

08004400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440a:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <xTaskIncrementTick+0x144>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 8088 	bne.w	8004524 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <xTaskIncrementTick+0x148>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800441c:	4a4a      	ldr	r2, [pc, #296]	; (8004548 <xTaskIncrementTick+0x148>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11f      	bne.n	8004468 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004428:	4b48      	ldr	r3, [pc, #288]	; (800454c <xTaskIncrementTick+0x14c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <xTaskIncrementTick+0x46>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	e7fe      	b.n	8004444 <xTaskIncrementTick+0x44>
 8004446:	4b41      	ldr	r3, [pc, #260]	; (800454c <xTaskIncrementTick+0x14c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	4b40      	ldr	r3, [pc, #256]	; (8004550 <xTaskIncrementTick+0x150>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3e      	ldr	r2, [pc, #248]	; (800454c <xTaskIncrementTick+0x14c>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4a3e      	ldr	r2, [pc, #248]	; (8004550 <xTaskIncrementTick+0x150>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <xTaskIncrementTick+0x154>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <xTaskIncrementTick+0x154>)
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	f000 fac4 	bl	80049f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <xTaskIncrementTick+0x158>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d349      	bcc.n	8004506 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <xTaskIncrementTick+0x14c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <xTaskIncrementTick+0x158>)
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	601a      	str	r2, [r3, #0]
					break;
 8004484:	e03f      	b.n	8004506 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <xTaskIncrementTick+0x14c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d203      	bcs.n	80044a6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800449e:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <xTaskIncrementTick+0x158>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044a4:	e02f      	b.n	8004506 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe ffba 	bl	8003424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3318      	adds	r3, #24
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe ffb1 	bl	8003424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <xTaskIncrementTick+0x15c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d903      	bls.n	80044d6 <xTaskIncrementTick+0xd6>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <xTaskIncrementTick+0x15c>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <xTaskIncrementTick+0x160>)
 80044e4:	441a      	add	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7fe ff3c 	bl	800336a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <xTaskIncrementTick+0x164>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3b8      	bcc.n	8004472 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004504:	e7b5      	b.n	8004472 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <xTaskIncrementTick+0x164>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4914      	ldr	r1, [pc, #80]	; (8004560 <xTaskIncrementTick+0x160>)
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d907      	bls.n	800452e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800451e:	2301      	movs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e004      	b.n	800452e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004524:	4b10      	ldr	r3, [pc, #64]	; (8004568 <xTaskIncrementTick+0x168>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a0f      	ldr	r2, [pc, #60]	; (8004568 <xTaskIncrementTick+0x168>)
 800452c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <xTaskIncrementTick+0x16c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004536:	2301      	movs	r3, #1
 8004538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800453a:	697b      	ldr	r3, [r7, #20]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000bec 	.word	0x20000bec
 8004548:	20000bc8 	.word	0x20000bc8
 800454c:	20000b7c 	.word	0x20000b7c
 8004550:	20000b80 	.word	0x20000b80
 8004554:	20000bdc 	.word	0x20000bdc
 8004558:	20000be4 	.word	0x20000be4
 800455c:	20000bcc 	.word	0x20000bcc
 8004560:	200006f4 	.word	0x200006f4
 8004564:	200006f0 	.word	0x200006f0
 8004568:	20000bd4 	.word	0x20000bd4
 800456c:	20000bd8 	.word	0x20000bd8

08004570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <vTaskSwitchContext+0xa4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <vTaskSwitchContext+0xa8>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004584:	e040      	b.n	8004608 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <vTaskSwitchContext+0xa8>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <vTaskSwitchContext+0xac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e00f      	b.n	80045b4 <vTaskSwitchContext+0x44>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <vTaskSwitchContext+0x3e>
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	e7fe      	b.n	80045ac <vTaskSwitchContext+0x3c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	491a      	ldr	r1, [pc, #104]	; (8004620 <vTaskSwitchContext+0xb0>)
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0e5      	beq.n	8004594 <vTaskSwitchContext+0x24>
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4a13      	ldr	r2, [pc, #76]	; (8004620 <vTaskSwitchContext+0xb0>)
 80045d4:	4413      	add	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3308      	adds	r3, #8
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d104      	bne.n	80045f8 <vTaskSwitchContext+0x88>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <vTaskSwitchContext+0xb4>)
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4a06      	ldr	r2, [pc, #24]	; (800461c <vTaskSwitchContext+0xac>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20000bec 	.word	0x20000bec
 8004618:	20000bd8 	.word	0x20000bd8
 800461c:	20000bcc 	.word	0x20000bcc
 8004620:	200006f4 	.word	0x200006f4
 8004624:	200006f0 	.word	0x200006f0

08004628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <vTaskPlaceOnEventList+0x24>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e7fe      	b.n	800464a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <vTaskPlaceOnEventList+0x44>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3318      	adds	r3, #24
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fe feac 	bl	80033b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800465a:	2101      	movs	r1, #1
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f000 fa71 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200006f0 	.word	0x200006f0

08004670 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <vTaskPlaceOnEventListRestricted+0x26>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e7fe      	b.n	8004694 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3318      	adds	r3, #24
 800469c:	4619      	mov	r1, r3
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7fe fe63 	bl	800336a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	68b8      	ldr	r0, [r7, #8]
 80046b4:	f000 fa46 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
	}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200006f0 	.word	0x200006f0

080046c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <xTaskRemoveFromEventList+0x2a>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e7fe      	b.n	80046ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	3318      	adds	r3, #24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fe96 	bl	8003424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <xTaskRemoveFromEventList+0xac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11d      	bne.n	800473c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe fe8d 	bl	8003424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <xTaskRemoveFromEventList+0xb0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d903      	bls.n	800471e <xTaskRemoveFromEventList+0x5a>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <xTaskRemoveFromEventList+0xb0>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a13      	ldr	r2, [pc, #76]	; (8004778 <xTaskRemoveFromEventList+0xb4>)
 800472c:	441a      	add	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe fe18 	bl	800336a <vListInsertEnd>
 800473a:	e005      	b.n	8004748 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3318      	adds	r3, #24
 8004740:	4619      	mov	r1, r3
 8004742:	480e      	ldr	r0, [pc, #56]	; (800477c <xTaskRemoveFromEventList+0xb8>)
 8004744:	f7fe fe11 	bl	800336a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <xTaskRemoveFromEventList+0xbc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	429a      	cmp	r2, r3
 8004754:	d905      	bls.n	8004762 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004756:	2301      	movs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <xTaskRemoveFromEventList+0xc0>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e001      	b.n	8004766 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004766:	697b      	ldr	r3, [r7, #20]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000bec 	.word	0x20000bec
 8004774:	20000bcc 	.word	0x20000bcc
 8004778:	200006f4 	.word	0x200006f4
 800477c:	20000b84 	.word	0x20000b84
 8004780:	200006f0 	.word	0x200006f0
 8004784:	20000bd8 	.word	0x20000bd8

08004788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <vTaskInternalSetTimeOutState+0x24>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <vTaskInternalSetTimeOutState+0x28>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	605a      	str	r2, [r3, #4]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000bdc 	.word	0x20000bdc
 80047b0:	20000bc8 	.word	0x20000bc8

080047b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <xTaskCheckForTimeOut+0x24>
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e7fe      	b.n	80047d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <xTaskCheckForTimeOut+0x3e>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e7fe      	b.n	80047f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80047f2:	f000 fe6b 	bl	80054cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <xTaskCheckForTimeOut+0xb8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d102      	bne.n	8004816 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e023      	b.n	800485e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <xTaskCheckForTimeOut+0xbc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d007      	beq.n	8004832 <xTaskCheckForTimeOut+0x7e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	e015      	b.n	800485e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d20b      	bcs.n	8004854 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad2      	subs	r2, r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ff9d 	bl	8004788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e004      	b.n	800485e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485e:	f000 fe63 	bl	8005528 <vPortExitCritical>

	return xReturn;
 8004862:	69fb      	ldr	r3, [r7, #28]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000bc8 	.word	0x20000bc8
 8004870:	20000bdc 	.word	0x20000bdc

08004874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <vTaskMissedYield+0x14>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	20000bd8 	.word	0x20000bd8

0800488c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004894:	f000 f852 	bl	800493c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <prvIdleTask+0x28>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d9f9      	bls.n	8004894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <prvIdleTask+0x2c>)
 80048a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048b0:	e7f0      	b.n	8004894 <prvIdleTask+0x8>
 80048b2:	bf00      	nop
 80048b4:	200006f4 	.word	0x200006f4
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e00c      	b.n	80048e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <prvInitialiseTaskLists+0x60>)
 80048d4:	4413      	add	r3, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fd1a 	bl	8003310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b37      	cmp	r3, #55	; 0x37
 80048e6:	d9ef      	bls.n	80048c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e8:	480d      	ldr	r0, [pc, #52]	; (8004920 <prvInitialiseTaskLists+0x64>)
 80048ea:	f7fe fd11 	bl	8003310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ee:	480d      	ldr	r0, [pc, #52]	; (8004924 <prvInitialiseTaskLists+0x68>)
 80048f0:	f7fe fd0e 	bl	8003310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f4:	480c      	ldr	r0, [pc, #48]	; (8004928 <prvInitialiseTaskLists+0x6c>)
 80048f6:	f7fe fd0b 	bl	8003310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048fa:	480c      	ldr	r0, [pc, #48]	; (800492c <prvInitialiseTaskLists+0x70>)
 80048fc:	f7fe fd08 	bl	8003310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004900:	480b      	ldr	r0, [pc, #44]	; (8004930 <prvInitialiseTaskLists+0x74>)
 8004902:	f7fe fd05 	bl	8003310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <prvInitialiseTaskLists+0x78>)
 8004908:	4a05      	ldr	r2, [pc, #20]	; (8004920 <prvInitialiseTaskLists+0x64>)
 800490a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <prvInitialiseTaskLists+0x7c>)
 800490e:	4a05      	ldr	r2, [pc, #20]	; (8004924 <prvInitialiseTaskLists+0x68>)
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200006f4 	.word	0x200006f4
 8004920:	20000b54 	.word	0x20000b54
 8004924:	20000b68 	.word	0x20000b68
 8004928:	20000b84 	.word	0x20000b84
 800492c:	20000b98 	.word	0x20000b98
 8004930:	20000bb0 	.word	0x20000bb0
 8004934:	20000b7c 	.word	0x20000b7c
 8004938:	20000b80 	.word	0x20000b80

0800493c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004942:	e019      	b.n	8004978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004944:	f000 fdc2 	bl	80054cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <prvCheckTasksWaitingTermination+0x4c>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fd65 	bl	8003424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <prvCheckTasksWaitingTermination+0x50>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <prvCheckTasksWaitingTermination+0x50>)
 8004962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <prvCheckTasksWaitingTermination+0x54>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	4a09      	ldr	r2, [pc, #36]	; (8004990 <prvCheckTasksWaitingTermination+0x54>)
 800496c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496e:	f000 fddb 	bl	8005528 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f80e 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <prvCheckTasksWaitingTermination+0x54>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e1      	bne.n	8004944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000b98 	.word	0x20000b98
 800498c:	20000bc4 	.word	0x20000bc4
 8004990:	20000bac 	.word	0x20000bac

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff6a 	bl	8005884 <vPortFree>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ff67 	bl	8005884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b6:	e017      	b.n	80049e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 ff5e 	bl	8005884 <vPortFree>
	}
 80049c8:	e00e      	b.n	80049e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d009      	beq.n	80049e8 <prvDeleteTCB+0x54>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e7fe      	b.n	80049e6 <prvDeleteTCB+0x52>
	}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <prvResetNextTaskUnblockTime+0x38>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <prvResetNextTaskUnblockTime+0x3c>)
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295
 8004a06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a08:	e008      	b.n	8004a1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <prvResetNextTaskUnblockTime+0x38>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <prvResetNextTaskUnblockTime+0x3c>)
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000b7c 	.word	0x20000b7c
 8004a2c:	20000be4 	.word	0x20000be4

08004a30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <xTaskGetSchedulerState+0x34>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	e008      	b.n	8004a56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <xTaskGetSchedulerState+0x38>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	e001      	b.n	8004a56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a56:	687b      	ldr	r3, [r7, #4]
	}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000bd0 	.word	0x20000bd0
 8004a68:	20000bec 	.word	0x20000bec

08004a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d054      	beq.n	8004b2c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a82:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <xTaskPriorityDisinherit+0xcc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d009      	beq.n	8004aa0 <xTaskPriorityDisinherit+0x34>
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e7fe      	b.n	8004a9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <xTaskPriorityDisinherit+0x50>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	e7fe      	b.n	8004aba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	1e5a      	subs	r2, r3, #1
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d02c      	beq.n	8004b2c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d128      	bne.n	8004b2c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fca0 	bl	8003424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <xTaskPriorityDisinherit+0xd0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d903      	bls.n	8004b0c <xTaskPriorityDisinherit+0xa0>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <xTaskPriorityDisinherit+0xd0>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <xTaskPriorityDisinherit+0xd4>)
 8004b1a:	441a      	add	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fc21 	bl	800336a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b2c:	697b      	ldr	r3, [r7, #20]
	}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200006f0 	.word	0x200006f0
 8004b3c:	20000bcc 	.word	0x20000bcc
 8004b40:	200006f4 	.word	0x200006f4

08004b44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b54:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fc62 	bl	8003424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d10a      	bne.n	8004b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4819      	ldr	r0, [pc, #100]	; (8004bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8004b78:	f7fe fbf7 	bl	800336a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b7c:	e026      	b.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d209      	bcs.n	8004baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe fc05 	bl	80033b2 <vListInsert>
}
 8004ba8:	e010      	b.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fbfb 	bl	80033b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d202      	bcs.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000bc8 	.word	0x20000bc8
 8004bd8:	200006f0 	.word	0x200006f0
 8004bdc:	20000bb0 	.word	0x20000bb0
 8004be0:	20000b80 	.word	0x20000b80
 8004be4:	20000b7c 	.word	0x20000b7c
 8004be8:	20000be4 	.word	0x20000be4

08004bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bf6:	f000 faff 	bl	80051f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <xTimerCreateTimerTask+0x80>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c0a:	1d3a      	adds	r2, r7, #4
 8004c0c:	f107 0108 	add.w	r1, r7, #8
 8004c10:	f107 030c 	add.w	r3, r7, #12
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fb61 	bl	80032dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	9202      	str	r2, [sp, #8]
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	2302      	movs	r3, #2
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	4910      	ldr	r1, [pc, #64]	; (8004c70 <xTimerCreateTimerTask+0x84>)
 8004c2e:	4811      	ldr	r0, [pc, #68]	; (8004c74 <xTimerCreateTimerTask+0x88>)
 8004c30:	f7ff f8f6 	bl	8003e20 <xTaskCreateStatic>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <xTimerCreateTimerTask+0x8c>)
 8004c38:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <xTimerCreateTimerTask+0x8c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c42:	2301      	movs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <xTimerCreateTimerTask+0x74>
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e7fe      	b.n	8004c5e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000c20 	.word	0x20000c20
 8004c70:	08005b5c 	.word	0x08005b5c
 8004c74:	08004dad 	.word	0x08004dad
 8004c78:	20000c24 	.word	0x20000c24

08004c7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <xTimerGenericCommand+0x2c>
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	e7fe      	b.n	8004ca6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <xTimerGenericCommand+0x94>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d02a      	beq.n	8004d06 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	dc18      	bgt.n	8004cf4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cc2:	f7ff feb5 	bl	8004a30 <xTaskGetSchedulerState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d109      	bne.n	8004ce0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <xTimerGenericCommand+0x94>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	f107 0110 	add.w	r1, r7, #16
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd8:	f7fe fccc 	bl	8003674 <xQueueGenericSend>
 8004cdc:	6278      	str	r0, [r7, #36]	; 0x24
 8004cde:	e012      	b.n	8004d06 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <xTimerGenericCommand+0x94>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f107 0110 	add.w	r1, r7, #16
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2200      	movs	r2, #0
 8004cec:	f7fe fcc2 	bl	8003674 <xQueueGenericSend>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24
 8004cf2:	e008      	b.n	8004d06 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <xTimerGenericCommand+0x94>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f107 0110 	add.w	r1, r7, #16
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	f7fe fdb2 	bl	8003868 <xQueueGenericSendFromISR>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000c20 	.word	0x20000c20

08004d14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <prvProcessExpiredTimer+0x94>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fb79 	bl	8003424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d021      	beq.n	8004d84 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	18d1      	adds	r1, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	6978      	ldr	r0, [r7, #20]
 8004d4e:	f000 f8d1 	bl	8004ef4 <prvInsertTimerInActiveList>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01e      	beq.n	8004d96 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	2100      	movs	r1, #0
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ff8a 	bl	8004c7c <xTimerGenericCommand>
 8004d68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d112      	bne.n	8004d96 <prvProcessExpiredTimer+0x82>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e7fe      	b.n	8004d82 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	4798      	blx	r3
}
 8004d9e:	bf00      	nop
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000c18 	.word	0x20000c18

08004dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f857 	bl	8004e6c <prvGetNextExpireTime>
 8004dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f803 	bl	8004dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dca:	f000 f8d5 	bl	8004f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dce:	e7f1      	b.n	8004db4 <prvTimerTask+0x8>

08004dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dda:	f7ff fa57 	bl	800428c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f866 	bl	8004eb4 <prvSampleTimeNow>
 8004de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d130      	bne.n	8004e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <prvProcessTimerOrBlockTask+0x3c>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d806      	bhi.n	8004e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dfe:	f7ff fa53 	bl	80042a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ff85 	bl	8004d14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e0a:	e024      	b.n	8004e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <prvProcessTimerOrBlockTask+0x90>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <prvProcessTimerOrBlockTask+0x50>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <prvProcessTimerOrBlockTask+0x52>
 8004e20:	2300      	movs	r3, #0
 8004e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <prvProcessTimerOrBlockTask+0x94>)
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	f7fe ffc1 	bl	8003db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e36:	f7ff fa37 	bl	80042a8 <xTaskResumeAll>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <prvProcessTimerOrBlockTask+0x98>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
}
 8004e50:	e001      	b.n	8004e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e52:	f7ff fa29 	bl	80042a8 <xTaskResumeAll>
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000c1c 	.word	0x20000c1c
 8004e64:	20000c20 	.word	0x20000c20
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <prvGetNextExpireTime+0x44>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <prvGetNextExpireTime+0x16>
 8004e7e:	2201      	movs	r2, #1
 8004e80:	e000      	b.n	8004e84 <prvGetNextExpireTime+0x18>
 8004e82:	2200      	movs	r2, #0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <prvGetNextExpireTime+0x44>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e001      	b.n	8004ea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000c18 	.word	0x20000c18

08004eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ebc:	f7ff fa90 	bl	80043e0 <xTaskGetTickCount>
 8004ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <prvSampleTimeNow+0x3c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d205      	bcs.n	8004ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ecc:	f000 f930 	bl	8005130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ede:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <prvSampleTimeNow+0x3c>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000c28 	.word	0x20000c28

08004ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d812      	bhi.n	8004f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e01b      	b.n	8004f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <prvInsertTimerInActiveList+0x7c>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7fe fa3a 	bl	80033b2 <vListInsert>
 8004f3e:	e012      	b.n	8004f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d206      	bcs.n	8004f56 <prvInsertTimerInActiveList+0x62>
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e007      	b.n	8004f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <prvInsertTimerInActiveList+0x80>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7fe fa26 	bl	80033b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f66:	697b      	ldr	r3, [r7, #20]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000c1c 	.word	0x20000c1c
 8004f74:	20000c18 	.word	0x20000c18

08004f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08e      	sub	sp, #56	; 0x38
 8004f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f7e:	e0c6      	b.n	800510e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da17      	bge.n	8004fb6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	3304      	adds	r3, #4
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <prvProcessReceivedCommands+0x2e>
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e7fe      	b.n	8004fa4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	6850      	ldr	r0, [r2, #4]
 8004fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb0:	6892      	ldr	r2, [r2, #8]
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f2c0 80a7 	blt.w	800510c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fa28 	bl	8003424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff ff6c 	bl	8004eb4 <prvSampleTimeNow>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	f200 8094 	bhi.w	800510e <prvProcessReceivedCommands+0x196>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <prvProcessReceivedCommands+0x74>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	08005087 	.word	0x08005087
 8004ffc:	0800509b 	.word	0x0800509b
 8005000:	080050e3 	.word	0x080050e3
 8005004:	08005015 	.word	0x08005015
 8005008:	08005015 	.word	0x08005015
 800500c:	08005087 	.word	0x08005087
 8005010:	0800509b 	.word	0x0800509b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	18d1      	adds	r1, r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005034:	f7ff ff5e 	bl	8004ef4 <prvInsertTimerInActiveList>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d067      	beq.n	800510e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05c      	beq.n	800510e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	441a      	add	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	2100      	movs	r1, #0
 8005064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005066:	f7ff fe09 	bl	8004c7c <xTimerGenericCommand>
 800506a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d14d      	bne.n	800510e <prvProcessReceivedCommands+0x196>
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e7fe      	b.n	8005084 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005098:	e039      	b.n	800510e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <prvProcessReceivedCommands+0x156>
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e7fe      	b.n	80050cc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	18d1      	adds	r1, r2, r3
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050dc:	f7ff ff0a 	bl	8004ef4 <prvInsertTimerInActiveList>
					break;
 80050e0:	e015      	b.n	800510e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80050f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f2:	f000 fbc7 	bl	8005884 <vPortFree>
 80050f6:	e00a      	b.n	800510e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800510a:	e000      	b.n	800510e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800510c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <prvProcessReceivedCommands+0x1b4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1d39      	adds	r1, r7, #4
 8005114:	2200      	movs	r2, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fc3a 	bl	8003990 <xQueueReceive>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f af2e 	bne.w	8004f80 <prvProcessReceivedCommands+0x8>
	}
}
 8005124:	bf00      	nop
 8005126:	3730      	adds	r7, #48	; 0x30
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000c20 	.word	0x20000c20

08005130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005136:	e047      	b.n	80051c8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005138:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005142:	4b2b      	ldr	r3, [pc, #172]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3304      	adds	r3, #4
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe f967 	bl	8003424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02d      	beq.n	80051c8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	429a      	cmp	r2, r3
 800517c:	d90e      	bls.n	800519c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f7fe f90c 	bl	80033b2 <vListInsert>
 800519a:	e015      	b.n	80051c8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800519c:	2300      	movs	r3, #0
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2300      	movs	r3, #0
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	2100      	movs	r1, #0
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fd68 	bl	8004c7c <xTimerGenericCommand>
 80051ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <prvSwitchTimerLists+0x98>
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	e7fe      	b.n	80051c6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c8:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1b2      	bne.n	8005138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051d8:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <prvSwitchTimerLists+0xc4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <prvSwitchTimerLists+0xc0>)
 80051de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <prvSwitchTimerLists+0xc4>)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6013      	str	r3, [r2, #0]
}
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000c18 	.word	0x20000c18
 80051f4:	20000c1c 	.word	0x20000c1c

080051f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051fe:	f000 f965 	bl	80054cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <prvCheckForValidListAndQueue+0x60>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d120      	bne.n	800524c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800520a:	4814      	ldr	r0, [pc, #80]	; (800525c <prvCheckForValidListAndQueue+0x64>)
 800520c:	f7fe f880 	bl	8003310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005210:	4813      	ldr	r0, [pc, #76]	; (8005260 <prvCheckForValidListAndQueue+0x68>)
 8005212:	f7fe f87d 	bl	8003310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <prvCheckForValidListAndQueue+0x6c>)
 8005218:	4a10      	ldr	r2, [pc, #64]	; (800525c <prvCheckForValidListAndQueue+0x64>)
 800521a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <prvCheckForValidListAndQueue+0x70>)
 800521e:	4a10      	ldr	r2, [pc, #64]	; (8005260 <prvCheckForValidListAndQueue+0x68>)
 8005220:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005222:	2300      	movs	r3, #0
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <prvCheckForValidListAndQueue+0x74>)
 8005228:	4a11      	ldr	r2, [pc, #68]	; (8005270 <prvCheckForValidListAndQueue+0x78>)
 800522a:	2110      	movs	r1, #16
 800522c:	200a      	movs	r0, #10
 800522e:	f7fe f98b 	bl	8003548 <xQueueGenericCreateStatic>
 8005232:	4602      	mov	r2, r0
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <prvCheckForValidListAndQueue+0x60>)
 8005236:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <prvCheckForValidListAndQueue+0x60>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <prvCheckForValidListAndQueue+0x60>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	490b      	ldr	r1, [pc, #44]	; (8005274 <prvCheckForValidListAndQueue+0x7c>)
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fd8e 	bl	8003d68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800524c:	f000 f96c 	bl	8005528 <vPortExitCritical>
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000c20 	.word	0x20000c20
 800525c:	20000bf0 	.word	0x20000bf0
 8005260:	20000c04 	.word	0x20000c04
 8005264:	20000c18 	.word	0x20000c18
 8005268:	20000c1c 	.word	0x20000c1c
 800526c:	20000ccc 	.word	0x20000ccc
 8005270:	20000c2c 	.word	0x20000c2c
 8005274:	08005b64 	.word	0x08005b64

08005278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b04      	subs	r3, #4
 8005288:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b04      	subs	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0201 	bic.w	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3b04      	subs	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <pxPortInitialiseStack+0x64>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3b14      	subs	r3, #20
 80052b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b04      	subs	r3, #4
 80052be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f06f 0202 	mvn.w	r2, #2
 80052c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b20      	subs	r3, #32
 80052cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	080052e1 	.word	0x080052e1

080052e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <prvTaskExitError+0x50>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d009      	beq.n	8005308 <prvTaskExitError+0x28>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e7fe      	b.n	8005306 <prvTaskExitError+0x26>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800531a:	bf00      	nop
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0fc      	beq.n	800531c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	2000000c 	.word	0x2000000c
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	; (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <xPortStartScheduler+0x118>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a44      	ldr	r2, [pc, #272]	; (80054ac <xPortStartScheduler+0x11c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <xPortStartScheduler+0x24>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e7fe      	b.n	80053b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b4:	4b3c      	ldr	r3, [pc, #240]	; (80054a8 <xPortStartScheduler+0x118>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a3d      	ldr	r2, [pc, #244]	; (80054b0 <xPortStartScheduler+0x120>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d109      	bne.n	80053d2 <xPortStartScheduler+0x42>
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e7fe      	b.n	80053d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053d2:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <xPortStartScheduler+0x124>)
 80053d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <xPortStartScheduler+0x128>)
 80053f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053fa:	4b30      	ldr	r3, [pc, #192]	; (80054bc <xPortStartScheduler+0x12c>)
 80053fc:	2207      	movs	r2, #7
 80053fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005400:	e009      	b.n	8005416 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005402:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <xPortStartScheduler+0x12c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a2c      	ldr	r2, [pc, #176]	; (80054bc <xPortStartScheduler+0x12c>)
 800540a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d0ef      	beq.n	8005402 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005422:	4b26      	ldr	r3, [pc, #152]	; (80054bc <xPortStartScheduler+0x12c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	d009      	beq.n	8005442 <xPortStartScheduler+0xb2>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	e7fe      	b.n	8005440 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <xPortStartScheduler+0x12c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <xPortStartScheduler+0x12c>)
 800544a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <xPortStartScheduler+0x12c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005454:	4a19      	ldr	r2, [pc, #100]	; (80054bc <xPortStartScheduler+0x12c>)
 8005456:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <xPortStartScheduler+0x130>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <xPortStartScheduler+0x130>)
 8005466:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800546a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800546c:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <xPortStartScheduler+0x130>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <xPortStartScheduler+0x130>)
 8005472:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005476:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005478:	f000 f8d6 	bl	8005628 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <xPortStartScheduler+0x134>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005482:	f000 f8f5 	bl	8005670 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xPortStartScheduler+0x138>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a0f      	ldr	r2, [pc, #60]	; (80054c8 <xPortStartScheduler+0x138>)
 800548c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005490:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005492:	f7ff ff69 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005496:	f7ff f86b 	bl	8004570 <vTaskSwitchContext>
	prvTaskExitError();
 800549a:	f7ff ff21 	bl	80052e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed00 	.word	0xe000ed00
 80054ac:	410fc271 	.word	0x410fc271
 80054b0:	410fc270 	.word	0x410fc270
 80054b4:	e000e400 	.word	0xe000e400
 80054b8:	20000d1c 	.word	0x20000d1c
 80054bc:	20000d20 	.word	0x20000d20
 80054c0:	e000ed20 	.word	0xe000ed20
 80054c4:	2000000c 	.word	0x2000000c
 80054c8:	e000ef34 	.word	0xe000ef34

080054cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <vPortEnterCritical+0x54>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3301      	adds	r3, #1
 80054ea:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <vPortEnterCritical+0x54>)
 80054ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <vPortEnterCritical+0x54>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10e      	bne.n	8005514 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <vPortEnterCritical+0x58>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <vPortEnterCritical+0x48>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	e7fe      	b.n	8005512 <vPortEnterCritical+0x46>
	}
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	2000000c 	.word	0x2000000c
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800552e:	4b11      	ldr	r3, [pc, #68]	; (8005574 <vPortExitCritical+0x4c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <vPortExitCritical+0x22>
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	e7fe      	b.n	8005548 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <vPortExitCritical+0x4c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <vPortExitCritical+0x4c>)
 8005552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <vPortExitCritical+0x4c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <vPortExitCritical+0x3e>
 800555c:	2300      	movs	r3, #0
 800555e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	2000000c 	.word	0x2000000c
	...

08005580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005580:	f3ef 8009 	mrs	r0, PSP
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <pxCurrentTCBConst>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	f01e 0f10 	tst.w	lr, #16
 8005590:	bf08      	it	eq
 8005592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	6010      	str	r0, [r2, #0]
 800559c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055a4:	f380 8811 	msr	BASEPRI, r0
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f7fe ffde 	bl	8004570 <vTaskSwitchContext>
 80055b4:	f04f 0000 	mov.w	r0, #0
 80055b8:	f380 8811 	msr	BASEPRI, r0
 80055bc:	bc09      	pop	{r0, r3}
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6808      	ldr	r0, [r1, #0]
 80055c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c6:	f01e 0f10 	tst.w	lr, #16
 80055ca:	bf08      	it	eq
 80055cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055d0:	f380 8809 	msr	PSP, r0
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	f3af 8000 	nop.w

080055e0 <pxCurrentTCBConst>:
 80055e0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop

080055e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005600:	f7fe fefe 	bl	8004400 <xTaskIncrementTick>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <SysTick_Handler+0x3c>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <vPortSetupTimerInterrupt+0x34>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <vPortSetupTimerInterrupt+0x38>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <vPortSetupTimerInterrupt+0x3c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <vPortSetupTimerInterrupt+0x40>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	4a09      	ldr	r2, [pc, #36]	; (800566c <vPortSetupTimerInterrupt+0x44>)
 8005646:	3b01      	subs	r3, #1
 8005648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <vPortSetupTimerInterrupt+0x34>)
 800564c:	2207      	movs	r2, #7
 800564e:	601a      	str	r2, [r3, #0]
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	e000e010 	.word	0xe000e010
 8005660:	e000e018 	.word	0xe000e018
 8005664:	20000000 	.word	0x20000000
 8005668:	10624dd3 	.word	0x10624dd3
 800566c:	e000e014 	.word	0xe000e014

08005670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005680 <vPortEnableVFP+0x10>
 8005674:	6801      	ldr	r1, [r0, #0]
 8005676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800567a:	6001      	str	r1, [r0, #0]
 800567c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800567e:	bf00      	nop
 8005680:	e000ed88 	.word	0xe000ed88

08005684 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800568a:	f3ef 8305 	mrs	r3, IPSR
 800568e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d913      	bls.n	80056be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005696:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <vPortValidateInterruptPriority+0x6c>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <vPortValidateInterruptPriority+0x70>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	7afa      	ldrb	r2, [r7, #11]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d209      	bcs.n	80056be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e7fe      	b.n	80056bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056be:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <vPortValidateInterruptPriority+0x74>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <vPortValidateInterruptPriority+0x78>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d909      	bls.n	80056e2 <vPortValidateInterruptPriority+0x5e>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	e7fe      	b.n	80056e0 <vPortValidateInterruptPriority+0x5c>
	}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e3f0 	.word	0xe000e3f0
 80056f4:	20000d1c 	.word	0x20000d1c
 80056f8:	e000ed0c 	.word	0xe000ed0c
 80056fc:	20000d20 	.word	0x20000d20

08005700 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800570c:	f7fe fdbe 	bl	800428c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005710:	4b57      	ldr	r3, [pc, #348]	; (8005870 <pvPortMalloc+0x170>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005718:	f000 f90c 	bl	8005934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800571c:	4b55      	ldr	r3, [pc, #340]	; (8005874 <pvPortMalloc+0x174>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	f040 808c 	bne.w	8005842 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01c      	beq.n	800576a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005730:	2208      	movs	r2, #8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4413      	add	r3, r2
 8005736:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	2b00      	cmp	r3, #0
 8005740:	d013      	beq.n	800576a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f023 0307 	bic.w	r3, r3, #7
 8005748:	3308      	adds	r3, #8
 800574a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <pvPortMalloc+0x6a>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e7fe      	b.n	8005768 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d068      	beq.n	8005842 <pvPortMalloc+0x142>
 8005770:	4b41      	ldr	r3, [pc, #260]	; (8005878 <pvPortMalloc+0x178>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d863      	bhi.n	8005842 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800577a:	4b40      	ldr	r3, [pc, #256]	; (800587c <pvPortMalloc+0x17c>)
 800577c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800577e:	4b3f      	ldr	r3, [pc, #252]	; (800587c <pvPortMalloc+0x17c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005784:	e004      	b.n	8005790 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d903      	bls.n	80057a2 <pvPortMalloc+0xa2>
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057a2:	4b33      	ldr	r3, [pc, #204]	; (8005870 <pvPortMalloc+0x170>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d04a      	beq.n	8005842 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2208      	movs	r2, #8
 80057b2:	4413      	add	r3, r2
 80057b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	2308      	movs	r3, #8
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d91e      	bls.n	800580c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <pvPortMalloc+0xf4>
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e7fe      	b.n	80057f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005806:	69b8      	ldr	r0, [r7, #24]
 8005808:	f000 f8f6 	bl	80059f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <pvPortMalloc+0x178>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <pvPortMalloc+0x178>)
 8005818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800581a:	4b17      	ldr	r3, [pc, #92]	; (8005878 <pvPortMalloc+0x178>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <pvPortMalloc+0x180>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d203      	bcs.n	800582e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <pvPortMalloc+0x178>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <pvPortMalloc+0x180>)
 800582c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <pvPortMalloc+0x174>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	431a      	orrs	r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005842:	f7fe fd31 	bl	80042a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <pvPortMalloc+0x164>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	e7fe      	b.n	8005862 <pvPortMalloc+0x162>
	return pvReturn;
 8005864:	69fb      	ldr	r3, [r7, #28]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3728      	adds	r7, #40	; 0x28
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000492c 	.word	0x2000492c
 8005874:	20004938 	.word	0x20004938
 8005878:	20004930 	.word	0x20004930
 800587c:	20004924 	.word	0x20004924
 8005880:	20004934 	.word	0x20004934

08005884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d046      	beq.n	8005924 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005896:	2308      	movs	r3, #8
 8005898:	425b      	negs	r3, r3
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <vPortFree+0xa8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <vPortFree+0x42>
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e7fe      	b.n	80058c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <vPortFree+0x5e>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	e7fe      	b.n	80058e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <vPortFree+0xa8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d019      	beq.n	8005924 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d115      	bne.n	8005924 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <vPortFree+0xa8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005908:	f7fe fcc0 	bl	800428c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <vPortFree+0xac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4413      	add	r3, r2
 8005916:	4a06      	ldr	r2, [pc, #24]	; (8005930 <vPortFree+0xac>)
 8005918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f000 f86c 	bl	80059f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005920:	f7fe fcc2 	bl	80042a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20004938 	.word	0x20004938
 8005930:	20004930 	.word	0x20004930

08005934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800593a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800593e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <prvHeapInit+0xac>)
 8005942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3307      	adds	r3, #7
 8005952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <prvHeapInit+0xac>)
 8005964:	4413      	add	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800596c:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <prvHeapInit+0xb0>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <prvHeapInit+0xb0>)
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005980:	2208      	movs	r2, #8
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <prvHeapInit+0xb4>)
 8005994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvHeapInit+0xb4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <prvHeapInit+0xb4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvHeapInit+0xb4>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <prvHeapInit+0xb8>)
 80059c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <prvHeapInit+0xbc>)
 80059ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <prvHeapInit+0xc0>)
 80059ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	20000d24 	.word	0x20000d24
 80059e4:	20004924 	.word	0x20004924
 80059e8:	2000492c 	.word	0x2000492c
 80059ec:	20004934 	.word	0x20004934
 80059f0:	20004930 	.word	0x20004930
 80059f4:	20004938 	.word	0x20004938

080059f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <prvInsertBlockIntoFreeList+0xac>)
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x14>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d8f7      	bhi.n	8005a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d108      	bne.n	8005a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d118      	bne.n	8005a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d00d      	beq.n	8005a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e008      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e003      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d002      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20004924 	.word	0x20004924
 8005aa8:	2000492c 	.word	0x2000492c

08005aac <__libc_init_array>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	4e0d      	ldr	r6, [pc, #52]	; (8005ae4 <__libc_init_array+0x38>)
 8005ab0:	4c0d      	ldr	r4, [pc, #52]	; (8005ae8 <__libc_init_array+0x3c>)
 8005ab2:	1ba4      	subs	r4, r4, r6
 8005ab4:	10a4      	asrs	r4, r4, #2
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	42a5      	cmp	r5, r4
 8005aba:	d109      	bne.n	8005ad0 <__libc_init_array+0x24>
 8005abc:	4e0b      	ldr	r6, [pc, #44]	; (8005aec <__libc_init_array+0x40>)
 8005abe:	4c0c      	ldr	r4, [pc, #48]	; (8005af0 <__libc_init_array+0x44>)
 8005ac0:	f000 f82c 	bl	8005b1c <_init>
 8005ac4:	1ba4      	subs	r4, r4, r6
 8005ac6:	10a4      	asrs	r4, r4, #2
 8005ac8:	2500      	movs	r5, #0
 8005aca:	42a5      	cmp	r5, r4
 8005acc:	d105      	bne.n	8005ada <__libc_init_array+0x2e>
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ad4:	4798      	blx	r3
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	e7ee      	b.n	8005ab8 <__libc_init_array+0xc>
 8005ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ade:	4798      	blx	r3
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	e7f2      	b.n	8005aca <__libc_init_array+0x1e>
 8005ae4:	08005bf8 	.word	0x08005bf8
 8005ae8:	08005bf8 	.word	0x08005bf8
 8005aec:	08005bf8 	.word	0x08005bf8
 8005af0:	08005bfc 	.word	0x08005bfc

08005af4 <memcpy>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	1e43      	subs	r3, r0, #1
 8005af8:	440a      	add	r2, r1
 8005afa:	4291      	cmp	r1, r2
 8005afc:	d100      	bne.n	8005b00 <memcpy+0xc>
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b08:	e7f7      	b.n	8005afa <memcpy+0x6>

08005b0a <memset>:
 8005b0a:	4402      	add	r2, r0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d100      	bne.n	8005b14 <memset+0xa>
 8005b12:	4770      	bx	lr
 8005b14:	f803 1b01 	strb.w	r1, [r3], #1
 8005b18:	e7f9      	b.n	8005b0e <memset+0x4>
	...

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr
